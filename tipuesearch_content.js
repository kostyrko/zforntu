var tipuesearch = {"pages":[{"title":"O blogu","text":"Wstęp Ten blog jest poświęcony szeroko rozumianym zagadnieniom związanym z budową stron i aplikacji internetowych, a dokładniej ich frontową stroną. Większość wpisów będzie obejmować zagadnienia z zakresu HTML,CSS,JS. Wpisy stanowić będą notatki, które zapisywać będę w trakcie włąsnej nauki, tak abym w przyszłości mógł do danego problemu powrócić i z taką myślą ten blog powstaje. Natomiast jeśli kiedyś komuś one również pomogą będzie to dla mnie wartością dodaną. Najprawdopodobniej rzadziej pojawiać się będą również posty poświęcone Pythonowi oraz Raspberry Pi (jeśli nie stworzę osobnego bloga poświęconemu temu tematowi.) O mnie Nazywam się Mikołaj Kostyrko i jestem autorem tego bloga. Z wykształcenia jestem archeologiem (specjalizacja: teledetekcja, XX wiek, metodologia), po skończeniu doktoratu oraz pracy na uczelni (Uniwersytet w Bambergu) postanowiłem zmienić zawód na web-developera. Obecnie kształcię się w kierunku tzw. frontendowca, choć faktycznie ścieżkę związaną z IT zacząłem od nauki Pythona. Jeśli jesteś zainteresowany tym czym do tej pory zajmowałem się w archeologii to polecam odwiedzenie tych trzech stron: Mój profil na portalu academia.edu Biografia Archeologii Blog - Archeogis Nazwa bloga jest wieloznaczna - nawiązuje do moich zainteresowań badawczych związanych z archeologią (I WŚ/II WŚ) jak i do moich własnych zmagań z poznawaniem nowych zagadnieniem związanych z Frontendem. Kontakt mkostyrko(małpa)gmail.com","tags":"misc","url":"https://kostyrko.github.io/zfrontu/pages/o-blogu.html","loc":"https://kostyrko.github.io/zfrontu/pages/o-blogu.html"},{"title":"JavaScript: wprowadzenie do React'a","text":"Konfiguracja środowiska Inicjalizacja projektu npm init - y Przygotowanie Webpacka npm i webpack @4 -- save - dev npm i webpack - cli @3 -- save - dev npm i webpack - dev - server -- save - dev Dodanie do package.json skrótu uruchamiającego webpack-serwer \"scripts\" : { [..], \"start\" : \"webpack-dev-server --hot -d\" }, Przygotowanie Babel (core/preset-env/loader) Babel loader pozwala na transpilację przy pomocy Webpacka -> npm: babel-loader npm install - D babel - loader @babel / core @babel / preset - env webpack Instalacja bable pod Reacta (nie jest wymagany jeśli nie używamy JSX) npm i @babel / preset - react --save-dev Konfiguracja pliku konfiguracyjnego dla Bable -> .babelrc { \"presets\" : [ \"@babel/preset-env\", \"@babel/preset-react\" ] } Instalacja Reacta (już nie jako deweloperska zalażność) npm i react @16.11.0 react - dom @16.11.0 Przygotowanie webpack.config.js const path = require(\"path\"); const entryPath = \"sciezka_folderu\"; const entryFile = \"sciezka_pliku.js\"; module.exports = { watch: true, entry: `./ ${ entryPath } / ${ entryFile } `, output: { // miejsce i nazwa zapisu pliku wyjściowego filename: \"out.js\", path: path.resolve(__dirname, ` ${ entryPath } /build`) }, devServer: { // konfiguracja webpack serwera contentBase: path.join(__dirname, ` ${ entryPath } `), publicPath: \"/build/\", compress: true, port: 3001 }, module: { // dodanie babel-loader'a rules: [ { test: /\\.js$/, exclude: /node_modules/, loader: \"babel-loader\" } ] } }; Przygotowanie index.html do wczytania apki <!DOCTYPE html> < html lang = \"pl\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > React </ title > </ head > < body > < div id = \"app\" ></ div > < script src = \"build/out.js\" ></ script > </ body > </ html > Konfiguracja aplikacji pliku js Import (app.js) Import React from \"react\" import ReactDOM from \"react-dom\" // tylko w głównym pliku aplikacji i tylko 1 raz ReactDOM - renderuje/tworzy stronę Schemat: ReactDOM.render(element, miejsce) np . ReactDOM . render ( < h1 > This is not the droid you are looking for !</ h1 > , // JSX document . getElementById ( \" app \" ) // Miejsce ) ; Całość pliku przechowującego react-app np. app.js może wyglądać następująco import React from \"react\" ; import ReactDOM from \"react-dom\" ; ReactDOM . render ( < h1 > This is not the droid you are looking for ! </ h1 > , document . getElementById ( \"app\" ) ); React i VSC Dla tych co korzystają z VSC polecam dodać również bardzo przydatną informację do settings.json, która powoduje, że emmet działa również w plikach js \"emmet.includeLanguages\" : { \"javascript\" : \"javascriptreact\" } CDN Alternatywnie do stosowania się do powyższej konfiguracji, można skorzystać z linków CDN, które wystarczy dodać do heada w pliku html Warto jednak pamiętać, że są to zminifikowana wersja biblioteki React przygotowana jedynie do produkcji React -> < script crossorigin src = \"https://unpkg.com/react@16/umd/react.production.min.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\" ></ script > Babel -> < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > W takim przypadku należy pamiętać, że JS opakowany w tag scriptu powinien być posiadać typ -> text/bable <script type=\"text/babel\"> Więcej na ten temat można przeczytać tutaj React - CDN Links oraz w tym wpisie na blogu - gdzie jest pokazany bardziej rozbudowany przykład bez JSX The 2-minute React app a tutaj o UNPKG Przykładowe zastosowanie Parę słówo o JSX JSX nie jest ekskluzywny dla Reacta, ale został stworzony przez developerów z nim związanych - jest rozszerzeniem możliwości JS w tworzeniu HTML. Jest bardzo do niego zbliżony, ale też wybacza mniej błędów przy pisaniu tagów -> przykładowo każdy z nich musi być zamknięty a wartości muszą znajdować się pomiędzy apostrofami. < span id = \" droid \" > This is not the droid you are looking for !</ span > zamiast React . createElement ( \" span \" , { id : \" droid \" }, \" This is not the droid you are looking for! \" ) ; Atrybuty w JSX różnią się od HTML używają 1) camelCase 2) dodają kolejny wyraz określający np. class -> className / background-color -> backgroundColor W atrybutach mogą się również znaleźć wyrażenia JS zamknięte w nawiasach klamrowych const style { backgroundColor: red; } <div style= {style} ></div> <div padding= {2+2} ></div> React.Fragment -> o fragmentach słów parę JSX może przyjąć tylko jeden element -> stąd aby wyrenderować wiele elementów należy je opakować w jeden nadrzędny np. div, ale od React 1.6 można wykorzstywyać tzw Fragmenty, które są elementem \"klamrowym\", który nie generuje kolejnego elementu <> element1 element2 ...element Można zaimportowania modułu \"Fragment\" z biblioteki \"react\" import React , { Fragment } from \"react\" ; Wówczas wykorzystanie fragmentu wygląda następująco -> element1 element2 ...element Notacje obiektów w ES6 w kontekście JSX Notacje w JS dostępnych od ES6 - ten system zapisu pozwala, na oszczędność kodu - JS potrafi odczytać zmienną jako deklarację CSS const color = \"red\" button { zamiast button { color color : color ; } } Inną cechą, o której warto sobie przypomnieć w kontekście JSX jest operator spread/rozproszenia, który nie tylko pozwala na tworzenie tablic, ale również na ich rozpraszanie, tak samo jak i obiektów np. const divSize = { width : '100px' , marginTop : '20px' } const blue = { zamiast const blue = { backgroundColor : 'blue' , backgroundColor : 'blue' , ... divSize width : '100px' , } marginTop : '20px' } Źródła: Podstawowe informacje Samouczek: Wstęp do Reacta YT: Wprowadzenie do biblioteki React.js React JS - kurs w 60 minut","tags":"reactjs","url":"https://kostyrko.github.io/zfrontu/react-wprowadzenie.html","loc":"https://kostyrko.github.io/zfrontu/react-wprowadzenie.html"},{"title":"Git - odnajdowanie się w gałęziach projektowego drzewa","text":"System kontroli wersji jakim jest GIT (nie jest to akronim, a znaczenie tego słowa w kontekście IT jest dyskusyjne - ja trzymam się tej wersji, że jest ono połączone z brytyjskim slangiem oznaczającym bękarta - patrz wikipedia ) pozwala na różne ścieżki rozwoju przygotowywanego \"produktu\" i najbardziej ogólnie można ująć tą kwestię stwierdzając, że może być ona liniowa (rozwój odbywa się na jedynej gałęzi (Master/ Main )) jak i nieliniowa (oparta na równoległych gałęziach pobocznych tzw. niewolniczych(slave) lub też secondary) . To właśnie ta druga historia rozwoju jest przedmiotem tego wpisu Metadane Pokaż wszystkie gałęzie git branch - a Wynik pokazuje te lokalne oraz remotes (-a -> all, jeśli mają być jedynie remotes to wówczas flaga -r) Jeśli chcemy zobaczyć dokonane commity należy wpisać git show - branch W wyniku tego widzimy wiadomości powiązane z commitami oraz w jakich gałęziach się one znalazły Trawersowanie Jeśli chcemy przełączyć się na wybraną gałąź należy wpisać git checkout < nazwa gałęzi > Przykładowo git checkout master Tworzenie Jeśli checmy stworzyć nową gałąź i się na nią również przełączyć to należy wpisać git checkout - b < nazwa głęzi > np. git checkout - b issue_1 . 7 Jeśli chcemy stworzyć gałąź z konkretnej gałęzi wówczas należy ją wskazać po nazwie nowej gałęzi git checkout - b < nazwa nowej gałęzi > < nazwa gałęzi , której ma wychodzić > Przykładowo git checkout - b issue_1 . 7 dev Następnie git push origin < nazwa nowej gałęzi > Usuwanie Usuwanie gałęzi git push origin --delete <nazwa gałęzi> Przykładowo git push origin --delete issue_1.5 lub jeśli jedynie lokalnie (wcześniej należy przełączyć się na inną gałąź) git branch - d < nazwa gałęzi > lub git branch - D < nazwa gałęzi > // jeśli zachodzą pojawiają się ostrzeżenia ale jesteśmy pewnie swojej decyzji >> Deleted branch issue_1 . 5 ( was 9 ef25f3 ). Commit Faza przejściowa => stage oraz komitowanie -m -> --message/wiadomość -a -> --all wszystkie (pliki trafiają na stage/etap przejściowy ) więcej wyjaśnieni skrótów można znaleźć w explainshell git commit - a - m 'treść wiadomości' alternatywnie można skorzystać z komendy -A (wymuszone all) git add - A Spowoduje, że pliki, które do tej pory były edytowane (zawierają zmiany) trafią do stadium przejściowego (ich zmiana jest zauważona i odnotowana lokalnie) i wymagają wypchnięcia do remote repo jeśli mają być widoczne dla innych. Można tego dokonać poprzez... git commit - m \"treść wiadomości\" Wizualizacja gałęzi Wizualizacja repo przy pomocy git-grafu git log --all --decorate --oneline --graph Uaktualnianie projektu lokalnego do zdalnego repo git fetch --all git pull --all Uaktualnianie i łączenie gałęzi Uaktualnianie gałęzi do stanu innej gałęzi można wykonać korzystając z komendy rebase (pobiera wówczas ew. zmiany np. z dałęzi głównej np. dev) lub poprzez mergowanie, dodatkowo można skorzystać z opcji --no-ff -> no fast forward. Kolejność działania w przypadku wypychania zmian na gałąź rozwojową 1) uaktualniamy/łączymy gałąź na której pracujemy np. poprzez mergowanie do niej gałęzi rozwojowej 2) rozwiązujemy na niej ew. konflikty, jeśli wszystko działa możemy zgłosić ją do procesu recenzji (jeśli taka możliwość istnieje) 3) Gałąź rozwojową mergujemy z gałęzią, na której do tej pory pracowaliśmy Merge git merge < nazwa ga łę zi > < nazwa ga łę zi DO kt ó rej ma by ć uaktualniona obecna > ======= git merge feature_4 . 1 develop Rebase Rebase spowoduje, że część historii zmian zostanie stracona lub inaczej rzecz ujmując gałąź przejmująca zmiany nie przejmuje historii commitów i widoczne na niej będą jedynie te, które na niej wykonano a nie innej gałęzi - plusem jest to, że struktura jest czytelniejsza. git rebase < nazwa ga łę zi DO kt ó rej ma by ć uaktualniona obecna > ====== git rebase develop Fast forward vs non fast forward Domyślnie mergowanie jest ustawione na -ff (fast forward) co oznacza - gładkie scalanie, w przypadku wykorzystania opcji --no-ff pojawia się dodatkowy węzeł wskazujący na moment połączenia się dwóch gałęzi --no-ff -> no fast forward git checkout < nazwa ga łę zi DO kt ó rej ma by ć dodana tre ść > git merge -- no - ff < nazwa ga łę zi , kt ó ra ma by ć przy łą czona > git add - A git commit - m \" treść wiadomości \" git push origin < nazwa ga łę zi DO kt ó rej ma by ć dodana tre ść > Źródła: Git-Branch Easily rename your Git default branch from master to main Merging vs. Rebasing The golden rule of rebasing 3 sposoby na git merge Stack Overflow Pretty git branch graphs Create a branch in Git from another branch Difference between \"git add -A\" and \"git add .\" How to get changes from another branch Git: getting changes from another branch","tags":"git","url":"https://kostyrko.github.io/zfrontu/git-galezie.html","loc":"https://kostyrko.github.io/zfrontu/git-galezie.html"},{"title":"JavaScript: XMLHttpRequest i REST API","text":"! REST -> Representational state transfer (pl. zmiana stanu poprzez reprezentacje) Wysyłanie danych Tym razem do prezentacji możliwości XMLHttpRequest posłużę się fake API -> https://reqres.in/ (\"A hosted REST-API ready to respond to your AJAX requests\"), które pozwala na ćwiczenie funkcjonalności REST API Wysyłanie danych wymaga (1) przygotowanie danych do wysłania const data = { firstname = \"John\" ; lastname = \"Snow\" ; } ; const json = JSON . stringify ( data ); (2) stworzenie nowego obiektu XMLHttpRequest const xhr = new XMLHttpRequest (); (3) Zdefiniować połączenie za pomocą metody open() wykorzystując słowo kluczowe POST const url = https :// reqres . in / api / users ' ; xhr . open ( \"POST\" , url , true ); (4) ustalenie metadanych wysyłanej informacji - nagłówek (headera) będącego częścią teksty wysłanego do serwera, który jest informacją o przesyłanych danych setRequestHeader ( nagłówek , wartość ) Gdzie -> nagłówek : określa nazwę nagłówka, wartość : określa wartość nagłówka, tu również może pojawić się informacja na temat formatu kodowania xhr . setRequestHeader ( 'Content-type' , 'application/json; charset=utf-8' ); (5) Ustawienie nasłuchiwania z wiadomością nastawioną na tworzenie 201 - Created (Utworzono – wysłany dokument został zapisany na serwerze) xhr . onload = function () { const users = JSON . parse ( xhr . responseText ) ; if ( xhr . readyState == 4 && xhr . status == \" 201 \" ) { console . table ( users ) ; } else { console . error ( users ) ; } } (6) Wysłanie żądania z przekazanymi danymi xhr . send ( json ) ; Całość zapytania może prezentować się w następujący sposób: const url = ' https://reqres.in/api/users ' ; const data = {} ; data . first_name = \" John \" ; data . last_name = \" Snow \" ; const json = JSON . stringify ( data ) ; const xhr = new XMLHttpRequest () ; xhr . open ( \" POST \" , url , true ) ; xhr . setRequestHeader ( ' Content-type ' , ' application/json; charset=utf-8 ' ) ; xhr . onload = function () { const users = JSON . parse ( xhr . responseText ) ; if ( xhr . readyState == 4 && xhr . status == \" 201 \" ) { console . table ( users ) ; } else { console . error ( users ) ; } } xhr . send ( json ) ; Edytowanie/Uaktualnianie istniejących danych Edytowanie danych istniejących na serwerze jest zbliżone do procesu wyżej przedstawionego związanego z wysyłaniem danych -> główne różnice zwarte są w definiowaniu połączenia (należy użyć słowo kluczowe PUT oraz zdefiniować pozycję dla której dane powinny zostać zmienione), tym razem status odpowiedzi zwrotnej powinien być równy 200 Przykładowo xhr . open ( \"PUT\" , url + '/12' , true ); Gdzie url + 12 wyznacza konkretną część danych/obiekt zawartą na serwerze, w tym przypadku użytkownika Zapytanie może prezentować się w następujący sposób: const url = https : // reqres . in / api / users ' ; const data = {} ; data . firstname = \" Jan \" ; data . lastname = \" Snieg \" ; const json = JSON . stringify ( data ) ; const xhr = new XMLHttpRequest () ; xhr . open ( \" PUT \" , url + ' /12 ' , true ) ; xhr . setRequestHeader ( ' Content-type ' , ' application/json; charset=utf-8 ' ) ; xhr . onload = function () { const users = JSON . parse ( xhr . responseText ) ; if ( xhr . readyState == 4 && xhr . status == \" 200 \" ) { console . table ( users ) ; } else { console . error ( users ) ; } } xhr . send ( json ) ; Usuwanie danych Usuwanie danych jest jeszcze prostsze, ponieważ wymaga jedynie wskazanie na obiekt do usunięcia oraz poprawnego zdefiniowania połączenia, tym razem przy pomocy słowa kluczowego DELETE. Usuwanie danych nie wymaga tworzenia nagłówka, jednak tym razem status odpowiedzi powinien być równy 204 Przykładowo: function deleteUser () { const usrId = document . querySelector ( ' .delete-by-id ' ) . value const xhr = new XMLHttpRequest () ; xhr . open ( \" DELETE \" , url + ` / ${ usrId }`, true ) ; xhr . onload = function () { if ( xhr . readyState == 4 && xhr . status == \" 204 \" ) { userInfo . innerText = ` User width id : ${ usrId } was deleted ` } else { console . error ( users ) ; } } xhr . send ( null ) ; } Przedstawiony wyżej kod znajduje się również tutaj na GitHub - Gist I małe podsumowanie: Źródła: Duckett, Jon. Javascript and jquery: Interactive front-end web development. Wiley Publishing, 2014. kursjs.pl MDN-Using XMLHttpRequest The XMLHttpRequest Definitive guide","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-xhr-rest.html","loc":"https://kostyrko.github.io/zfrontu/js-xhr-rest.html"},{"title":"JavaScript: XMLHttpRequest - wstęp (GET)","text":"XMLHttpRequest XMLHttpRequest (XHR) służy do wykonywania dynamicznych (asynchronicznych) połączeń z serwerem i jest wykorzystywany do 1) aktualizacji informacji zawartych na stronie internetowej UPDATE 2) wysłania żadania danych do serwera po załadowaniu strony - REQUEST 3) przyjęcia informacji przesłanej przez serwer - po załadowaniu strony RECEIVE 4) przesłania danych do serwera (w tle) - SEND . Obecnie XHR został zastąpiony Fetch API. Wysyłanie żądania nastawione na odbiór danych W pierwszej kolejności należy utworzyć obiekt XMLHttpRequest() odwołując się do notacji konstruktora typu XHR const xhr = new XMLHttpRequest (); Zastosowanie function seekUser () { const xhr = new XMLHttpRequest (); [.........] } A następnie zdefiniować połączenie za pomocą metody open() przygotowującej żadanie i przyjmującej 3 atrybuty 1) typ (połączenia -get, post, put, patch, delete), 2) url (adres) obsługujący żądanie, 3) definicję rodzaju połączenia (synchroniczne/false lub asynchroniczne/true) xhr.open('GET',`https://api.github.com/users/ ${ inputTxt . value } `, true); Konfigurację należy zakończyć metodą send() -> xhr.send(), która wysyła żądanie połączenia z serwerem, gdy dane nie są wysyłane (np. GET) wówczas argument domyślnie jest null / można również taką wartość wpisać, w przypadku wysyłania danych (POST) treść danych znajdzie się zamknięta pomiędzy nawiasami xhr . send ( null ) Zastosowanie function seekUser () { const xhr = new XMLHttpRequest () ; xhr . open ( ' GET ' , ` https : // api . github . com / users / ${ inputTxt . value }`, true ) ; [......] xhr . send ( null ) ; } Oczekiwanie Oczekiwanie na informację zwrotną może trwać mniej lub więcej czasu, ale informacja zwrotna nie jest dostępna natychmiast Po przesłaniu zapytania wywołana zostaje zdarzenie onload (w trakcie ładowania), do którego jest przypisana funkcja anonimowa odpowiedzialna za reakcję na zwróconą informację. xhr . onload = function () { if ( this . status === 200 ) {... } Istotnymi zdarzeniami są load (połączenie zakończone pozytywnie, zostały dane zwrócone), error (błąd w połączeniu), progress (połączenie trwa) + abort (anulowanie połączenia) timeout (przekroczenie czasu połączenia) loadstart/loadend (rozpoczęcie/zakończenie połączenia) Zwrócone dane z serwera nie koniecznie muszą oznaczać jednoznacznie pozytywny wynik -> może zostać zwrócony status błędu 404(brak strony), 500(błąd serwisu), 401(forbidden), stąd walidacje. W przypadku zwrócenia danych o które zapytano status połączenia powinien wynosić 200 . Praktykowana jest prosta walidacja oparta na if Zastosowanie gdzie ${ inputTxt . value } nazwa u ż ytkownika np . https : // api . github . com / users / kostyrko function seekUser () { const xhr = new XMLHttpRequest () ; xhr . open ( ' GET ' , ` https : // api . github . com / users / ${ inputTxt . value }`, true ) ; xhr . onload = function () { if ( xhr . status === 200 ) { [...] } } xhr . send ( null ) ; } Oczekując na odpowiedź można skorzystać z typu odpowiedzi metod onreadystatechange (wyłapuje kiedy readyState ulega zmianie) i readyState , która wskazuje na stan przesyłania danych/komunikacji z serwerem - gdzie: 0 - oznacza zapytanie niewysłane (open() nie zostało wywołane) 1 - oznacza zapytanie wysłane (open() zostało wywołane) 2 - nagłówki zostały odebrane (send() zostało wywołane, są dostępne taka samo jak status połączenia) 3 - trwa pobieranie odpowiedzi (responseText - zawiera częściowe informacje), 4 - Operacja została zakończona Zastosowanie function seekUser () { const xhr = new XMLHttpRequest () ; xhr . open ( ' GET ' , ` https : // api . github . com / users / ${ inputTxt . value }`, true ) ; xhr . onreadystatechange = () => { if ( xhr . readyState === 4 && xhr . status == ' 200 ' ) { [....] } xhr . send ( null ) ; } Odpowiedź Jeśli load dokona się z sukcesem (dojdzie do połączenia z serwerem) wówczas możemy wykorzystać istniejące metody obiektu xml : response - treść odpowiedzi (na ogół w formie tekstowej) responseText - zwraca odpowiedź jako tekst responseXML - - zwraca odpowiedź jako XML status - status połączenia statusText - status połączenia w formie tekstowej Treść odpowiedzi w formie tekstowej pozwala np. na konwersję do postaci JSON ( JSON.parse ) Zastosowanie function seekUser () { const xhr = new XMLHttpRequest () ; xhr . open ( ' GET ' , ` https : // api . github . com / users / ${ inputTxt . value }`, true ) ; xhr . onload = function () { if ( xhr . readyState === 4 && xhr . status === 200 ) { console . log ( typeof xhr . response ) ; // >> string console . log ( xhr . response ) ; // <dane> console . log ( typeof xhr . responseText ) ; // >> string console . log (( JSON . parse ( xhr . responseText )) . email ) ; // <email> } } xhr . send ( null ) ; } Przykład zastosowania na podstawie GitHub API Rezultat See the Pen GitHub- User's Avatar Seeker by Mikołaj Kostyrko ( @mkostyrko ) on CodePen . Źródła: Duckett, Jon. Javascript and jquery: Interactive front-end web development. Wiley Publishing, 2014. kursjs.pl MDN-Using XMLHttpRequest How to make HTTP requests using XMLHttpRequest (XHR) Online Multimedia Tutorial 02 – AJAX, Ludwig-Maximilians-Universität München","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-xhr.html","loc":"https://kostyrko.github.io/zfrontu/js-xhr.html"},{"title":"JavaScript: Webpack - krótkie wprowadzenie","text":"Wstęp Webpack generuje tzw. pakiety (ang. bundles -> bundle.js) na podstawie wytworzonego tzw. drzewa zależności oraz dostosowanie ich do formatu czytelnego dla możliwie jak najszerszego zakresu przeglądarek internetowych - jest swego rodzaju kompilatorem powstałej treści na podstawie różnych formatów do takiego, który przyjmuje przeglądarka internetowa (js,html,css). W tym sensie działą podobnie do innych tzw. task runnerów (narzędzie do automatyzacji działań dokonywanych na plikach) jak Gulp Istotną zaletą korzystania z Webpacka jest to, że każdy plik jest traktowany jako moduł (obraz, css, font, js etc). ( CommonJS -> po stronie node.js i moduły z ES (klient) nie są dostępne dla wszystkich przeglądarek stąd potrzeba ich transpilacji) Loader - przetwarza plik (nie-js) w ten sposób by mógł być dodane do drzewa zależności (np. css-loader, babel-loader, html-loader) - etap transpilacji np. html-loader pozwala na modułowe tworzenie plików HTML (więcej na ten temat: SO - How can I provide parameters for webpack html-loader interpolation? ) Wtyczki - różnego rodzaju wtyczki pozwalają na osiągnięcie oczekiwanego efektu np. zapisanie reguł css do osobnego pliku css/po za plik bundle.js poprzez pracę na gotowych pakietach (np. extract text plugin [wydobywa css], webpack-uglify-js-plugin[miniaturyzuje js]) np. wtyczka purge-css pozbywa się nieużywanych klas CSS (więcej na ten temat: GH-repo purgecss-webpack-plugin ) Instalacja oraz użycie WebPacka Inicjalizajca porojektu (stworzenie package.json) npm init - y Instalacja Wepacka w v.4 oraz cli v.4 jako developerska zależność npm i webpack @4 -- save - dev npm i webpack - cli @3 -- save - dev Narzędzie nie jest dostępne globalnie zatem aby nie wywoływać go poprzez każdorazowe wprowadzeni ścieżki ./node_modules/.bin/webpack można dodać webpacka do sekcji scripts w package.json przypisując go do klucza np. start (powszechnie stosowana nazwa) + należy wskazać główny plik (wejścia) oraz nazwę pliku wyjścia (pod tą nazwą zostanie zapisany bundle) { \" scripts \" : { \" test \" : \" echo \\ \" Error : no test specified \\ \" && exit 1 \" , \" start \" : \" ./node_modules/.bin/webpack app.js --output out.js \" } } Teraz wystarczy wpisać npm start ::: Istnieje możliwość przeprowadzenia globalnej instalacji Webpacka, ale ta nie jest polecana (wówczas powyższy krok jest zbędny) npm i -g webpack ::: Budowa paczki od punktu wejścia i dołącza odnaleziony kod do pliku wyjścia, a po drodze natrafia na instrukcję require(), która wskazuje na konkretne pliki i znajdujący się w nich kod -> w wyniku tego połączenia powstaje plik, który jest trudny do odczytu przez człowieka, ale jest czytelny dla node.js lub przeglądarki Przykładowe użycie // package . json \" scripts \" : { \" test \" : \" echo \\ \" Error : no test specified \\ \" && exit 1 \" , \" start \" : \" ./node_modules/.bin/webpack r2d2.js --output out.js \" }, // droidFinder . js function findDroid ( droid ) { console . log ( ` You : Is this ${ droid }?\\ nObi Wan : This is not the droid you are looking for ` ) ; } module . exports = findDroid ; // r2d2 . js const findDroidFunc = require ( ' ./droidFinder ' ) ; findDroidFunc ( \" R2D2 \" ) // out . js ! function ( e ) { var t = {} ;function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=0)}([function(e,t,n){n(1)(\"R2D2\")},function(e,t){e.exports=function(e){console.log(`You: Is this ${e}?\\nObi Wan: This is not the droid you are looking for`)}}]); ----------- >> node out . js >> You : Is this R2D2 ? Obi Wan : This is not the droid you are looking for Tworzenie pliku konfiguracyjnego dla Webpacka Istnieje możliwość konfiguracji Webpacka przy pomocy odpowiedniego do tego utworzonego pliku = webpack.config.js w którym należy zawrzeć informacje na temat wtyczek oraz zadań jakie powinny zostać przez to narzędzie wykonane Prosta konfiguracja Instalacja npm i webpack @4 -- save - dev npm i webpack - cli @3 -- save - dev // webpack.config.js const path = require ( ' path ' ); // moduł node.js, który pozwala na pracę z module.exports module . exports = { // konfiguracja eksportu entry : ' . / src / index . js ' , // wskazanie wejścia output : { // wskazanie wyjścia filename : ' main . js ' , // podanie nazwy pliku wyjściowego path : path . resolve ( __dirname , ' dist ' ), // moduł node.js wskazujący na ścieżkę pliku wyjściowego }, }; więcej info na temat path.resolve() Tworzymy własną konfigurację w webpack.config.js // package . json >> wersja 1 << \" scripts \" : { \" test \" : \" echo \\ \" Error : no test specified \\ \" && exit 1 \" , \" start \" : \" webpack-dev-server --hot -d \" , // flaga -- hot pozwala na zmian ę modu łó w w trakcie pracy bez konieczno ś ci od ś wie ż ania - d -> debug \" build \" : \" webpack -p \" // webpack production [ Minification using UglifyJsPlugin / Runs the LoaderOptionsPlugin ] }, ======================================= >> wersja 2 << \" scripts \" : { \" start \" : \" webpack --mode development --watch \" , \" build \" : \" webpack --mode production \" , \" server \" : \" webpack-dev-server --inline --hot \" }, >> Zale ż no ś ci << \" devDependencies \" : { \" @babel/core \" : \" &#94;7... \" , \" @babel/preset-env \" : \" &#94;7... \" , \" babel-loader \" : \" &#94;8... \" , \" webpack \" : \" &#94;4... \" , \" webpack-cli \" : \" &#94;3... \" , \" webpack-dev-server \" : \" &#94;3... \" , \" style-loader \" : \" ... \" , \" css-loader \" : \" ... \" , \" saas-loader \" : \" ... \" } Umożliwia zastsowowanie komend -> nmp start/ npm build/ npm server więcej info na webpack production // webpack . config . js const path = require ( \" path \" ) ; const entryPath = \" sciezka/folderu/z_plikami \" ; const entryFile = \" nazwa_pliku.js \" ; module . exports = { watch : true , // obserwuj zmiany entry : `. / ${ entryPath } / js / ${ entryFile }`, // plik wej ś ciowy output : { // plik wyj ś ciowy filename : \" out.js \" , // nazwa pliku wyj ś ciowego path : path . resolve ( __dirname , `${ entryPath } / build ` ) // folder wyj ś ciowy / zapisu }, devServer : { // tworzenie sewera ( tu u ż yta zale ż no ść \" webpack-dev-server \" ) contentBase : path . join ( __dirname , `${ entryPath }` ) , publicPath : \" /build/ \" , compress : true , port : 3001 }, module : { // w ł a ś ciwo ść modules z przypisanymi obiektami posiadaj ą cymi w ł a ś ciwo ść rules - te definiuj ą spos ó b pracy z r óż nymi typami plik ó w ( tu u ż yta zale ż no ść \" babel-loader \" / \" @babel/preset-env \" / \" @babel/core \" ) rules : [ { test : / \\. js $ / , // zawiera wyra ż enie regularne wskazuj ą ce na rodzaj pliku ( rozszerzenia ) , kt ó re ma by ć obj ę te dzia ł aniem loadera exclude : / node_modules / , // wykluczenie plik ó w z folderu .. loader : \" babel-loader \" }, { test : / \\. css $ / , use : [ ' style-loader ' , ' css-loader ' ] // css - loader importuje kod css do JS a style - loader - wstrzykuje CSS do HTML }, { test : / \\. scss $ / , use : [ ' style-loader ' , ' css-loader ' , ' sass-loader ' ] // saas - loader transpiluje saas na css } ] } plugins : [ // wtyczki new webpack . optimize . UglifyJsPlugin ( { // wskazanie wtyczki beautify : true , // konfiguracja comments : false } ) ] } ; opcjonalnie: [...] module: { rules: [ { test: /\\.m?js$/, exclude: /(node_modules|bower_components)/, use: { loader: \"babel-loader\", options: { presets: [\"@babel/preset-env\"] } } } ] } [...] Źródła: Webpack 3 tutorial PL by Overment Podstawy konfiguracji Webpack webpack.js.org webpack-github repo Zsh: command not found: webpack webpack command not working webpack-getting started webpack-configuration Webpack i Babel Konfiguracja Webpack 2+ - część #3: pluginy Konfiguracja Webpack 2+ – część #2: loadery Webpack 4 – Jak go skonfigurować i zacząć pracę?","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-webpack.html","loc":"https://kostyrko.github.io/zfrontu/js-webpack.html"},{"title":"Git - cofanie commita w VSC","text":"Na co dzień korzystam z zestawu VSC + GitHub Bywa tak, że chcę usunąć ostatni dodany przez nas commit lub cofnąć daną gałąź do określonego commita usuwając wszystkie, które po nim nastąpiły. Aby cofnąć daną gałąź o jeden commit wystarczy wpisać git reset --hard HEAD~1 a jeśli zależy nam na konkretnym commicie to wówczas git reset --hard <adres commita> Zachodzi wówczas sytuacja, w której repozytorium znajdujące się na GitHubie jest \"do przodu\" względem tego, które znajduje się u mnie na dysku lokalnym - sygnalizuje to min. ikona w lewym dolnym rogu jeśli teraz dokonam synchronizacji (Synchronise Changes) vsc zrobi pull a następnie push - repo wróci do stanu sprzed cofnięcia commita. Stąd zamiast tego muszę zrobić tzw twardy (lub przy użyciu siły push) korzystając z komendy: git push origin HEAD --force dzięki niej repozytorium zostanie sprowadzone (\"wyzerowane\") do tego stanu jaki mam u siebie na dysku lokalnym Warto pamiętać o tym, że można dodać własne komendy do narzędzia (Synchronise Changes) przy pomocy .gitconfig Źródła: https://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git https://stackoverflow.com/questions/36878344/what-does-git-sync-do-in-vscode https://evilmartians.com/chronicles/git-push---force-and-how-to-deal-with-it","tags":"git","url":"https://kostyrko.github.io/zfrontu/git-vsc-cofanie.html","loc":"https://kostyrko.github.io/zfrontu/git-vsc-cofanie.html"},{"title":"Agile > Scrum > Lean Management > Kaban","text":"Wstęp W pierwszej kolejności polecam podcast DVLPR-WNBE #14 -> Scrum Master i odpowiedzi na pytania Developer Wannabe podcast #14 , który stał się przyczynkiem do moich dalszych poszukiwań związanych z poruszonymi poniżej kwestiami i pozwolił mi na uporządkowanie wcześniej zasłyszanych pojęć, których zakres nie był mi znany - dodam, że nadal czuję się w nich zagubiony i wraz z upływem czasu mam nadzieję wracać do poniższej treści i ją edytować (głównie wzbogacać ją o tekst - moją własną interpretację niżej przedstawionych pojęć). Na ogólnym poziomie rozumiem Agile jako pojęcie najwyższego rzędu, ukazujące pewnego rodzaju założenia pracy zespołowej, przełamujące schematyczne myślenie liniowe oparty na szybkim wprowadzeniu danego produktu lub jego modułów do użytkowania i testowania przez klienta, tak aby móc zebrać od niego informacje zwrotną oraz dostosowanie produktu na tej podstawie (zwinne programowanie). To założenie również leży u podstaw Scrum , który angażuje się głębiej w określenie zasad oraz interakcji panujących w zespole (np. poprzez założenie spotkań grupowych w trakcie, których przedstawia się wykonywane zadania ew. problemy czy tzw sprintów - czas w którym jest tworzona forma oprogramowania, która jest możliwa do użytkowania (testowania)). Zarówno Agile jak i Scrum się przenikają i podkreślają wagę tzw umiejętności miękkich (co wydaje się być oczywiste, ale często szybko znika za horyzontem kiedy przychodzi do działania w trakcie realizacji projektów - jest to rzecz jasna zależne od świadomości zespołu). Lean development również nie jest daleki od wyżej przedstawionych założeń ale kładzie nacisk na nieco inne aspekty/wartości i ujmuje problemy interakcji w zespole oraz pomiędzy nim a klientem na poziomie ogólnym - podobnie do Agile . Kaban oraz Tablica Kaban jest związana z Lean development jak Scrum z Agile - zwraca większą uwagę na proces, w sposób bardziej szczegółowy/konkretny. Tablica Kaban - pozwala na wizualizację tego procesu mając na uwadze zwiększenie jego transparentności oraz umożliwia łatwe zarządzanie organiczne projektem. Agile/Programowanie zwinne - model realizacji zadania w formie ogólnych założeń Alternatywa wobec kaskadowego/liniowego sposóbu produkcji oprogramowania (Watefall) - podążania za jasno wytyczonym planem. Stosując metody Agile należy mieć na uwadze możliwe zmiany oraz wykazywać się umiejętnościami miękkimi. Główne założenia \"Agile manifesto\" ważne istotne jednostki i interakcje ponad proces i narzędzia działające oprogramowanie ponad dokumentacją współpraca z klientem ponad negocjację kontraktu rekcja na zmiany/elastyczność ponad sztywne trzymanie się planu źródło grafiki źródło grafiki Scrum/młyn - szczegółowe zasady współpracy Termin scrum został zapożyczony z.. Rugby w połowie lat 80-tych przez Japończyków i odnosi się do metod związanych z rozwojem nowego produktu - polega na \"tworzeniu wiedzy organizacyjnej [...] oraz wprowadzania innowacji w sposób ciągły i spiralny\" [... nie sposób tutaj nie odnaleźć analogii to spirali/koła hermeneutycznej znanej z filozofii/filologii] W metodzie Scrum istotne są trzy elementy 1) role projektowe (scrum master, klient) 2) narzędzia organizujące pracę (lista funkcjonalności - produkt backlog) 3) wydarzenia (sesja planowania, sprint) źródło grafiki źródło grafiki źródło grafiki Lean Management/szczupłe zarządzanie - zarządzanie procesem Dostarczanie produktów takich jakich klienci oczekują (produkcja z myślą o kliencie) mając na uwadze również potrzeby pracowników. Eliminowanie marnotrawstwa (to co nie dodaje wartości do produktu - definiowanej przez klienta) i stawianie na elastyczność oraz zdobywanie nowej wiedzy. Podstawowe założenia: tworzenie jakości i spójności wzmocnienie pozyskiwania wiedzy podejmowanie decyzji najpóźniej jak to możliwe wdrażanie najwcześniej jak to możliwe wdrażanie zespołu spojrzenie na całość źródło grafiki Tablica Kaban - wizualizacja procesu Kaban - jest sposobem wizualizacji etapów produkcji związanych z wytwarzaniem np. nowego oprogramowania Wymaga: wizualizacji (tablica kaban -> np. trello), ograniczenia pracy w toku (założenie, że na danym etapie tylko określona ilość zadań może być realizowana), pozwala na zarządzanie strumieniem poprzez pomiar, z góry przyjętych wartości. Źródła: Agile The Agile Manifesto and Twelve Principles Scrum How scrum help turn around our development process Lean Management Lean software development- WIKI Zasady lean Kaban Kanban w tworzeniu oprogramowania","tags":"dev","url":"https://kostyrko.github.io/zfrontu/dev-agile-scrum.html","loc":"https://kostyrko.github.io/zfrontu/dev-agile-scrum.html"},{"title":"HTML -> wstęp do budowy dostępnych stron (ang. Accessibility)","text":"Kwestia dostępności (ang. accessibility) jest związana z takim tworzeniem stron internetowych (w tym w dużej mierze odpowiedniej struktury HTML) aby osoby posiadające różnego rodzaju zaburzenia (np. widzenia) lub problemami z motoryką ciała w możliwie jak najprostszy sposób mogły z nich korzystać. Do osób wykluczonych zaliczyć można: osoby niepełnosprawne sensorycznie osoby niepełnosprawne manualnie osoby niepełnosprawne intelektualnie seniorów obcokrajowców osoby niezamożne Podstawowym dokumentem jest Web Content Accessibility Guidelines , w którym określono wymogi jakie należy spełnić projektując możliwie szeroko dostępne strony internetowe. Podstawowe i najważniejsze zasady: Stosowanie semantycznego HTML oraz przypisywania tagom odpowiednich im atrybutów informujących użytkownika o treści w nich zawartych w dodatkowy sposób. Należy również pamiętać o kwestii wizualnej - stosowanie odpowiedniego kontrastu (osoby niedowidzące) oraz o znacznym ograniczeniu animacji (zaburzenia neurologiczne - epilepsja). Treść strony internetowej oraz jej układ również ma znaczenie - powinna być przekazana w możliwie najprostszy sposób. Skrót ogólnych zasad Obraz Jeśli obraz jest istotnym elementem tekstu powinien zostać dodany przy pomocy taga img i posiadać atrybut alt (tekst będący alternatywą dla obrazu - powinien opisywać to co się na nim znajduje). Obrazy będące jedynie ozdobnikami należy załączać przy pomocy CSS i background . ::: Warto pamiętać, że animacje oraz jaskrawe kolory mogą użytkowników rozproszyć lub wywołać padaczkę. ::: Dźwięk i wideo Nagrania różnego typu (sam dźwięk jak i wideo) powinny posiadać transkrypcje. Elementy strony sterujące odtwarzaniem dźwięku oraz obrazu winny być widoczne i łatwo dostępne, również przy pomocy klawiatury jak i czytnika. Nawigacja i poruszanie się po stronie Istotne jest to aby elementy posiadały opcję focusu , a przechodzenie pomiędzy kolejnymi elementami strony było dostępne z poziomu klawiatury . ::: Taindex pozwala na nadanie wyższego priorytetu dostępności przy pomocy klawisza TAB. ::: Sama nawigacja powinna być skonstruowana według jednej zasady. Odnośniki powinny być jasno oznaczone i zrozumiałe/wytłumaczone. Strona powinna posiadać możliwość powiększenia (np. przy pomocy przeglądarki) w sposób responsywny. Konstrukcja strony Strona winna posiadać odpowiedni title oraz oznaczenie języka lang , powinno stosować się nagłówki h1-h6 mając na uwadzę znaczenie treści, którą reprezentują. Treść powinna być porządkowana przy pomocy list (klamra semantyczna). Tabele powinny posiadać wszystkie elementy (np. nagłówek) i służyć jedynie do prezentowania treści oraz danych. Formularze powinny posiadać podpisy label . Barwy Bardzo ważne jest stosowanie odpowiedniego kontrastu pomiędzy wykorzystanymi barwami tak aby miały odpowiedni kontarast patrz na narzędzie -> Contrast Checker albo tanguru contrasst finder Treść visibility: hidden oraz display: none nie powinny być stosowane do ukrywania dużej ilości tekstu (są ignorowane przez czytniki) <b> - wyróżniamy tekst na stronie <i> - wyróżnienie słowa w treści tekstu <strong> - wzmocnienie znaczenia na stronie (całe zdanie) <em> - wyróżnienie słowa w treści w tekście (część zdania) <ins> - oznacza tekst dodany (insertion) zawierające atrybuty cite (metadane zmian) i datatime <ins cite= \"github.io...\" datetime= \"2222-02-02\" > Zaktualizowano 2020-06-26 </ins> <del> - usunięcie - te same zasady co dla <ins> <del cite= \"github.io...\" datetime= \"2222-02-02\" > Zaktualizowano 2020-06-26 </del> <s> - strike-through/przekreślenie - oznaczenie już niekatulanej informacji u - underline/podkreślenie - imiona lub specjalnie wstawione w tekst błędy językowe Wtyczka do VSC działa jak ESLint ale pod kątem dostępności sprawdzając html Web Accessibility Atrybuty WAI-ARIA -> Accessible Rich Internet Applications. Standard mający na uwadzę dostępność i użyteczność stron internetowych dla tzw wykluczonych cyfrowo Poprzez przypisanie ról do poszczególnych elementów HTML współpracuje z czytnikami stron -> te dzielą się na 4 kategorie abstract , widget (wszystko to co odpowiada za interaktywność strony), landmark roles (regiony dokumentu) i document structure roles (struktura dokumentu) Stany kontrolowane są przy pomocy JS - jednak istnieją atrybuty, które w przypadku niezaładowania JS działają w zbliżony i określony sposób np aria-hidden=\"\" atrybut znaczenie <div role=\"banner\"> przypisanie znaczenia np. banneru/dialogu/prezentacji/nawigacji aria-hidden=\"true\" ukrycie elementu aria-haspopup=\"true\" posiada okno wyskakujące aria-haspopup=\"true\" posiada okno wyskakujące Czytaj więcej tutaj Things I learned by pretending to be blind for a week Źródła: WAVE (Web Accessibility Evaluation Tool) Imitacja czytnika stron - wtyczka Chrome https://developer.mozilla.org/en- US/docs/Web/Accessibility/ARIA https://developer.mozilla.org/pl/docs/Web/Dost%C4%99pno%C5%9B%C4%87 http://users.uj.edu.pl/~konior/tech_www/disabled/dostepnosc1.html#_Toc319571640 http://www.pad.widzialni.org/narzedziownia http://dostepnestrony.pl","tags":"html","url":"https://kostyrko.github.io/zfrontu/html-dostepnosc.html","loc":"https://kostyrko.github.io/zfrontu/html-dostepnosc.html"},{"title":"CSS konwencje nazewnictwa klas -> OOCSS, BEM i BEMIT","text":"Podstawowe zasady nazewnictwa Nazewnictwo klas CSS zaczyna się od... wybrania odpowiedniego taga HTML a później... Podział na 3 sposoby nazywania klas funkcjonalność (Functional class names) -> połączenie klasy z elementem ze względu na jego znaczenie selected-button , important-text zawartość (Content-based class names) -> klasy wskazujące na zawartość elementu submit-button , intro-text prezencja (Presentational class names) -> klasy zorientowane na sposób prezentacji elementu round-image green-button więcej na ten temat przeczytasz tutaj Naming CSS Stuff Is Really Hard OOCss/ Object Oriented CSS Metodyka OOCSS jest zorientowana na stworzenie modularnego CSS zorientowanego obiektowo - elementy strony postrzegane są jako obiekty Podstawowe zasady: separacja struktury od stylu (tworzenie klas globalnych a następnie niższego rzędu odpowiedzialne za stany obiektów oraz wielkość/prezencję obiektów .btn -> .btn-clicked , btn-primary ) separacja kontenerów i zawartości (wygląd obiektu nie powinien być zależny od elementu, w którym się znajduje - jego ewentualna modyfikacja powinna być uzależniona od osobnej klasy przypisanej tej danej modyfikacji .article-header zamist .article h1 ) Podstawowe zasady, o których warto pamiętać Zasada 1 Dwuczłonowe nazwy klas rozdzielać należy myślnikiem - (w przypadku JS stosowany jest camelCase) secondaryButton -> secondary-button Zasada 2 - Nazwa klasy powinna być na najniższym poziomie elementu, który ma zostać wystylizowany lub inaczej rzecz ujmując bezpośrednio na danym elemencie. Zasada 3 - wykorzystaj zawartość danego elementu html np. klasa header-logo Zasada 4 - nie wykorzystuj zawartości jeśli to kształt w łatwiejszy sposób przekazuje (jest czytelniejszy) czym jest dany element. ====================== Zasada 5 - jeśli dany element jest podobny do czegoś ale tym nie jest można stosować przyrostek -like np. h1-like Zasada 6 - jeśli chcesz klasę wykorzystać jako element związany z JS możesz klasie nadać przedrostek js- np. js-click-me Zasada 7 - należy unikać klas dłuższych niż dwa słowa Zasada 8 - można używać przedrostków is- lub has- dla klas opisujących dany stan np .activate -> .is-activate BEM Jedna z najpopularniejszych koncepcji nazewnictwa CSS Podstawa Block/Blok - sam w sobie określa własne znaczenie -> header , menu , button , input , aside Element - element bloku -> header__title Modifier/Modyfikator - zmienia wygląd lub zachowanie danego elementu -> input–-disabled Istotne: Rozgraniczenie wyrazów w nazwie klasy podwójnym myślnikiem oznacza wariację elementu -- ( input–-disabled , header--blue ) Podwójnym podkreślnikiem oznacza dziecko elementu __ ( menu__item ) Blokowisko Strona internetowa może być rozumiana poprzez podział na bloki, gdzie każdy kolejny poziom albo poszerza poprzedni albo go nadpisuje własnym stylem BEMIT BEM + ITCSS (Inverted Triangle CSS) = BEMIT. Inverted Triangle CSS -> Odwrócony trójkąt CSS, którego podstawowym założeniem jest strukturyzacja projektu zgodnie z trzema założeniami 1) zaczyna się od szczegółu i przechodzi do ogółu 2) zaczyna się od deklaracji używających jak najmniejszą ilość selektorów (mniej konfliktów na koniec) 3) selektory zastosowane na początku powinny mieć jak najszerszy zasięg np. reset tu można przeczytać na temat 7 warstw projektu (Saas) -> The Inverted Triangle Architecture: how to manage large CSS Projects BEMIT Cheatsheet Znaczeniowe przedrostki - akronimy (Namespaces) litera znaczenie c Components/element o Objects/obiekt u Utilities/narzędzie is/has stan bycia/posiadania t theme/skórka s styling/stylizacja js powiązanie z JS Przykładowe zastosowanie <p class= \"o-media__body c-user__bio\" > ... </p> Więcej na ten temat tutaj: More Transparent UI Code with Namespaces Responsywne Przyrostki Responsywne Przyrostki Tu kluczowy jest znak @ (ang. at ~ w) i oznacza, w którym momencie (media query) dana klasa się aktywuje (w zależności od tzw break pointów / punktów załamania) o-layout@md - obiekt układu w momencie średniego (middle) punktu załamania u-1/4@lg - narzędzie gdy media-query large spełnia swój warunek posiada 1/4 szerokości scss $lg = 1240px @media screen and (min-width: ${ lg } ){ deklaracja: właściwość; } Wizualizacja wielu podobnych Stosowanie nazewnictwa klas według jednego schematu pozawala na i późniejsze debugowanie lub wizualizaję elementów zbliżonych do siebie cechami w celu sprawdzenia poprawności deklaracji/ funkcjonowania strony /** * Ukazuje wszystkie klasy. */ [ class ] { outline : 5 px solid lightgrey ; } /** * Ukazuje wszystkie elementy BEM - wszystkie które posiadają \"__\". */ [ class *= \"__\" ] { outline : 5 px solid grey ; } /** * Modyfikatory. */ [ class *= \"--\" ] { outline : 5 px solid darkgrey ; } /** * klasy obiektów. */ [ class &#94;= \"o-\" ], [ class *= \" o-\" ] { outline : 5 px solid orange ; } /** * klasy składnikowych elementów. */ [ class &#94;= \"c-\" ], [ class *= \" c-\" ] { outline : 5 px solid cyan ; } /** * klasy związane z responsywnością. */ [ class *= \"@\" ] { outline : 5 px solid rosybrown ; } /** * Wszystkie klasy przypisane do Hack classes. */ [ class &#94;= \"_\" ] { outline : 5 px solid red ; } /** * Poprzez dodanie klasy hakowej do warstwy html (scss zagnieżdżenie powyższych w s-healthcheck) */ < html class = \"s-healthcheck\" > Na zakończenie ::: Należy pamiętać o pisaniu komentarzy w kodzie CSS ::: przejrzystość i czytelność priorytetem nr 1 Źródła How to name css classes BEMIT: Taking the BEM Naming Convention a Step Further Metodyki CSS #1 - OOCSS Metodologia BEM. Jak pisać dobry kod CSS. Praktyczne przykłady. Metodyki CSS #2 – BEM css-naming-conventions-that-will-save-you-hours-of-debugging BEM - naming conventions","tags":"css","url":"https://kostyrko.github.io/zfrontu/html-konwencje-klas.html","loc":"https://kostyrko.github.io/zfrontu/html-konwencje-klas.html"},{"title":"HTML: semantyczny HTML","text":"Znaczniki semantyczne określają znaczenie treści, która jest w ramach nich zamknięta. Nie powinny być wykorzystywane do pozycjonowania (od tego div ) a do określania treści. HTML - tag znaczenie <alt> alternative/opis w przypadku braku elementu lub dla czytnika <article> artykuł - rozumiany jako przedmiot rzecz / niezależna i zamknięta część strony zawartość tego taga powinna stanowić treść samą w sobie / będzie miała sens też na innej stronie <aside> boczny pasek/treść boczna <details> detale / w przypadku inputu pozwala na dodanie opcji wyboru <figcaption> podpis obrazu <figure> obraz/rycina <footer> stopka <header> wstęp/metadane/ linki nawigacji <main> główna treść strony <mark> podkreślony tekst <nav> element nawigacyjny <section> sekcja - tematyczne grupowanie semantycznie wspólnej części np. wielu artykułów może też rozdzielać na mniejsze części artykułów / sekcja jest integralną częścią strony <summery> podsumowanie <time> podsumowanie ----- ------ <abbr> abbreviation/skrót <address> adres <code> kod <dfn> definicja <Hn> Nagłówek <em> emphasis/podkreślenie <ins> insertion/ treść wstawiona <progress> oznaczenie postępu <rel> relation- ma na celu wskazanie na relacje pomiędzy elementami Przykłady użycia semantycznego HTML <section> & <article> HTML Article Element ( <article> ) defines a piece of self-contained content. It does not refer to the main content alone and can be used for comments and widgets. HTML Section Element ( <section> ) defines a section of a document to indicate a related grouping of semantic meaning. (za MDN web docs - Using HTML sections and outlines ) Ten tag wyraźnie wprowadza małe zamieszanie i zauważalne są dwie strategie korzystania z niego 1) porcjuje <article> na mniejsze sekcji 2) grupuje wiele <article> - tworzy cześć wyższego rzędu strony niż <article> oba podejścia nie muszą się wykluczać ( Section vs Article HTML5 - Stack Overflow ) oraz Przykłady użycia semantycznego HTML 2 Input + Details See the Pen datalist by Mikołaj Kostyrko ( @mkostyrko ) on CodePen . Progress See the Pen progressbar by Mikołaj Kostyrko ( @mkostyrko ) on CodePen . Semantyczny HTML Semantyczny HTML jest istotny z perspektywy: dostępności (Accessibility) -> Czytniki ekranowe/syntezatory mowy oraz urządzenia z niewielkimi ekranami (np. Apple Watch) korzystają z pomocy semantycznego HTML. SEO -> roboty wyszukiwarek sieciowych wykorzystują semantyczny html do indeksowania/pozycjonowania strony/jej znaczenia HTML pozwala na prostą walidację <input type=\"email\"> np. w przypadku wpisywanie adresu email -> tym samym mniej JS Źródła Native image lazy-loading for the web! JSJ 421: Semantic HTML with Bruce Lawson Semantyczny blog w HTML Znacznik label - semantyczny HTML by Comandeer Kod poprawny semantycznie An Overview of HTML5 Semantics HTML5 Semantic Tags: What Are They and How To Use Them!","tags":"html","url":"https://kostyrko.github.io/zfrontu/html-semantyczny.html","loc":"https://kostyrko.github.io/zfrontu/html-semantyczny.html"},{"title":"Grid przy pomocy HTML i klas oraz Grid:CSS","text":"Grid -> HTML + klasy CSS Grid przy pomocy klas (starsza wersja) jest czym innym niż tzw. Grid CSS (nowsza wersja rozwiązania) W przypadku rozwiązania opartego jedynie o HTML i odpowiednio stylowane klasy css - całość oparta jest na kolumnach (pion) oraz wiersze(poziom) Kolumna ustala szerokość a wiersz \"trzyma\" elementy w jednej linii Wiersze zawsze nazywają się row i zadaniem wiersza jest ustawienie kolumn Warunek 1 -> box-sizing Aby elementy były zawarte w jednej linii box-sizing musi być ustawiony na bored-box Warunek 2 -> float lub flex-box Należy zastosować clearfix na elementach zawartych w rzędzie jeśli całość oparta jest o float Clearfix jest sposobem na ujarzmienie problemu z pojemnikami o zerowej wysokości -> elementów pływających Patrz: Co to jest clearfix? Alternatywnie zagnieżdżenie wewnątrz jednego rzędu oprzeć można na flex-box Warunek 3 -> klasy kolumn Należy stworzyć klasy, które wskazując na szerokość kolumn i je odpowiednio używać np. jeśli całość ma być szeroka na 12 kolumn to jedna kolumna wynosi 100%/12, zatem obiekt zajmująca połowę rodzica w poziomie składać się będzie z 6 kolumn i winien być oznaczony col-6 poniższy mixin to dobrze obrazuje @ mixin grid ( $c ols ) { display : flex ; /* rozwiązanie oparte o flex-box */ [ class *= \" col- \" ] { // float : left ; /* rozwiązanie oparte o float */ min - height : 1 px ; } @ for $ i from 1 through $c ols { . col - #{$ i } { width : ( 100 % / $c ols ) * $ i ; } } } Wynik (przykładowy fragment kodu wynikowego css): /* line 33, scss/main.scss */ . container . row . col-6 { width : 50 % ; } /* line 33, scss/main.scss */ . container . row . col-7 { width : 58.33333 % ; } /* line 33, scss/main.scss */ . container . row . col-8 { width : 66.66667 % ; } Warunek 4 -> wiersz Należy odpowiednio przygotować stylizację wiersza /row $ gutter : 10 px ; /* przestrzeń pomiędzy kolumnami */ . container { max - width : 1000 px ; width : 100 % ; margin : 0 auto ; . row { // @ extend % clearfix ; /* rozwiązanie oparte o float */ height : 60 vh ; /* tu można podstawić dowolną wartość */ [ class *= \" col- \" ] { // float : left ; /* rozwiązanie oparte o float */ min - width : 1 px ; padding - left : $ gutter ; padding - right : $ gutter ; } @ include grid ( 12 ) ; } } Warunek 5 -> HTML Przygotowanie kolumn w pojedynczym wierszu tak aby zajmowały nie więcej niż 100% z ilości kolumn <main> <div class= \"container\" > <div class= \"row\" > <div class= \"col-3\" > <div class= \"box\" > col-3 </div> <div class= \"box\" > col-3 </div> <div class= \"box\" > col-3 </div> <div class= \"box\" > col-3 </div> </div> <div class= \"col-6\" > <div class= \"box\" > col-6 </div> </div> <div class= \"col-3\" > <div class= \"box\" > col-3 </div> </div> </div> </div> </main> <footer> <div class= \"row\" > <div class= \"col-12\" > <div class= \"box\" > Footer </div> </div> </div> </footer> Responsywność W tym przypadku responsywność jest oparta o dodanie dodatkowych klas, które są aktywowane w przypadku spełnienia określonego warunku w media-query <div class= \"row\" > <div class= \"col-sm-2 col-md-4\" > <div class= \"box\" > 1 </div> </div> <div class= \"col-sm-6 col-md-4\" > <div class= \"box\" > 2 </div> </div> </div> col-lg-* // large - duży ekran ≥ 1200px col-md-* // medium - desktop ≥ 992px col-sm-* // small - tablet ≥ 768px col-xs-* w przypadku bootstrapu jest to odpowiednik col-* // extra small - telefon < 768 px @mixin z media query @ mixin grid ( $c ols ) { @ media screen and ( max - width : 768 px ) { display : flex ; @ for $ i from 1 through $c ols { . col - sm - #{$ i } { flex : 0 0 ( 100 % / $c ols ) * $ i ; } } } @ media screen and ( min - width : 767 px ) { @ for $ i from 1 through $c ols { . col - md - #{$ i } { flex : 0 0 ( 100 % / $c ols ) * $ i ; } } } } Patrz: Bootstrap-Grid system Budowanie siatki w sposób responsywny nie jest proste więc wykorzystuje się często już przygotowane wcześniej layouty Przykłady układu Grid Grid w CSS na 100% Nie wymaga zaangażowania struktury HTML <div class= \"grid-container\" > <header> Nagłówek </header> <aside> Pasek boczny </aside> <main> Główna treść </main> <footer> Stopka </footer> </div> Grid wprowadza jednostkę fr (fraction -> ułamek) i na niej opiera podział i pozwala to budować grid oparty o dwa istotne wyrażenia dla kolumn - grid-template-columns i wierszy - grid-template-rows grid-template-columns: 1fr 1fr ; -> 2 kolumny, gdzie każda zajmuje jeden ułamek grid-template-columns: 2fr 1fr ; 2 kolumny, gdzie 1 zajmuje dwa ułamki a druga jeden grid-template-columns: 200px 1fr 300px ; // 200px auto 300px grid-template-rows: 200px 1fr ; // pierwszy wiersz ma 200px a kolejny dostosowuje się automatycznie ========= grid-template-areas grid-template-areas - pozwala na wyznaczenie obszarów i rozmieszczenie elementów według określonego wzoru .grid-container { display: grid; grid-template-columns: 300px 1fr; // dwie kolumny grid-template-rows: 100px 1fr 200px; grid-template-areas: // wskazanie układu \"header header\" // dwie kolumny 1 rząd \"sidebar main\" // 2 rząd - część na sidebar (300px) a część na main (1fr/auto) } aside { padding: 20px; background-color: orangered; grid-area: header; } aside { padding: 20px; background-color: orangered; grid-area: sidebar; } ==== grid-column-start: 2 // od której kolumny ma się układać element grid-column-end: 4 // na której kolumnie ma się kończyć grid-column: 2/4 // skrócony zapis grid-row-start: 2 // od którego rzędu ma się układać element grid-row-end: 4 // na którym rzędzie ma się kończyć grid-row: 2/4 // skrócony zapis Przykład zastosowania index.html <div class= \"grid-container\" > <div class= \"Header\" ></div> <div class= \"aside\" > <div class= \"aside-1\" ></div> <div class= \"aside-2\" ></div> </div> <div class= \"main\" ></div> </div> style.css html , body , . grid-container { height : 100 % ; margin : 0 ; } . grid-container { display : grid ; grid-template-columns : 1 fr 1 fr 1 fr 1 fr ; grid-template-rows : 1 fr 1 fr 1 fr ; gap : 1 px 1 px ; grid-template-areas : \"Header Header Header Header\" \"aside main main main\" \"aside main main main\" ; } . Header { grid-area : Header ; } . aside { display : grid ; grid-template-columns : 1 fr 1 fr 1 fr ; grid-template-rows : 1 fr 1 fr ; gap : 1 px 1 px ; grid-template-areas : \"aside-1 aside-1 aside-1\" \"aside-2 aside-2 aside-2\" ; grid-area : aside ; } . aside-1 { grid-area : aside-1 ; } . aside-2 { grid-area : aside-2 ; } . main { grid-area : main ; } See the Pen Grid-tampleate-example by Mikołaj Kostyrko ( @mkostyrko ) on CodePen . ==== grid-gap: 10px; // odstęp pomiędzy kafelkami (kolumnami i rzędami) grid-column-gap: // odstęp pomiędzy kolumnami grid-row-gap: // odstęp pomiędzy rzędami ==== Pozycjonowanie dzieci align-item start/end/center/stretch grid-column-start | | span | span | auto; grid-column-end | | span | span | auto; grid-row-start | | span | span | auto; grid-row-end | | span | span | auto; grid-area schemat / / / ==== Pozycjonowanie siebie justify-self` start/end/center/stretch align-self start/end/center/stretch place-self - schemat / domyślnie auto ale można np. center Patrz więcej A Complete Guide to Grid ==== Media query .grid-container { display: grid ; min-height: 100 vh ; grid-template-columns: 1 fr 1 fr ; @ media screen and ( min-width : 800 px ) { grid-template-columns: rep eat ( 3 , 1 fr ) ; } @ media screen and ( min-width : 1000 px ) { grid-template-columns: rep eat ( 4 , 1 fr ) ; } } Generatory układu Grid w CSS CSS Grid Generator Layoutit Griddy Wydajność? A może by tak... flexbox + grid? -> Grid for layout, Flexbox for components Grid-CSS jest relatywnie nowym dodatkiem w świecie CSS i wciąż charakteryzuje się niską wydajnością ((źródło)[https://twitter.com/brian_lovin/status/1262169865504174081?s=20]), a do tego nie wszystkie przeglądarki mogą z nim funkcjonować patrz tutaj Źródła https://getbootstrap.com/docs/4.0/layout/grid/ https://www.w3schools.com/css/css_grid.asp","tags":"css","url":"https://kostyrko.github.io/zfrontu/html-css-grid.html","loc":"https://kostyrko.github.io/zfrontu/html-css-grid.html"},{"title":"JavaScript i moduły - CommonJS i ES6","text":"Wstęp Podział projektu na mniejsze pliki (modułowość) może przynieść sporo korzyści w związku z jego utrzymaniem oraz reużywalnością kodu w innych projektach, pozwala na to ( CommonJS oraz moduły wprowadzone w ES6 . CommonJS jest standardem wykorzystywanym przez node.js natomiast moduł ES (ES6) jest przeznaczony dla przeglądarek CommonJS Importowanie zależności (w sposób synchroniczny - powinien znajdować się na początku pliku) odbywa się poprzez wykorzystanie funkcji require() [ analiza -> wrapping -> wykonanie -> pamięć cache] const package = require ( ' . / sciezka / nazwaModulu ) np. const findDroidFunc = require ( './findDroid' ); Zanim moduł może zostać zaimportowany musi być najpierw wyeksportowany poprzez tworzenie obiektu module poprzez odwołanie się do właściwości exports module . exports = nazwaModulu ; np. // droidFinder . js function findDroid ( droid ) { console . log ( ` You : Is this ${ droid }?\\ nObi Wan : This is not the droid you are looking for ` ) } module . exports = findDroid ; // r2d2 . js const findDroidFunc = require ( ' ./droidFinder ' ) ; findDroidFunc ( \" R2D2 \" ) >> node r2d2 . js >> You : Is this R2D2 ? >> Obi Wan : This is not the droid you are looking for gdzie findDroidFunc jest nazwą funkcji znajdującą się danym pliku - zwana modułem Moduły mogą być wbudowane (stworzone w pliku) jak i zewnętrzne np udostępnione przy pomocy npm Eksportowanie i importowanie wielu modułów z jednego pliku Eksport poprzez blokowanie w klamrowe nawiasy -> obiekt // droidsFuncs . js module . exports = { findDroid ; makeDroid } ; Import poprzez odwołanie się do nazwy plików z modułami / rozszerzenia .js najczęściej się nie podaje (tu zawarte dla czytelności) const droids = require(\"./droidsFuncs.js\") Wykorzystanie - nazwa modułu + metoda droids.findDroid(\"R2D2\") Moduły ES(6) Eksport jest podobne jak powyżej, ale dochodzi również opcja default export default DroidSeeker ; export { droid , darthVader } ; Importowanie zależności odbywa się poprzez wykorzystanie kluczowego słowa import (całość konceptu jest podobna do tego znanego mi z Pythona ;) Import wszystkich modułów z pojedynczego pliku import * as myModule from '/modules/my-module.js' ; Wywołanie poprzez... (nazwa modułu + metoda) myModule . findDroid () Importowanie pojedynczego importu / kolejne należy dodawać po przecinku (destrukturyzacja obiektu) import { myExport } from '/modules/my-module.js' Importowanie z nadaniem nowej nazwy (jak w Pythonie ;) / kolejne należy dodawać po przecinku import { bardzoBardzoDlugaNazwa as krotkaNazwa } from '/modules/my-module.js' ; Można również zastosować importowanie poprzez podanie nazwy bez nawiasów jeśli w innym pliku został zastosowany export default NazwaFunkcji ; Wówczas wystarczy zaimportować w sposób następujący -> import NazwaModulu from './nazwaPliku' Przykładowo // droid . js export default DroidSeeker // stormTrooper . js ( nowa nazwa może być inna - taka jaką planujemy zastosować ) import droidSeeker from './droid' Asynchroniczny import import ( ' /modules/my-module.js ' ) . then (( module ) => { // Do something with the module . } ) ; Przy pomocy async ( async () => { if ( somethingIsTrue ) { // import module for side effects await import ( '/modules/my-module.js' ); } })(); Import z node modules Jeśli w ścieżce pliku nie znajduje się kropka, wówczas js będzie szukał danej wtyczki w node modules (po wcześniejszej instalacji modułu, do którego planujemy się odwołać) import { formatDistanceToNow } from \"date-fns\" Inne źródła: Introduction to CommonJS","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-moduly.html","loc":"https://kostyrko.github.io/zfrontu/js-moduly.html"},{"title":"JavaScript: asynchroniczność i AJAX","text":"Wstęp JavaScript w swoim założeniu jest jednowątkowa, kod wywoływany jest w sposób synchroniczny (linia po linii), w zestawieniu z node.js lub przeglądarką internetową może stać się asynchroniczna (kod dalej jest wywołany po kolei, ale jego elementy nie zatrzymają wywołania się reszty kodu np. w przypadku obiektu Window i metody setTimeout(opóźnienie wywołania się bloku kodu))- jest to przydatne w przypadku odwołań do serwerów, gdzie zwrócenie określonych danych może trwać dłuższy moment np. w przypadku Fetch API (kod odpowiedzialny za funkcjonowanie strony będzie dalej funkcjonował poprawnie w trakcie wysyłania i odbierania zapytania). Patrz też dalej ajax Podsumowując - asynchroniczność pozwala na: Zmianę zawartości części strony bez konieczności jej odświeżenia Wysłanie żadania zwrotu danych na serwer Odebranie danych przesłanych przez serwer Wysłanie danych na serwer Jak to działa? - istotne etapy/wyrażenia Stos wywołań / Call stack - miejsce, w które trafiają wywołania funkcji (kolejność, w której tam trafiają ma znaczenie na ich wywoływanie) i z którego są ściągane w momencie ich ukończenia. Web API - tu trafiają asynchroniczne operacje (np. setTimeout) i są wykonywane - po wykonaniu trafia do kolejki wywołań zwrotnych / Callback queue oraz czeka na moment, w którym może zostać wprowadzony na stronę internetową. Pętla wydarzeń / Event loop - funkcja sprawdzająca czy Stos wywołań jest pusty i w momencie, gdy ten warunek zostaje spełniony przenosi wywołania z kolejki wywołań zwrotnych do stosu wywołań i wówczas funkcja jest wywoływana Wyjście z piekła wywołań zwrotnych/ callback hell Callback jest funkcją przekazywaną jako parametr innej funkcji (funkcja zagnieżdżona w wywołaniu funkcji) umożliwia to uzależnienia kolejnego działania od zwrotu działania funkcji poprzedzającej - wywołanie się funkcji wewnętrznej było uzależnione od wywołania funkcji wyższego rzędu. Wielokrotne zagnieżdżenie wywołań zwrotnych, trudne do opanowania oraz utrzymania, nazywane jest callback hell Obietnice/Promises Promises zostały wprowadzone wraz z ES6, bez nich asynchroniczność opierano na callbackach / wywołaniach zwrotnych . Obiekty promises (obietnice) zakładają wykonanie pewnej czynności oraz zwrócenie rezultatu lub poinformowania o błędzie i może znajdować się w jednym stanie jednocześnie: Pending (wywołane i oczekuje), Fulfilled (wykonane z powodzeniem), Rejected (odrzucone z niepowodzeniem) Schemat kodu w przypadku Fulfilled Promise ( tre ść - obietnicy ) . then ( result => { // rezultat do wykonania } ) Schemat kodu w przypadku Fulfilled Promise ( treść - obietnicy ). catch ( error => { // zwraca błąd } ) Async oraz await async oraz await wprowadzono w ES7 i ich zadaniem jest dalszy rozwój asynchroniczności w JavaScript -> pozwala na zapis asynchronicznego kodu w sposób przypominający synchroniczny async oznacza funkcję, która zwraca obietnicę/promise await słowo kluczowe stosowane wewnątrz funkcji async - program czeka z wywołaniem kolejnej linii do spełnienia warunku związanego z zakończeniem akcji asynchronicznej znajdującej się po za słowem kluczowym await [syntactic sugar] Istotne wyrażenia: Sposób łączenia się z serwerem tzw. WEB API: AJAX -> XMLHttp oraz Fetch API Przykładowe sposoby/formaty przechowywania danych na serwerze: XML, JSON ... HTML, YAML Standard łączenia się z serwerem oraz wymiany informacji: REST API AJAX AJAX - Asynchronous JavaScript And XML/ Asynchroniczny JS i XML - umożliwia wykorzystanie XML (obiektów XMLHttpRequest) do komunikacji z serwerem - w ten sposób zbudowana strona internetowa może funkcjonować w sposób asynchroniczny (wcześniej serwer zwracał HTML + dane - w modelu AJAX XML+ dane jest przetwarzany na HTML + dane przy pomocy JS). Początkowo (w momencie stworzenia AJAX) formatem, w którym dane przesyłano był XML (długi zapis - składnia może być dłuższa od przechowywanych danych, wydzielenie danych z XML przypomina ten z DOM), który z czasem został zastąpiony przez JSON (bardziej przyjazny format/przypomina obiekty JS) Protokół HTTP - Hypertext Transfer Protocol - protokół zapewniający komunikację w sieci internet. [Zapytanie z przeglądarki (powtarzane w trakcie korzystania ze strony) trafiają na serwer DNS (Domain Name System) -> serwer w Internecie -> Zwracana odpowiedź (Składa się na nią Status odpowiedzi, 0 lub więcej nagłówków, Ciało odpowiedzi/body) Możliwe statusy odpowiedzi (wybrane) | Numer | Znaczenie |---|---|---| | 200 | połączenie zakończyło się sukcesem | | 301 | strona przeniesiona na inny adres | | 404 | strona nie istnieje | | 500 | błąd serwera| Typy połączenia | Typ | Znaczenie |---|---|---| | GET | pobierani danych | | POST | wysyłanie danych | | PUT | zmiana obiektu w bazie danych | | PATCH | edycja pojedynczej właściwości obiektu w bazie danych | | DELETE | usunięcie danych | Źródła: Duckett, Jon. Javascript and jquery: Interactive front-end web development. Wiley Publishing, 2014. Fetch API Jak działa asynchroniczność w JavaScript Event Loop a kolejność wykonywania kodu w JavaScript Asynchroniczność w JavaScript Jak pozbyć się callback hell za pomocą promisów? Callback i Promise Async / await AJAX what is it? (it's not DHTML) http://kursjs.pl/kurs/ajax/ajax.php https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-asynchronicznosc-ajax.html","loc":"https://kostyrko.github.io/zfrontu/js-asynchronicznosc-ajax.html"},{"title":"Node.js aktualizacja (Ubuntu)","text":"Moja pierwsza instalacja node.js na Ubuntu odbyła się poprzez pobranie paczki i instalację zawartości paczki Linux Binaries node -v >> v10.19.0 Moduł N z NMP Moduł n służy do interaktywnego zarządzani wersjami Node.js Kroki podjęte do instalacji najnowszej wersji Node.js Czyszczenie pamięci cache sudo npm cache clean - f Instalacja przy pomocy nmp modułu n (-g -> globalnie) sudo npm install - g n Instalacja najnowszej wersji (w domyśle Node.js ) oraz usunięcie poprzedniej sudo n latest NVM - Node Version Manager Zalecane jest instalacja oraz zarządzanie wersją(w tym przypadku również wieloma wersjami) przy pomocy NVM (Node Version Manager) Pobranie paczek dla Ubuntu, które pozwolą na budowę paczek źródłowych (NVM będzie je wykorzystywał w trakcie instalacji) sudo apt - get update sudo apt - get install build - essential libssl - dev Instalacja NVM (uwaga v0.35.3 jest aktualną wersją, która ulegnie zmianie) - pobranie skryptu install_nvm.sh przy pomocy culr (klonuje repozytorium nvm do ~/.nvm) lub bezpośrednio z repo na GitHubie curl - sL https : // raw . githubusercontent . com / creationix / nvm / v0 . 35 . 3 / install . sh - o install_nvm . sh Uruchomienie skryptu przy pomocy komendy bash Pobranie, kompilacja i instalacja najnowszej wersji Node.js nvm install node Zwrócenie listy dostępnych wersji nvm ls - remote Instalacja konkretnej wersji nvm install 6 . 14 . 4 Źródła: https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions-enterprise-linux-fedora-and-snap-packages https://github.com/nodesource/distributions/blob/master/README.md https://askubuntu.com/questions/426750/how-can-i-update-my-nodejs-to-the-latest-version https://github.com/nvm-sh/nvm https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-nodejs-aktualizacja.html","loc":"https://kostyrko.github.io/zfrontu/js-nodejs-aktualizacja.html"},{"title":"JavaScript - kolejny test w JEST (TDD)","text":"Poniższy wpis powstał na podstawie tego materiału , patrz również tutaj i jego założeniem jest próbą wprowadzenia do TDD (test driven development). W pierwszej kolejności znane są wytyczne/scenariusz funkcji następnie powstaje test a na jego podstawie funkcja Zadanie stwórz funkcję spełniającą następujące warunki 1 . Bob answers ' Sure. ' if you ask him a question . 2 . He answers ' Whoa, chill out! ' if you yell at him . 3 . He retorts ' Calm down, I know what I ' m doing ! ' if you yell a question at him. 4 . He says ' Fine. Be that way! ' if you address him without actually saying anything . 5 . He answers ' Whatever. ' to anything else . Test 1 talkToBob.test.js const talkToBob = require ( ' ./talkToBob ' ) ; test ( \" answers Sure, if ask him a question \" , () => { expect ( talkToBob ( \" How are You? \" )) . toBe ( \" Sure \" ) } ) ; talkToBob.js function talkToBob ( info = \"\" ) { if ( info . endsWith ( \" ? \" )) return \" Sure \" ; } ; module . exports = talkToBob ; Test 2 talkToBob.test.js const talkToBob = require ( ' ./talkToBob ' ) ; describe ( ' Function - talkToBob ' , () => { test ( \" answers Sure, if ask him a question \" , () => { expect ( talkToBob ( \" How are You? \" )) . toBe ( \" Sure \" ) } ) ; test ( \" Answers 'Whoa, chill out!' if you yell at him \" , () => { expect ( talkToBob ( \" WHAT? \" )) . toBe ( \" Whoa, chill out! \" ) } ) ; } ) ; talkToBob.js function talkToBob ( info = \"\" ) { if ( info . endsWith ( \" ? \" ) && info !== info . toUpperCase ()) return \" Sure \" ; if ( info === info . toUpperCase ()) return \" Whoa, chill out! \" ; } ; module . exports = talkToBob ; Test 3 talkToBob.test.js const talkToBob = require ( ' ./talkToBob ' ) ; describe ( ' Function - talkToBob ' , () => { test ( \" answers Sure, if ask him a question \" , () => { expect ( talkToBob ( \" How are You? \" )) . toBe ( \" Sure \" ) } ) ; test ( \" Answers 'Whoa, chill out!' if you yell at him \" , () => { expect ( talkToBob ( \" DON'T \" )) . toBe ( \" Whoa, chill out! \" ) } ) ; test ( \" He retorts 'Calm down, I know what I'm doing!' if you yell a question at him. \" , () => { expect ( talkToBob ( \" WHAT? \" )) . toBe ( \" Calm down, I know what I'm doing! \" ) } ) ; } ) ; talkToBob.js function talkToBob ( info = \"\" ) { if ( info . endsWith ( \" ? \" ) && info !== info . toUpperCase ()) return \" Sure \" ; if ( info === info . toUpperCase () && ! info . endsWith ( \" ? \" )) return \" Whoa, chill out! \" ; if ( info . endsWith ( \" ? \" )) return \" Calm down, I know what I'm doing! \" ; if ( info === \"\" ) return \" Fine. Be that way! \" ; else return ' Whatever. ' } ; module . exports = talkToBob ; Test 4-5 talkToBob.test.js const talkToBob = require ( ' ./talkToBob ' ) ; describe ( ' Function - talkToBob ' , () => { test ( \" answers Sure, if ask him a question \" , () => { expect ( talkToBob ( \" How are You? \" )) . toBe ( \" Sure \" ) } ) ; test ( \" Answers 'Whoa, chill out!' if you yell at him \" , () => { expect ( talkToBob ( \" DON'T \" )) . toBe ( \" Whoa, chill out! \" ) } ) ; test ( \" He retorts 'Calm down, I know what I'm doing!' if you yell a question at him. \" , () => { expect ( talkToBob ( \" WHAT? \" )) . toBe ( \" Calm down, I know what I'm doing! \" ) } ) ; test ( \" He says 'Fine. Be that way!' if you address him without actually saying anything. \" , () => { expect ( talkToBob ( \"\" )) . toBe ( ' Fine. Be that way! ' ) } ) ; test ( \" He answers 'Whatever.' to anything else. \" , () => { expect ( talkToBob ( \" whatever \" )) . toBe ( ' Whatever. ' ) } ) ; } ) ; talkToBob.js function talkToBob ( info = \"\" ) { if ( info . endsWith ( \" ? \" ) && info !== info . toUpperCase ()) return \" Sure \" ; if ( info === info . toUpperCase () && ! info . endsWith ( \" ? \" ) && info . length !== 0 ) return \" Whoa, chill out! \" ; if ( info . endsWith ( \" ? \" )) return \" Calm down, I know what I'm doing! \" ; if ( info === \"\" ) return \" Fine. Be that way! \" ; else return ' Whatever. ' } ; module . exports = talkToBob ; ::: Niezastosowanie przy drugim warunku && info.length !== 0 a wprowadzenie dowolnej wartości jako domyślnej wprowadzanego, który stanie się wywołaniem czwartego warunku nie spełni wymogu założonego przez piąty test::: Źródła: https://jestjs.io/ https://www.youtube.com/watch?v=gX440uva4NU https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80 --TDD","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-jest-test-2.html","loc":"https://kostyrko.github.io/zfrontu/js-jest-test-2.html"},{"title":"JavaScript - Babel","text":"Babel pozwala na transpilację/tłumaczenie kodu ES6+ do ES5 - sprawiając tym samym możliwość na interpretację kodu przez szerszą gamę środowisk od node.js po starsze przeglądarki internetowe. Babel jest oparty na małych wtyczkach, których instalacja pozwala na wykonanie oczekiwanej od niego pracy. W jaki sposób działa Babel można również sprawdzić korzystając z narzędzia online Babel REPL Jeśli korzystamy z VSC możemy zainstalować wtyczkę vscode-babel-repl , która dokonuje transpilacji w locie i wykorzystanie kodu wynikowego -> F1 -> babel repl vscode-babel-repl Instalacja lokalna nmp install babel - cli --save-dev Babel pozwala na instalację całych \"ustawień\" języka JS z danego roku wykorzystując słowo kluczowe preset a następnie esRok np. es2017. nmp install babel - preset - es2017 --save-dev nmp install babel - preset - react --save-dev nmp install babel - preset - flow --save-dev @babel/preset-env Najłatwiej jest jednak wskazać aby babel automatycznie instalował potrzebne mu wtyczki wykorzystując: npm install @babel / preset - env --save-dev a następnie w pliku konfiguracyjny .babelrc to zaznaczyć { \"presets\" : [ \"@babel/preset-env\" ] } .babelrc - jest plikiem, w którym zawarte powinny być informacje na temat tego jakich wtyczek użyć oraz jakie pliki powinny być zignorowane - te informacje mogą znaleźć się zamiast tego w package.json @babel/node @babel/node - pozwala na transpilację kodu na bieżąco https://babeljs.io/docs/en/next/babel-node.html Instalacja (jeśli brakuje @babel/core) npm install @babel / core @babel / node --save-dev Automatyzacja Babel wykorzystując Gulp Instalacja gulp + babel core + @babel/preset-env oraz gulp-babel nmp install gulp gulp - babel @babel / core @babel / preset - env --save-dev W pliku konfiguracyjnym gulpfile.js definiujemy zadanie zmieniające ES5 na ES6 const gulp = require ( ' gulp ' ) ; const babel = require ( ' gulp-babel ' ) ; gulp . task ( ' default ' , () => gulp . src ( ' src/app.js ' ) ; /* można dodać tu cały katalog lub listę zawierającą pliki źródłowe */ . pipe ( babel ( { /* wykorzystując babel dokonaj transpilacji i zapisz do dist */ presets : [ \" @babel/preset-env \" ] } )) . pipe ( gulp . dest ( ' dist ' )) /* destination folder */ ) Źródła: https://babeljs.io/setup#installation How to Install and Use Babel to Transpile JavaScript Getting Started with Babel Node.js - Konfigracja Babel.js (Moduły ES6) Babel.js: What It Is, and How You Can Use It. [What The Stack] Poznaj JavaScript - BabelJS BABEL COMPILER: Do you really need BABEL to compile JavaScript with ES6?","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-babel.html","loc":"https://kostyrko.github.io/zfrontu/js-babel.html"},{"title":"JavaScript - pierwszy test w JEST (+ Babel)","text":"Do stworzenia pierwszego testu posłużyłem się dokumentacją JEST oraz tym materiałem (autorstwa Kacpra Kozaka) Jest wyszuka pliku, w którego nazwie znajduje się słowo kluczowe test poprzedzone kropką o rozszerzeniu js którego pierwszy człon nazwy jest taki sam jak plik, w którym przechowywany jest kod do testowania. Przykładowo test dla sum.js znajdzie się w pliku sum.test.js W pierwszej kolejności należy stworzyć plik sum.js w którym znajdzie się testowany kod, w którym należy wskazać moduł do eksportu (umożliwia wykorzystanie funkcji w innym pliki/tworzy moduł) function sum ( a , b ) { return a + b ; } module . exports = sum ; W pliku sum.test.js należy zaimportować stworzony moduł oraz napisać dla niego test const sum = require ( './sum' ); test ( 'adds 1 + 2 to equal 3' , () => { // funkcja testująca expect ( sum ( 1 , 2 )). toBe ( 3 ); // oczekiwany wynik } ); Następnie należy zainicjować projekt przy pomocy npm/node.js wpisując w terminal npm init - y Oraz zainstalować framework jest npm install --save-dev jest W pliku package.json należy wskazać jest jako framework testujący { \"name\" : \"2_Jest\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"sum.js\" , \"scripts\" : { \"test\" : \"jest\" // w tym miejscu należy wpisać \"jest\" } , \"keywords\" : [], \"author\" : \"\" , \"license\" : \"ISC\" , \"dependencies\" : { \"jest\" : \"&#94;26.0.1\" } } Podstawowa konfiguracja jest już skończona, zatem wystarczy w terminalu (z pozycji folderu projektu) wpisać npm run test Porządkowanie/blokowanie testów Porządkowanie testów odbywa się poprzez ich blokowanie wykorzystując słowo kluczowe describe a następnie zamknięcie testów przypisanych do jednego modułu w anonimowej funkcji poprzedzonej krótkim opisem describe ( 'Function - sum' , () => { // grupowanie testów test ( 'adds 1 + 2 to equal 3' , () => { expect ( sum ( 1 , 2 )). toBe ( 3 ); } ); test ( 'add negative numbers' , () => { expect ( sum ( - 5 , - 10 )). toBe ( - 15 ); } ); test ( 'add Infinity' , () => { // wartość brzegowa expect ( sum ( 0 , Infinity )). toBe ( Infinity ); } ); } ); Babel X 3 Jak widać w powyższym przykładzie zastosowano składnię ES6 oraz wcześniejszą. Ograniczeniem, które narzuca tego typu rozwiązanie jest node.js, stąd aby w pełni wykorzystać możliwości składni wprowadzonej przez ES6 należy skorzystać z Babel.js - jego konfiguracja może być wykonana na parę sposobów, poniżej wykorzystam tą przedstawioną w dokumentacji JEST Zawartość sum.js ulegnie zmianie i zostanie nieco skrócona export const add = ( a , b ) => { return a + b ; } ; Podobnie stanie się z sum.test.js gdzie sposób importowania modułu będzie inny import { add } from './add' ; test ( 'add two numbers' , () => { expect ( add ( 1 , 2 )) . toBe ( 3 ); }) ================================== Wpisując jedną komendę w terminalu npm i babel - jest @babel / core @babel / preset - env W ten sposób zostanie zainstalowany Babel (transpilator konwertujący ES6< na ES5) wraz z niezbędnymi dodatkami. Do projektu zostaną dodane następujące zależności/wtyczki \"dependencies\" : { \"@babel/core\" : \"&#94;7.10.2\" , \"@babel/preset-env\" : \"&#94;7.10.2\" , \"babel-jest\" : \"&#94;26.0.1\" , \"jest\" : \"&#94;26.0.1\" } W następnym kroku należy stworzyć plik babel.config.js w którym należy skonfigurować narzędzie Babel module . exports = { presets : [ [ '@babel/preset-env', { targets: { node: 'current', }, }, ] , ] , } ; ================================== Alternatywnie należy zainstalować babel-cli oraz również @babel/preset-env (patrz tutaj ) w ten sposób babel zainstaluje potrzebne mu wtyczki npm install --save-dev babel-cli npm install @babel / preset - env --save-dev plik konfiguracyjny powinien nosić nazwę .babelrc i zawierać: { \"presets\": [\"@babel/preset-env\"] } ================================== Jeśli korzystamy z VSC najprostszym rozwiązaniem może być jednak instalacja wtyczki vscode-babel-repl , która dokonuje transpilacji w locie i wykorzystanie kodu wynikowego -> F1 -> babel repl vscode-babel-repl Źródła: https://jestjs.io/ https://www.youtube.com/watch?v=_zEX9sHzqS4 https://www.youtube.com/watch?v=gX440uva4NU","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-jest-test-babel.html","loc":"https://kostyrko.github.io/zfrontu/js-jest-test-babel.html"},{"title":"JavaScript - krótkie wprowadzenie do testowania kodu","text":"Dlaczego warto stosować testy/Do czego służą testy? [..........] TDD - test driven development - testowanie aplikacji na bieżąco, podczas realizacji kolejnych kroków, może to być związane z tworzeniem testu jeszcze przed napisaniem danego bloku kodu Unit test - inaczej testowanie jednostkowe - polega na rozbiciu kodu na jak najmniejsze części i poddawanie ich testom (w JS jest to np. funkcja - którą należy odizolować od kodu od którego jest zależna - to można zrobić przy wykorzystaniu STUBów i markerów, które zastępują zewnętrzne zależności) International - testowanie modułów, a nawet całych aplikacji oraz przepływu przez nie informacji, mogą korzystać z zewnętrznych zależności Functional - testowanie całych aplikacji z wykorzystaniem przeglądarki Istotne wyrażenia: Dummy - obiekt zastępujący obiekt nad którym się pracuje STUB - obiekt lub funkcja, której należy podać jaką ma przyjąć odpowiedź SPY - zwraca jak obiekt jest używany MOCK - imitacja obiektu, należy wskazać w jaki sposób jest użyty FAKE - podobne do STUB ale może posiadać funkcjonalność Wymagania: NODEJS, NPM Frameworki: MOCHA https://github.com/mochajs/mocha CHAI - assertion library SINON - tworzy test doubles (MOCK,FAKE etc.) Źródło-tutorial: https://github.com/flawgical/Mocha-Chai-TTD http://jsdn.pl/nowoczesne-testowanie-kodu-w-javascript-czesc-pierwsza-setup/ http://jsdn.pl/testy-jednostkowe-javascript/ https://blog.piotrnalepa.pl/2016/01/10/js-testowanie-kodu-javascript-za-pomoca-gulp-js-karma-i-mocha-js/ https://www.youtube.com/watch?v=pnQVrUePcu8 https://www.youtube.com/watch?v=MLTRHc5dk6s https://www.youtube.com/watch?v=MLTRHc5dk6s Behavior-driven development (BDD) Jasmine Źródło-tutorial: https://www.nafrontendzie.pl/jasmine-podstawy-testowania nie jest uzależniony od elementów DOM skupiony na testowaniu zachowania Jest Źródło-tutorial: https://devenv.pl/testowanie-w-node-js-jest-alternatywa/ https://www.youtube.com/watch?v=gX440uva4NU - PL https://www.youtube.com/watch?v=_zEX9sHzqS4 - PL https://www.youtube.com/watch?v=FgnxcUQ5vho QUnit Źródło-tutorial: --- Zestawienie Wtyczki Wallaby.js - wtyczka do IDE stworzona do testowania JS - współpracuje z frameworkami wyżej wymienionymi https://wallabyjs.com/ Źródło-tutorial: https://www.youtube.com/watch?v=P4UQ-jTTJJ4 Źródła: https://jestjs.io/ https://jestjs.io/docs/en/mock-functions.html","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-testowanie-wprowadzenie.html","loc":"https://kostyrko.github.io/zfrontu/js-testowanie-wprowadzenie.html"},{"title":"Sass - struktura projektu","text":"Wraz z wzrostem wielkości projektu, większą rolę odgrywać będzie odpowiedni sposób strukturyzacji oraz modularyzacji plików zdefiniowanych w ramach niego stylów. Podział na odpowiednie moduły umożliwia również ponowne wykorzystanie wybranych części kodu w innych projektach. Zwyczajowo przyjęło, się że plik, który importuje moduły (partials) a staje się łącznikiem pomiędzy nimi nazwany jest main.scss . W ramach tego pliku importuje się moduł używając relatywnej ścieżki do oraz nazwy danego pliku z pominięciem rozszerzenia zawartej w apostrofach/cudz. poprzedzonej słowem kluczowym @import / @use Pliki modułów, które nie muszą być importowane przez kompilator bezpośrednio poprzedzone są podkreślaniem. Nazwy plików oraz ich zawartość powinna w sposób semantyczny odzwierciedlać układ strony np. w pliku _header.scss powinny znaleźć się deklaracje związane z nagłówkiem/headerem. Struktura małego projektu ... ... może zamknąć się w 3-4 plikach _base . scss // zawiera zmienne , mixins , resety _layout . scss // deklaracje związane z układem - grid , flex , kontenery _compontents . scss // elementy ( również przedstawione w taki sposób by mogły zostać ponownie użyte ) => przyciski , navy main . scss // zawiera jedynie importy modułów :::zaprezentowana struktura w momencie rozrostu projektu może zostać rozszerzona w taki sposób, że foldery przyjmują nazwy wymienionych plików zawierające pliki rozbijające deklaracje na jeszcze bardziej podstawowe części ::: Może również przyjąć bardziej rozbudowaną formę (nazwy folderów oraz poszczególnych plików są samowyjaśniające) main . scss abstracts | _variables . scss | _functions . scss | _mixins . scss base | _reset . scss | _typography . scss components | _buttons . scss | _sliders . scss layout | _navigation . scss | _grid . scss | _header . scss | _footer . scss | _forms . scss pages | _home . scss | _about . scss themes | _theme . scss vendors | _bootstrap . scss Więcej na temat typografi można przeczytać tutaj i tutaj Przykładowa struktura folderów zawierająca pliki saasowe Źródła: https://itnext.io/structuring-your-sass-projects-c8d41fa55ed4 https://github.com/Automattic/_s/issues/1215 http://dualeoblog.com/structure-sass-project/","tags":"saas","url":"https://kostyrko.github.io/zfrontu/saas-struktura-projektu.html","loc":"https://kostyrko.github.io/zfrontu/saas-struktura-projektu.html"},{"title":"Sass - wbudowane moduły i ich metody","text":"Sass oferuje następujące wbudowane moduły color , list , map , math , meta , selector , string Używanie modułu odbywa się poprzez jego zaimportowanie na początku poprzez odowłanie się do słowa kluczowego @use nazwy modułu oraz użycia gwiazdki lub bez użycia gwiazdki - wówczas każda metoda musi być poprzedzona nazwą modułu @use 'sass:math' ; $ half : math . percentage ( 1 / 2 ); @use 'sass:math' as * ; $ half : percentage ( 1 / 2 ); Obecnie jedynie Dart Sass wspiera nazewnictwo bez odwołania się do modułów w sposób globalny Indeks w SAAS zaczyna się od 1 !! a nie 0 Color https://sass-lang.com/documentation/modules/color Wybrane metoda funkcja adjust ($color, $red: null, $green: null, $blue: null, $hue: null, $saturation: null, $lightness: null, $alpha: null)/adjust-color(...) zmniejsza lub zwiększa jedną lub więcej właściwości koloru change ($color, $red: null, $green: null, $blue: null, $hue: null, $saturation: null, $lightness: null, $alpha: null)/change-color(...) zmienia jedną lub więcej właściwości koloru alpha($color)/opacity($color) pozwala na zmianę kanału alpha (0-1) color.blue($color)/color.red($color)/color.green($color) zwraca niebieskie/czerwony/zielony kanał darken($color, $amount) przyciemnia kolor, przyjmuje kolor i wartość przyciemnienia (0-100%) scale($color,$red: null, $green: null, $blue: null, $saturation: null, $lightness: null, $alpha: null) /scale() skalowanie koloru wobec poprzedniej jego wartości wykorzystując jedną lub więcej jego właściwości desaturate($color, $amount) pozwala zmienić nasycenie koloru grayscale($color) zwraca szary kolor przyjmujący balans bieli od koloru wprowadzonego hue($color) zwraca odcień koloru w skali 0-360 stopni invert($color, $weight: 100%) zwraca inwersję kolorystyczną podanej barwy lighten($color, $amount) rozjaśnia saturate($color, $amount) zmienia nasilenie barwy koloru transparentize($color, $amount) wpływa na przezroczystość koloru A visual guide to Sass & Compass Color Functions List Wybrane metoda funkcja append($list, $val, $separator: auto) /quote() zwraca kopię listy z dodanym elementem index($list, $value) zwraca indeks wybranej wartości w liście/null jeśli nie istnieje is-bracketed($list) zwraca wartość logiczną - czy jest w kwadratowych nawiasach join($list1, $list2, $separator: auto, $bracketed: auto) łączenie list append($list, $val, $separator: auto) dołączenie wartości do listy length($list) zwraca długość listy separator($list) zwraca nazwę separatora nth($list, $n) /nth($list, $n) zwraca element listy na n-tym miejscu indeksu set-nth($list, $n, $value) zwraca kopię listy z podmienionym elementem @debug append (( blue , red ), green ); // blue , red , green @debug append ( 10 px 20 px , 30 px 40 px ); // 10 px 20 px ( 30 px 40 px ) @debug index (( map - values ( $ font - sizes )), 50 px ) // Map Wybrane metoda funkcja get($map, $key) zwraca element mapy wg. podanego klucza has-key($map, $key) sprawdza czy mapa posiada podany klucz keys($map) zwraca klucze mapy w postaci listy merge($map1, $map2) łączy mapy remove($map, $keys...) zwraca kopię mapy bez wartości połączonych z podanymi kluczami values($map) zwraca listę wszystkich wartości mapy Math metoda funkcja $pi zwraca wartość PI round($number) zwraca zaokrągloną liczbę ceil($number) zwraca zaokrągloną liczbę w górę do najbliższej pełnej clamp($min, $number, $max) ograniczę liczbę do podanego zakresu min-max floor($number) zwraca zaokrągloną liczbę w dół do najbliższej pełnej clamp($min, $number, $max) zwraca string w cudzysłowie max($number...) zwraca najwyższą z podanych wartości min($number...) zwraca najniższą z podanych wartości max($number...) zwraca najwyższą z podanych liczb sqrt($number) zwraca pierwiastek kwadratowy abs($number) zwraca wartość absolutną podanej liczby percentage($number) konwertuje liczbę w procent random($limit: null) zwraca liczbę przypadkową pomiędzy 0 a 1, jeśli limit powyżej 1 to wówczas jest od 1 do limitowej liczby @debug math . abs ( - 10 px ); // 10 px Meta metoda funkcja load-css($url, $with: null) --- Mixins call($function, $args...) --- Functions content-exists() --- Functions feature-exists($feature) /feature-exists($feature) --- Functions get-function($name, $css: false, $module: null) /get-function($name, $css: false, $module: null) --- Functions global-variable-exists($name, $module: null) --- Functions inspect($value) zwraca podaną wartość jako string keywords($args) zwraca słowa kluczowe podane w mixie lub funkcje, które przyjmują słowa kluczowe mixin-exists($name, $module: null) sprawdza czy mixin o podanej nazwie istnieje module-functions($module) --- Functions module-variables($module) zwraca zmienne zadeklarowane w module type-of($value) zwraca typo podanej zmiennej/wartości variable-exists($name) sprawdza czy podana zmienna znajduje się w obecnym za --- Selector https://sass-lang.com/documentation/modules/selector metoda funkcja is-superselector($super, $sub) sprawdza czy selektor $super pokrywa się z selektorem $sub append($selectors...) łączy selektory extend($selector, $extendee, $extender) / rozszerza selektor o podaną regułę nest($selectors...) łączy selektory w taki sposób jak by były zagnieżdżone parse($selector) rozdziela selektory w formacie selektora wartości replace($selector, $original, $replacement) podmienia selektor / przyjmuje org. selektor, element do podmiany oraz ten, który go zastąpi unify($selector1, $selector2) łączy selektory - zwraca selektor będący połączeniem wprowadzonych selektorów simple-selectors($selector) zwraca listę selektorów zawartych w selektorze unquote(\".main\") pozbywa wprowadzony string cudzysłów @debug ( unquote ( \".main\" ) unquote ( \"aside:hover\" )) // . main aside : hover | @debug is - superselector ( \"a\" , \"a.disabled\" ); // true @debug append ( \"a\" , \".disabled\" ); // a . disabled @debug extend ( \"a.disabled\" , \"a\" , \".link\" ); // a . disabled , . link . disabled #{$ extender } { @extend #{$ extendee } ; } @debug parse ( \".main aside:hover, .sidebar p\" ); // (( unquote ( \".main\" ) unquote ( \"aside:hover\" )), // ( unquote ( \".sidebar\" ) unquote ( @debug replace ( \"a.disabled\" , \"a\" , \".link\" ); // . link . disabled @debug simple - selectors ( \"a.disabled\" ); // a , . disabled String https://sass-lang.com/documentation/modules/string metoda funkcja quote($string) zwraca string w cudzysłowie index($string, $substring) Zwraca pierwszy indeks fragmentu stringu znajdującego się w stringu lub null insert($string, $insert, $index) zwraca kopię zmodyfikowanego string - przyjmuje string do wstawienia i indeks (miejsce) length($string) zwraca liczbę reprezentującą długość łańcucha znaków index(\"\") zwraca indeks podanego ciągu znaków lub 0 slice($string, $start-at, $end-at: -1) zwraca fragment stringu zależnego od podanych parametrów (początkowej i końcowej wartości/indeks/łącznie) to-upper-case($string) wszystkie litery zmienia na wielkie to-lower-case($string) zmienia litery na małe unique-id() zwraca randomowo generowany ciąg znaków i unikatowy w ramach obecnej kompilacji Sass unquote($string) zwraca ciąg znaków niezamknięty w cudzysłów Przykłady zastosowania: @debug insert ( \"Roboto\" , \" Bold\" , 100 ); // \"Roboto Bold\" - wstawia na końcu @debug insert ( \"Bold\" , \"Roboto \" , - 100 ); // \"Roboto Bold\" - wstawia na sam początek Źródła: https://sass-lang.com/ https://sass-lang.com/documentation https://css-tricks.com/introducing-sass-modules/","tags":"saas","url":"https://kostyrko.github.io/zfrontu/saas-moduly-metody.html","loc":"https://kostyrko.github.io/zfrontu/saas-moduly-metody.html"},{"title":"Sass - wprowadzenie","text":"CSS na sterydach - czyli Syntactically Awesome Style Sheets Sass jest językiem skryptowym rozszerzającym możliwości CSS i wymaga kompilacji na CSS tak aby mógł być interpretowany przez przeglądarki w tym celu można wykorzystać Gulpa (odpowiedniej wtyczki) lun wtyczki VSC. Sass pozwala na: * definiowanie zmiennych * pisanie składni opartej na zagnieżdżaniu selektorów w selektorach * organizację projektu w sposób modułowy (przechowywanie deklaracji w wielu plikach) * umożliwia tworzenie @mixins - grupowanie deklaracji oraz ich wielokrotne użytkowanie * pozwala na dziedziczenie deklaracji @extend * umożliwia tworzenie obiektów typu map i list * stosowanie operatorów matematycznych/stingów/relacji/logicznych * stosowanie pętli warunkowych if * stosowanie pętli for i each * definiowanie i użytkowanie funkcji * stosowanie wbudowanych modułów oraz ich metod Pliki sassowe mają rozszerzenie .sass lub .scss . Starsza wersja Sass nie zwierała nawiasów klamrowych i nie posiadała średników te wprowadzono od v. 3 Sass nav ul color : blue ul color : red wersja Scss nav { ul { color : blue ; } li { color : red ; } } W wyniku kompilacji z Sass na CSS kod może być przedstawiony w 4 następujących formatach nested - styl domyślny, bliski do Sassa gdzie CSS odzwierciedla strukturę obiektów HTML poprzez wcięcia expanded - najbliższy CSS, wcięte są jedynie właściwości compact - właściwości w miarę możliwości kompresowaną, tak aby deklaracja (np. właściwości z z fontem) zajmowała pojedynczą linię compressed - wszystko jest kompresowane do poszczególnych linii, kolejne elementy oddziela spacja - jakiekolwiek komentarze zawarte w scss NIE będą kompilowane do css -> najlżejsza forma zapisu deklaracji, która ma pozytywny wpływ na prędkość ładowania strony Style definiuje się poprze użycie parametru outputStyle lub parametr style .pipe ( sass ( { outputStyle: ' expanded ' , sourceComments: ' map ' // mapowanie pliku })) sass ( { style: ' expanded ' }) W terminalu poprzez flagę --style sass input . scss output . css --style compressed sourceComments: 'map' - w css pojawia się komentarz odwołujący się do danego pliku scss Przykładowe zastosowanie const gulp = require ( \" gulp \" ) ; const sass = require ( \" gulp-sass \" ) ; gulp . task ( \" sass \" , function () { return gulp . src ( \" scss/main.scss \" ) . pipe ( sass ( { outputStyle : ' compressed ' , sourceComments : ' map ' } ) . on ( \" error \" , sass . logError )) . pipe ( gulp . dest ( \" css \" )) } ) ; Wynik w CSS (expanded) /* line 1, scss/main.scss */ body { background-color : #692626 ; } CSS (compressed) /* line 1, scss/main.scss */ body { background - color : # ce4242 } ============================= Mapowanie SCSS Proces mapowania pozwala na wskazanie przeglądarce interpretującej css z którego miejsca w pliku sass pochodzi dana deklaracja. Wymaga to dodania pakietu oraz dodania odpowiedniej komendy init i write Przykładowe zastosowanie const gulp = require ( \" gulp \" ) ; const sass = require ( \" gulp-sass \" ) ; const sourcemaps = require ( ' gulp-sourcemaps ' ) ; // wskazanie zależności gulp . task ( \" sass \" , function () { return gulp . src ( \" scss/main.scss \" ) . pipe ( sourcemaps . init ()) // inicjalizacja . pipe ( sass ( { outputStyle : ' expanded ' , sourceComments : ' map ' } ) . on ( \" error \" , sass . logError )) // alternatywnie . pipe ( sass ( { errLogToConsole : true } )) . pipe ( sourcemaps . write ()) // zapis . pipe ( gulp . dest ( \" css \" )) } ) ; gulp . task ( \" watch \" , function () { gulp . watch ( \" scss/**/*.scss \" , gulp . series ( \" sass \" )) ; } ) ; Mapa źródłowa jest wytworzona przy pomocy zakodowanego komentarza poprzedzonego /*# - teraz przeglądając narzędzia programistyczne w przeglądarce będziemy wiedzieć w którym miejscu pliku scss (a nie css) doszło do danej deklaracji - !! przy pracy z sassem nie modyfikujemy pliku CSS, ponieważ ten będzie tworzony przez kompilator /* line 1, scss/main.scss */ body { background-color : #994f4f ; } /*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5jc3MiLCJzb3VyY2VzIjpbIm1haW4uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJib2R5e1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTUzLCA3OSwgNzkpO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxBQUFBLElBQUksQ0FBQTtFQUNGLGdCQUFnQixFQUFFLE9BQWdCO0NBQ25DIn0= */ ================ Komentarze /* */ - komentarz znajdzie się w pliku wynikowym CSS // ten komentarz znajdzie się jedynie w pliku Sass ================ @debug Sassowy console.log ;) - pozwala na proste debuggowanie -> wypisuje w terminalu podaną frazę $ colors : red , blue @debug \" colors ' , $ colors ; @error i @warn użycie @warn ma za zadanie informowaniu o zajściu pewnego warunku granicznego jednak nie przerywa wykonywania się kodu jak to powinno nastąpić w przypadku @error @warn \"Unknown prefix #{$prefix}.\" ; Zmienne Zmienne są poprzedzone znakiem dolara $ (pozwala na szeroki zakres przetrzymywanych danych). Zmienne należy nazywać ze względu na semantykę (opis do czego ona służy) i wg jednej zasady np. main-color lub color-main $ font-stack : Helvetica , sans-serif ; $ primary-color : # 333 ; body { font : 100 % $ font - stack ; background-color : $ primary-color ; } CSS /* line 2, scss/main.scss */ body { font : Helvetica , sans-serif ; background-color : #333 ; } Zmienne można przechowywać w odmiennym pliku np \"variables\" i wówczas stosuje się @import \"variables\" Zagnieżdżanie Zagnieżdżenie - Sass pozwala na odwzorowanie hierarchii znanej z HTML przy pisaniu styli ::: stosowanie zagnieżdżeń do 3-4 poziomów Sass nav { ul { margin : 0 ; padding : 0 ; list-style : none ; > li { display : inline-block ; } } a { display : block ; padding : 6 px 12 px ; text-decoration : none ; } } CSS nav ul { margin : 0 ; padding : 0 ; list-style : none ; } nav ul > li { display : inline-block ; } nav a { display : block ; padding : 6 px 12 px ; text-decoration : none ; } & - jest stosowane w przypadku pseudoklas (zapewnia powtórzenie selektora => rodzica sassowego) Scss a { &:visited{ color : blue ; } & : hover { color : green ; } } CSS a : visited { color : blue ; } a : hover { color : green ; } Partials/Cząstkowość - Saas pozwala na rozbicie \"CSS\" na mniejsze pliki tworzące większą całość (np. jeden plik może odpowiadać za wszystkie buttony albo jedną dużą tabelę) - modularność Wszystkie pliki cząstkowe powinny być poprzedzone podkreślaniem np. _buttons.scss importowany do main.scss Modułowość - wprowadzenie Sass pozwala na odwołanie się do zmiennych z zawartych w innych modułach/plikach ( @import + nazwa pliku/ dąży się do zastąpienia @import przez @use i @forward ) Różnice pomiędzy @use a @import -> 1) use zapewnia pojedyncze importowanie w projekcie, 2) mixiny i funkcje (członkowie) zaczynające się na _ lub - są postrzegane jako prywatne wyjątki i nie są importowane 3) import członków odbywa się jedynie lokalnie i nie jest przekazywany do dalszych importów 4) @extends - pozwoli na aplikację dalszą importów w kolejnych etapach łańcuch łączników 5) tworzy namespace (przestrzeń nazwy) Zwykle stosuje się main.scss do scalania (importowania) zawartości innych plików scss (mogą się znajdować w folderach tematycznych) bazowy plik Saas (nazwa _base.sass ) // _base . sass $ font - stack : Helvetica , sans - serif $ primary - color : # 333 body font : 100 % $ font - stack color : $ primary - color ::: poprzedzenie podkreślnikiem nazwy pliku sprawia, że nie będzie on automatycznie wczytany przez przeglądarkę, ale zawartość plink znajdzie się w CSS ::: plika zawierający style i odwołujących się do zmiennych zdefiniowanych w pliku bazowym - wymaga odwołania się do nazwy pliku przed wymianą nazwy zmiennej tu elements/_base.scss @import 'elements/base' . inverse background - color : base . $ primary - color color : white CSS wygląda następująco body { font : 100 % Helvetica , sans-serif ; color : #333 ; } . inverse { background-color : #333 ; color : white ; } (źódło przykładu: https://sass-lang.com/guide) Mixins Pozwalają na użycie kodu, który jest powtarzany (może ale nie musi przyjmować jeden lub więcej argumentów - argumenty oddzielone są przecinkami) - argument może odnosić się zarówno do właściwości (np. display/padding) jak i przypisanej do niej wartości (np. flex/40px) danego obiektu - jest to tzw. interpolacja . W przypadku właściwości stosuje się zapis #{$nazwa_właściwości} w przypadku wartości $wartość . Istnieje również możliwość deklaracji tzw. argumentów opcjonalnych - bez ich podania danej właściwości zostanie przypisana domyślna wartość (domyślną wartość wpisuje się po dwukropku! --> $y: 50% ) Zmienna która pozwala na przetrzymywanie wielu deklaracji styli. $value... - trzykropek pozwala na dodanie listy jako argumentu, która ma być traktowana jako jeden parametr @mixin boxShadow ( $ color ) { box - shadow : 10 px $ color ; } @include - słowo kluczowe, które pozwala na wykorzystanie mixina . box { @ include boxShadow ( red ) ; } @ mixin divMixin ( $c olor , $f ont - size : 1 rem , $ translate ) { box - shadow : 10 px $c olor ; font - size : $f ont - size ; #{$ translate } : $ translate - val ; } div { @ include divMixin ( black , translate - Y , 10 px ) } https://sass-lang.com/documentation/at-rules/mixin Dziedziczenie Dziedziczenie pozwala na stworzenie stylu, który przejmuje deklaracje innego stylu - selektory będą miały te same właściwości Dziedziczenie do prostszych rzeczy związanych z powielaniem styli, jednak w przypadku jego wariacji @mixin jest lepszy. ::: Różnica pomiędzy dziedziczeniem a Mixinem jest również widoczna w przypadku wielu klas współdzielących style zapisane w Mixinie lub dziedziczone - w przypadku dziedziczenia nie powiela się stylu tylko jest przypisany do jednego selektora oznaczającego elementy w postaci listy rodzielonej przecinkami, w przypadku Mixina kod jest powielany wielokrotnie - dla każdego selektora jest tworzony unikalny styl - ze względu na to, że Mixin może być parametryzowany ::: @extend a { color : red ; } error { @extend a ; // color : red ; dziedziczy również a : hover { color : black } } a : hover { color : black ; } Problemy z ilością selektorów w dziedziczeniu! - te są przypisywane automatycznie % - placeholder - wirtualny selektor, który zapobiega replikacji selektorów w przypadku dziedziczenie Pozwala na wytworzenie stylu do replikacji bez powielania klas w CSS (różnica jest widoczna na poziomie CSS) %a { color : red ; } error { @ extend %a ; // color: red; } https://sass-lang.com/documentation/at-rules/extend Listy Zbiór elementów wykorzystywanych wyłącznie wewnątrz Saas [ nawiązują do tablic z JS - jednak sposób ich rozdzielenia nie jest zdefiniowany - może być spacja, przecinek] - jej numeracja zaczyna się od 1! posiada metodę length($nazwa_listy) nth() - wyciąga n-ty element z listy $ colors : red , blue nth ( $ colors , 1 ) Mapa Przypomina obiekt z JS - posiada klucze oraz wartości - również nie jest kompilowana do CSS $mapa-kolorow: (klucz1: wartość1, klucz2: wartość2); map-get($mapa-kolorow, klucz1) -> zwraca wartość1 Przykładowe zastosowanie: .footer { background-color: map-get ( $mapa-kolorow , klucz1 ) ; // zwraca wartość1 } map-values() - metoda zmieniająca wartości znajdujące się w mapie w listę Operatory Sass pozwala i przyjmuje klasyczne operatory kontekście liczb/wyrażeń matematycznych (+,/,-...) łącznie z modulo % Należy pamiętać, że jednostki wprowadzają pewne ograniczenia wynikające z ich logiki. W przypadku dzielenia może pojawić się problem gdy wartość dzielona może być częścią atrybutu np w przypadku fontu: 20px/10px aby temu zapobiec należy wykorzystać zmienne np font: $primary-size/10px Zastosowanie okrągłych nawiasów pozwala na wymuszenie kolejności działań Pozwala również na stosowanie operatorów w kontekście stringów - np. dodawanie ze sobą stringów skutkuje w ich łączeniu b + - zmien = b - zmien https://sass-lang.com/documentation/operators/string Z operatorów moża korzystać również w kontekście sprawdzania równości oraz relacji == jest takie samo != nie jest takie samo @debug 1 px != 1 em ; // true @debug \"Helvetica\" == Helvetica ; // true - w przypadku stringów zastosowanie cudzysłowu nie ma znaczenia @debug hsl ( 34 , 35 % , 92.1 % ) == #f2ece4 ; // kolory również są tłumaczone @debug ( 5 px 7 px 10 px ) != [ 5px 7px 10px ] ; // true - nawiasy są rozpoznawane $ theme : ( \"venus\" : #998099 , \"nebula\" : #d2e1dd ); @debug $ theme != ( \"venus\" : #998099 , \"iron\" : #dadbdf ); // true - zawartość zmiennych jest sprawdzana @debug null != false ; // true - null występuje jako false Operatory stosowane przypadku wyrażeń logicznych -> not , and , or @debug not true ; // false @debug not false ; // true @debug true or false ; // true @debug true and true ; // true Instrukcja warunkowa @if $ type : droid ; p { @ if $ type == c3po { color : gold ; } @ else if $ type == r2d2 { color : blue ; } @ else if $ type == d - o { color : green ; } @ else { color : black ; } } Pętla @for i @each Generacja selektorów z powtarzalną wartością @ for $ var from < start > through < end > // warto ść ko ń cowa jest wliczana @ for $ var from < start > to < end > // warto ść ko ń cowa jest pomijana Przyk ł ad 1 : @ for $ i from 1 through 3 { h #{$ i } { font - size : 120 px ; } } WYNIK CSS : h1 { font - size : 100 px ; } h2 { font - size : 100 px ; } h3 { font - size : 100 px ; } Przyk ł ad 2 @ for $ i from 1 through 3 { . item - #{$ i } { width : 2 em * $ i ; } } Przyk ł ad 3 $f ont - color : ( color1 : red , color2 : green , color3 : blue ) ; @ for $ i from 1 through 3 { h #{$ i } { color : nth ( map - values ( $f ont - color ) , $ i ) ; } } Pętla @each pracuje na zbiorze danych - iteruje po liście wartości @each $ var in < lista > { } // PRZYKŁAD 1 @each $ num in 1 , 2 , 3 { h #{$ num } { font - size : 100 px ; } } ; // WYNIK CSS : h1 { font - size : 100 px ; } h2 { font - size : 100 px ; } h3 { font - size : 100 px ; } // PRZYKŁAD 2 @each $ animal in puma , sea - slug , egret , salamander { . #{$ animal } - icon { background - image : url ( '/images/#{$animal}.png' ); } } // WYNIK - 1 CSS : . puma - icon { background - image : url ( \"/images/puma.png\" ); } Istnieje pętla @while wykorzystywana jest wtedy gdy nie mamy pewności kiedy dany warunek się skończy @funkcje Funkcje wbudowane i zdefiniowane https://sass-lang.com/documentation/at-rules/function Zdefiniowane Funkcja wyznacza i zwraca zdefiniowaną wartość @ funkcja nazwa_funkcji ( $ parametr ) { @ return $ parametr / 2 ; } Wtyczka do VSC - Live Sass Complier ! Wtyczka Live Sass Complier dokonuje translację z Sass na CSS automatycznie strona projektu: https://github.com/ritwickdey/vscode-live-sass-compiler Źródła: https://sass-lang.com/ https://sass-lang.com/documentation VSC: https://github.com/ritwickdey/vscode-live-sass-com","tags":"saas","url":"https://kostyrko.github.io/zfrontu/saas-wprowadzenie.html","loc":"https://kostyrko.github.io/zfrontu/saas-wprowadzenie.html"},{"title":"JavaScript - Gulp","text":"Instalacja globalna Gulp - jest narzędziem pozwalającym na zarządzanie wieloma zadaniami Instalacja globalna Gulpa (wymaga wcześniejszej instalacji npm np. korzystając z nvm - Node Version Manager), która pozwala na wywoływanie komendy gulp globalnie przy pomocy terminala npm install --global gulp-cli Sprawdzanie instalacji (jej wersji) gulp - v zwraca: CLI version : 2 . 2 . 1 Local version : Unknown Instalacja lokalna w folderze projektu Inicjalizujaca lokalna zaczyna się od stworzenia pliku, w którym zawarte są informacje na temat projektu -> package.json (w folderze, w którym znajduje się projekt) - przechowywane w nim podstawowe informacje na temat projektu oraz jego zależności (np. wymaganych wtyczek) Plik tworzony jest przy pomocy komend 1) Z odpowiedzią na pytania / w trakcie kolejnych kroków należy odpowiedzieć na podstawowe pytania i stworzyć metadane projektu npm init 2) lub (bez konieczności odpowiedzi - zostawia puste pola) npm init - y ::: package.json zawiera informacje na temat zależności projektu - w trakcie przenoszenia plików projektu należy również go zawrzeć wraz z innymi -> wówczas w terminalu na początku pracy nad projektem wystarczy wpisać komendę npm install - npm zainstaluje wszystkie zależności (wymaga Noda + npm) ::: 3) Instalacja zależności - wtyczka Gulp devDependencies a Dependencies dodanie flagi --save-dev przy instalacji sprawia, że paczka zostaje dodana do zależności deweloperskich devDependencies (wtyczka znajdzie się w spisie znajdującym się w package.json , również bez podania flagi ale wówczas trafi do spisu Dependencies) tu powinny trafić te zależności (paczki), które pozwalają na rozwój/budowę aplikacji, ale nie są niezbędne do jej pełnego funkcjonowania np. związane z transpilacją (np. Saas) lub testowanie. W Dependencies powinny znaleźć niezbędne wtyczki do działania aplikacji (instalacja tylko tych z pominięciem devDependencies odbywa się poprzez npm install --production zamiast zwykłego npm install - można też dodać, że zawartość devDependencies jest formą dokumentacji projektu/jego metadanymi) npm install gulp --save-dev ::: tworzy folder node_modules (z pobranymi modułami) + package-lock.json (blokuje wersję używanych paczek - zawiera listę pobranych modułów oraz informację o ich wersji) ten folder nie będzie i nie powinien być przenoszony wraz z innymi plikami stąd warto dla niego stworzyć .gitignore i wpisać w niego node_modules/ aby GIT do ignorował ::: gulp - v // powinno zwrócić informację o wersji globalnej (CLI) oraz lokalnej (wersje mogą się różnić) CLI version : 2 . 2 . 1 Local version : 4 . 0 . 2 Następnie należy stworzyć plik gulpfile.js i w ramach niego wpisywać gulpowe polecenia Przykładowe zastosowanie (użycie metody task() - zdefiniowanie zadania oraz done() - wskazuje zakończenie zadania) const gulp = require ( 'gulp' ) gulp . task ( 'message' , function ( done ) { console . log ( \"HTTP Server Started\" ); done (); } ); W terminalu (w folderze gdzie zapisany jest plik gulpfile.js) wywołujemy zdefiniowane zadanie/funkcję stosując [ gulp + nazwa_funkcji ] gulp message [ 10 : 25 : 43 ] Starting 'message' ... HTTP Server Started [ 10 : 25 : 43 ] Finished 'message' after 3 . 85 ms Rura albo .pipe() Użycie metody .pipe() - która pozwala na zdefiniowanie kolejnych kroków wykonywanego zadania (przepływu) .src() - metoda w ramach, której wskazuje się pliki, na których zostaje podjęte zadanie Użycie wtyczki -> kompilujące Sass na CSS (o wtyczce i jej instalacji poniżej) const gulp = require ( 'gulp' ) const sass = require ( 'gulp-sass' ) // wskazanie zależności gulp . task ( 'sass' , function () { gulp . src ( './src/sass/style.scss' ) // pracuj na pliku style . scss // src - source / ź ródło . pipe ( sass ()) // uruchom wtyczkę kompilatora . pipe ( gulp . dest ( './dist/css' )) // tutaj zwróć skompilowany plik w postaci css // dest - destination / folder_docelowy } ); >> gulp sass można również wykorzystać metodę .on i dodać .pipe ( sass (). on ( \"error\" , sass.logError )) // wypisz error w przypadku jego wystąpienia Wtyczki Spis wtyczek gulpowych: https://gulpjs.com/plugins Spis wtyczek js: https://www.npmjs.com/ gulp-sass - gulpowa paczka do kompilacji Sass na CSS Instalacja paczki przy pomocy terminala (lokalnie) npm install gulp - sass node - sass --save-dev ::: paczki można instalować z pozycji podfolderów ale i tak trafią do nadrzędnego folderu (node_modules oraz package.json nie jest tworzony ponownie - ten odpowiada za własny folder oraz podfoldery) paczki zostały dodane do pliku package.json \"author\" : \"MK\" , \"license\" : \"ISC\" , \"dependencies\" : { \"gulp\" : \"&#94;4.0.2\" , \"gulp-sass\" : \"&#94;4.1.0\" , \"node-sass\" : \"&#94;4.14.1\" } =========================================== Nasłuch zmian -> .watch() // W kolejnej funkcji można ustawić nasłuch na zmiany i wykonywanie zadania -> wymaga wskazania miejsca oraz użycia metody series() (https://gulpjs.com/docs/en/api/series/) * - dowolny ciąg znaków (wszystkie pliki z rozszerzeniem np. scss) ** - dotyczy wszystkich podfolderów oraz folderu początkowego gulp.series() - wykonuj synchronicznie jedno po 2. gulp . task ( 'watch' , function () { gulp . watch ( './src/**/*.scss' , gulp . series ( \"sass\" ); } ); Przykładowe zastosowanie const gulp = require ( 'gulp' ) const sass = require ( 'gulp-sass' ) gulp . task ( 'sass' , function () { gulp . src ( './src/sass/main.scss' ) . pipe ( sass ()) . pipe ( gulp . dest ( './dist/css' )) } ); gulp . task ( 'watch' , function () { gulp . watch ( './src/**/*.scss' , gulp . series ( \"sass\" ); } ); dla Gulp w wersji poniżej 4 (bez gulp.series()) gulp . watch ( './src/**/*.scss' , [ \"sass\" ]); W terminalu gulp watch Po zmianie zawartości pliku main.scss wywołuje się funkcja sass [ 10 : 57 : 46 ] Starting 'sass' ... [ 10 : 57 : 46 ] Finished 'sass' after 28 ms ::: po wprowadzeniu zmian do pliku gulp należy wyłączyć funkcję watch i włączyć ją ponownie by zmiany zaszły w żuycie =========================================== gulp-autoprefixer (dodaje --webkit-transform) upewnia się by CSS był kompatybilny ze wszystkimi przeglądarkami Adres: https://www.npmjs.com/package/gulp-autoprefixer Instalacja: npm install --save-dev gulp-autoprefixer Przykładowe zastosowanie: const gulp = require ( 'gulp' ) const sass = require ( 'gulp-sass' ) // kompilator const autoprefixer = require ( 'gulp-autoprefixer' ) // dodanie wtyczki prefiksującej gulp . task ( 'sass' , function () { gulp . src ( './src/sass/app.scss' ) . pipe ( sass ()) . pipe ( autoprefixer ()) . pipe ( gulp . dest ( './dist/css' )) } ); =========================================== gulp-jshint oraz jshint` sprawdza poprawność zapisu kodu Gulp i JS https://www.npmjs.com/package/gulp-jshint ::: Wiele wtyczek naraz można instalować poprzez rozgraniczenie ich nazw spacją npm install jshint gulp - jshint Wykorzystanie wtyczki jshint const gulp = require ( \" gulp \" ) ; const jshint = require ( \" gulp-jshint \" ) ; gulp . task ( \" task-name \" , function () { return gulp . src ( \" js/*.js \" ) // wszystkie pliki js w folderze js . pipe ( jshint ()) // wykorzystaj wtyczk ę jshint () . pipe ( jshint . reporter ( \" default \" )) // w terminalu wydrukuj ew . problemy } ) ; gulp-useref źródło: https://www.npmjs.com/package/gulp-useref Wtyczka łącząca podobne do siebie pliki dążąc do zmiejszenia ilości kodu w HTML Przed: <html> <head> <!-- build:css css/combined.css --> <link href= \"css/one.css\" rel= \"stylesheet\" > <link href= \"css/two.css\" rel= \"stylesheet\" > <!-- endbuild --> </head> <body> <!-- build:js scripts/combined.js --> <script type= \"text/javascript\" src= \"scripts/one.js\" ></script> <script type= \"text/javascript\" src= \"scripts/two.js\" ></script> <!-- endbuild --> </body> </html> Po: <html> <head> <link rel= \"stylesheet\" href= \"css/combined.css\" /> </head> <body> <script src= \"scripts/combined.js\" ></script> </body> </html> Instalacja: npm install --save-dev gulp-useref Zastosowanie const gulp = require ( ' gulp ' ) , useref = require ( ' gulp-useref ' ) ; gulp . task ( ' default ' , function () { return gulp . src ( ' app/*.html ' ) // wszystkie pliki html . pipe ( useref ()) . pipe ( gulp . dest ( ' dist ' )) ; // distribution } ) ; gulp-cleancss źródło: https://www.npmjs.com/package/gulp-cleancss Wtyczka służąca do minifikacja kodu - minimalizacja kodu do niezbędnego minimum - więcej na ten temat można przeczytać tutaj lub zobaczyć ten film . Pozawala na optymalizację ładowania się okna witryny. sprawdź również: gulp-if - https://www.npmjs.com/package/gulp-if Źródła: Gulp: https://gulpjs.com/docs/en/getting-started/quick-start/ https://www.youtube.com/watch?v=eRv8jUz2FgI https://www.youtube.com/watch?v=LYbt50dhTko https://www.youtube.com/watch?v=QgMQeLymAdU https://stackoverflow.com/questions/36897877/gulp-error-the-following-tasks-did-not-complete-did-you-forget-to-signal-async https://css-tricks.com/gulp-for-beginners/ Node: https://www.youtube.com/watch?v=ENrzD9HAZK4 https://github.com/nvm-sh/nvm#installing-and-updating https://docs.npmjs.com/files/package.json","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-gulp.html","loc":"https://kostyrko.github.io/zfrontu/js-gulp.html"},{"title":"CSS - max(), min(), clamp()","text":"min() - jest funkcją CSS i pozwala na oznaczenie najmniejszej wartości w przypadku szerokości obiektu i przyjmuje jedno lub więcej wyrażeń rozgraniczonych przecinkami jako parametry (istnieje możliwość mieszania jednostek np. px, vw, %) - najmniejszy z dwóch podanych parametrów w danym momencie jest obowiązujący. .second-level { width: min ( 50 vw , 400 px ) ; } Przykładowo powyższy zapis zakłada, że dany element o klasie second-level będzie miał szerokość 400px do momentu, w którym połowa szerokości ekranu (50vw, innymi słowy gdy ekran jest węższy od 800px) nie będzie mniejsza niż 400px i wówczas przyjmie wartość 50vw. Ubierając to w inne słowa, dany element będzie zajmował połowę szerokości ekranu jeśli ten będzie mniejszy niż 800px, a w przypadku szerszych ekranów jego szerokość będzie maksymalnie wynosiła 400px. Innymi słowy min() oznacza podanie maksymalnej wartości jaką może mieć dany element max() - jest funkcją podobną do min() jednak odnosi się do maksymalnej wartości danego elementu - również przyjmuje jedną lub więcej wyrażeń jako parametr. Za wartość, ustawiającą szerokość przyjmuje największą wartość z podanych parametrów .second-level { width: max ( 50 vw , 400 px ) ; } Powyższe wyrażenie zakłada, że dany element o klasie second-level będzie miał szerokość 400px do momentu, w którym połowa ekranu nie będzie większa niż 800 px i wówczas przyjmie wartość połowy szerokości ekranu (50vw). Dla ekranu węższego niż 400px zajmie 100% rodzica. Innymi słowy max() oznacza podanie minimalnej (największej w danym momencie) wartości jaką może mieć dany element Inny przykład oznacza maksymalną wielkość fontu na stronie, który będzie zależny od jego rozmiaru np. p { font - size : max ( 4 vw , 2 em , 2 rem ) } clamp() - pozwala na zdefiniowanie przedziału, w ramach, które powinien zamknąć się dany element. Przyjmuje trzy wartości - minimalną, preferowaną oraz maksymalną -> clamp(MIN, VAL, MAX). Tym samym istnieje możliwość ustawienia wielkości elementu, który zmieniać się będzie razem z wielkością ekranu ale nie będzie mniejsza niż dana wartość ani większa od innej podanej. p { font - size : max ( 1 rem , 2 . 5 vw , 2 rem ) } Źrdóła: https://developer.mozilla.org/en-US/docs/Web/CSS/min https://developer.mozilla.org/en-US/docs/Web/CSS/max https://css-tricks.com/snippets/css/fluid-typography/","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-max-min-clamp.html","loc":"https://kostyrko.github.io/zfrontu/css-max-min-clamp.html"},{"title":"JavaScript - przechowywanie danych lokalnie oraz w sesji","text":"Lokalna pamięć przeglądarki pozwala na przechowywanie danych przy pomocy JavaScript bezterminowo. Dane przechowywane w lokalnej pamięci przeglądarki nie mogą przekroczyć 5mb i nie powinny znajdować się w nich dane poufne. Lokalna pamięć przeglądarki działa w sposób synchroniczny (odpowiada na zapytania po kolei). Aby korzystać z tzw local storage (LS) można wykorzystać jedną z 5 dostępnych metod. Metoda główna cecha setItem() Dodaj element (klucz oraz wartość) getItem() Zwraca element po kluczu removeItem() Usuwa element po kluczu clear() Czyści pamięć LS key() pozwala na pozyskanie klucza z obiektu znajdującego się z LS Przykładowe zastosowanie window . localStorage . setItem ( 'droid' , 'r2d2' ); window . localStorage . getItem ( 'droid' ); >> \"r2d2\" Istotne jest to że pamięć lokalna przeglądarki może przechowywać jedynie łańcuchy znaków (stringi) w tym również stringi JSON stąd często stosuje się metody interpolujące obiekty lub tablice do tego formatu stosując metody JSON.stringify() zmień w JSON string oraz JSON.parse() (tworzy obiekt opisany przez JSON string) const newDroid = { name : \"r2d2\" , type : \"Astromech droid\" , } window . localStorage . setItem ( 'newDroid' , JSON . stringify ( newDroid )); window . localStorage . getItem ( 'newDroid' ); >> \"{\" name \":\" r2d2 \",\" type \":\" Astromech droid \"}\" Konwersja w obiekt JSON . parse ( window . localStorage . getItem ( 'user' )); >> { name : \"r2d2\" , type : \"Astromech droid\" } name : \"r2d2\" type : \"Astromech droid\" __proto__ : Object Przykładowe zastosowanie w aplikacji - zapisanie elementu jako częsci tablicy tasks źródło kodu: org repo function storeTaskInLocalStorage(task) { let tasks; if(localStorage.getItem('tasks') === null){ tasks = []; } else { tasks = JSON.parse(localStorage.getItem('tasks')); } tasks.push(task); localStorage . setItem ( 'tasks' , JSON . stringify ( tasks )); } usunięcie elementu z lokalnej pamięci function removeTaskFromLocalStorage ( taskItem ) { let tasks ; if ( localStorage . getItem ( ' tasks ' ) === null ) { tasks = [] ; } else { tasks = JSON . parse ( localStorage . getItem ( ' tasks ' )) ; } tasks . forEach ( function ( task , index ) { if ( taskItem . textContent === task ) { tasks . splice ( index , 1 ) ; } } ) ; localStorage . setItem ( ' tasks ' , JSON . stringify ( tasks )) ; } Źródła: http://kursjs.pl/kurs/storage/storage.php https://blog.logrocket.com/the-complete-guide-to-using-localstorage-in-javascript-apps-ba44edb53a36/ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-przechowywanie-danych-lokalnie.html","loc":"https://kostyrko.github.io/zfrontu/js-przechowywanie-danych-lokalnie.html"},{"title":"JavaScript i trzykropek (...) -> \"rozproszenie\"/\"reszta\"","text":"Zastosowanie trzech kropek wprowadzonych w ES6 - pozwala na rozwinięcie wyrażenia iterowalnego (wielokorotnie powtarzalnego/przejściowego) jako spread operator lub parametr rest . Trzykropek można stosować w kontekście obiektów, tablic, stringów, zbiorów (setów) i map. Spread Operator -> Rozproszenie Dzieli kolekcję tworząc tablicę Pozwala na rozciągnięcie (rozproszenie/rozwinięcie) obiektu mogącego ulec iteracji wewnątrz odbiorcy (np. zamiast tworzenia zagnieżdżonej tablicy1 w tablicy2 - tablice2 przyjmuje właściwości tablicy1) const arr1 = [ 'r4' , 'c3po' ] const arr2 = [ arr1 , 'r2dr' ] console . log ( arr2 ) >> [[ 'r4' , 'c3po' ], 'r2dr' ] vs const arr3 = [... arr1 , 'r2d2' ] console . log ( arr3 ) >> [ 'r4' , 'c3po' , 'r2dr' ] Przykładowo pozwala na stworzenie tablicy z elementów zbliżonych (argument) do tablicy lub ze stringa [argument jak i odbiorca mogą być obiektem tablicą, łańcuchem znaków (stringiem), zbiorem lub map] let arr = [...HTML-collection] Przykładowe zastosowanie function sum ( ... theArgs ) { return theArgs . reduce (( previous , current ) => { return previous + current ; } ) ; } console . log ( sum ( 1 , 2 , 3 )) ; >> 6 Przy wywoływaniu funkcji i podawaniu jako argumentu tablicy pozwala na jej rozłożenie na pojedyncze argumenty (wyjmuje je z tablicy) Przykładowe zastosowanie function sum ( x , y , z ) { return x + y + z ; } const numbers = [ 1 , 2 , 3 ] ; // tablica console . log ( sum ( ... numbers )) ; // rozłożenie tablicy na pojedyncze argumentu >> 6 Shallow copy - tworzenie kopii tym samym tworząc osobne referencje const arr1 = [ 'r4' , 'c3po' ] const arr2 = [... arr1 ] >> arr1 === arr2 >> false W kontrze do const arr1 = [ 'r4' , 'c3po' ] const arr2 = arr1 >> arr1 === arr2 >> true Jest to również przydatne w przypadku pracy z obiektami const droid = { isActive : false , inputValue : \"Droid name\" } ; const droidCopy = { ... state } ; >> droidCopy >> { isActive : false , inputValue : \"Droid name\" } const droidCopy2 = { ... state , // najpierw spread isActive : true // potem podmiana } ; >> droidCopy2 >> { isActive : true , inputValue : \"Droid name\" } Rest parameters / Reszta Sumuje poszczególne parametry (w) tworząc tablicę Pozwala na wskazanie możliwości zastosowania nieokreślonej liczby argumentów, w funkcji, które zostaną zamienione w tablicę. Pozwala również na podanie poprzedzających parametrów nazwanych (te wówczas nie znają się w tablicy). function myFunc ( a , b , ... args ) { console . log ( a ) ; // 22 console . log ( b ) ; // 98 console . log ( args ) ; // [43, 3, 26] } ; myFunc ( 22 , 98 , 43 , 3 , 26 ) ; ------------------- function myFunc ( ... args ) { args . forEach ( a => console . log ( a )) return args } console . log ( myFunc ( 1 , 2 , 3 )) >> 1 >> 2 >> 3 >> [ 1 , 2 , 3 ] ---- function myFunc ( ...[ x , y , z ] ) { return x + y + z ; } myFunc ( 1 ) // NaN - brak agrument ó w myFunc ( 1 , 2 , 3 ) // 6 myFunc ( 1 , 2 , 3 , 4 ) // 6 - tylko pierwsze trzy s ą brane pod uwag ę Źródła: https://dev.to/sagar/three-dots---in-javascript-26ci https://dev.to/blacksonic/the-tale-of-three-dots-in-javascript-4287 https://stackoverflow.com/questions/42184674/what-is-the-meaning-of-args-three-dots-in-a-function-definition https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Operatory/Sk%C5%82adnia_rozwini%C4%99cia","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-trzykropek.html","loc":"https://kostyrko.github.io/zfrontu/js-trzykropek.html"},{"title":"JavaScript - klasy","text":"Klasy pozwalają na przypisanie metod bezpośrednio do (prototypów) obiektów przy pomocy jednego bloku (od ES6) class Droid { constructor ( name , occupation ) { this . name = name ; this . occupation = occupation ; } logDroid () { return ` this is ${ this . name } a ${ this . occupation } // metoda prototypowa -> __proto__ : Object } } const c3po = new Droid ( ' C-3PO ' , ' Protocol droid ' ) ; const r2d2 = new Droid ( ' R2-D2 ' , ' Astromech droid ' ) ; console . log ( c3po ) >> Droid { name : \" C-3PO \" , occupation : \" Protocol droid \" } W ramach klasy można również przypisać metody statyczne - takie, które nie wymagają wprowadzenie danych do funkcji konstruktora, muszą być jednak poprzedzone słowem kluczem static class Droid { constructor ( name , occupation ) { this . name = name ; this . occupation = occupation ; } logDroid () { return ` this is ${ this . name } a ${ this . occupation }` } static greetings ( stranger = \" you \" ) { return ` Hey ${ stranger }` ; } } console . log ( Droid . greetings ( \" IG-88 \" )) >> Hey IG - 88 Pod-klasy/ sub-classes Podklasy wprowadzone od ES6 są klasami stworzonymi na podstawie istniejących już klas i od nich dziedziczą podstawowe właściwości (jest to klonowanie istniejącej klasy z dodaniem nowych właściwości) class Droid { // klasa wyj ś ciowa => \" rodzic \" constructor ( name , occupation ) { this . name = name ; this . occupation = occupation ; } logDroid () { return ` this is ${ this . name } a ${ this . occupation }` } static greetings ( stranger = \" you \" ) { return ` Hey ${ stranger }` ; } } Słowo kluczowe super Słowo kluczowe super uruchamia przy dziedziczeniu funkcjonalność prototypu/klasy -> używamy argumenty, które znajdują się u rodzica = super(name, occupation) ponieważ u rodzica constructor(name, occupation) i to znajdzie się wewnątrz konstruktora dziecka, które również zawiera argumenty dla rodzica jako argumenty konstruktora = constructor(name, occupation, height, homeWorld). To nie jest jednak wymagane w momencie gdy klasie dziedziczącej nie są przypisywane nowe właściwości np. kiedy przypisywane są jedynie nowe metody (\"funkcje\") - wówczas nowa klasa wykorzystuje konstruktor rodzica. Jeśli chcemy odwołać się do dziedziczonej funkcji, wówczas poprzedzamy ją słowem kluczowym super np. super.logDroid() Rozszerzenie klasy Droid klasą ProtocolDroid // tworzącym tym samym pod klasę klasy Droid class ProtocolDroid extends Droid { constructor ( name , occupation , height , homeWorld ) { super ( name , occupation ) ; // odwołanie się do konstruktora rodzica this . height = height ; this . homeWorld = homeWorld ; } } const c3po = new ProtocolDroid ( ' C-3PO ' , ' Protocol droid ' , ' 1.75 ' , ' Tatooine ' ) ; const me8d9 = new ProtocolDroid ( ' ME-8D9 ' , ' Protocol droid ' , ' 1.72 ' , ' Takodana ' ) ; console . log ( me8d9 ) ; >> ProtocolDroid { name : \" ME-8D9 \" , occupation : \" Protocol droid \" , height : \" 1.72 \" , homeWorld : \" Takodana \" } // __proto__ : Droid console . log ( me8d9 . logDroid ()) // odwo ł anie si ę do metody rodzica - dziedziczenie metod >> this is ME - 8 D9 a Protocol droid ``` JavaScript class ProtocolDroid extends Droid { constructor ( name , occupation , height , homeWorld ) { super ( name , occupation ) ; // odwołanie się do konstruktora rodzica this . height = height ; this . homeWorld = homeWorld ; } // DO SPRAWDZENIA talkToMe () { return \" talk to me! - \" + super . logDroid () } static learnNewLanguage () { // stworzenie nowej w ł asnej metody statycznej return ` I am unable to learn new languages ` } } console . log ( ProtocolDroid . learnNewLanguage ()) >> ` I am unable to learn new languages ` ``` Istnieje możliwość odwołania się do dziedziczonej metody statycznej np. console . log ( ProtocolDroid . greetings ( \"IG-88\" )) >> Hey IG - 88 Klasy abstrakcyjne Klasa na podstawie, której nie można tworzyć nowych obiektów - taką klasę wykorzystuje się jako początkowy plan dla zbioru klas dziedziczących (\"dzieci\") składającego się z więcej niż jednej klasy. więcej na ten temat można poczytać w tym poście ze StackOverflow How do I create an abstract base class in JavaScript? Źródła: http://kursjs.pl/kurs/es6/class.php https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Classes","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-klasy.html","loc":"https://kostyrko.github.io/zfrontu/js-klasy.html"},{"title":"Ubuntu - zamiana gronostaja na fossę - przerwana aktualizacja","text":"Do tej pory pracowałem na Bionicznym Bobrze (Ubuntu 18.04) następnie Eonicznum Gronostaju (19.10) i gdy przyszedł czas na Skupioną Fossę (20.04) postanowiłem skorzystać z możliwości aktualizowania systemu - niestety w trakcie dokonywania się aktualizacji została ona przerwana w nieoczekiwany sposób, w wyniku czego system przestał się uruchamiać. Przerwana aktualizacja Ubuntu 20.04 W pierwszej kolejności musiałem dostać się do konsoli (z pozycji Grub'a). W tym celu wykorzystałem następującą ścieżkę postępowania: Grub -> Advance options for Ubuntu -> ...(recovery mode) -> root -> Enter Następnie zgodnie z sugestią wpisałem w terminal komendę (odpakowującą ale nie skonfigurowane paczki) - instalacja została przerwana na dość późnym etapie $ sudo dpkg --configure -a Po uruchomieniu Ubuntu (20.04) działało ale nie w pełni poprawny sposób (program z aktualizacjami nie funkcjonował w sposób poprawny) stąd wywołałem komendę aktualizującą poszczególne paczki, z których składa się system $ sudo apt-get upgrade Ubuntu 20.04 centralizacja paska \"dokującego\" Aby dokonać różnego rodzaju zmian z paskiem dokującym należy zainstalować rozszerzenie dconf-editor np. $ sudo apt install dconf-tools Po uruchomieniu programu należy odznaczyć opcję extend-height (ustawić na false ) Ten program pozwala również na zmianę wydarzeń generowanych przez kliknięcie na ikonę w pasku dokującym - click-action Przykładowo można ustawić na minimize-or-previews - minimalizuje okno po kliknięciu jeśli jest jedynym oknem danego programu lub wywołuje podgląd jeśli jest ich więcej (domyślnie ustawione jest previews ) Źródła: https://askubuntu.com/questions/346678/how-do-i-resume-a-release-upgrade https://askubuntu.com/questions/859630/how-to-start-ubuntu-in-console-mode https://askubuntu.com/questions/222348/what-does-sudo-apt-get-update-do https://linuxconfig.org/how-to-customize-dock-panel-on-ubuntu-18-04-bionic-beaver-linux","tags":"ubuntu","url":"https://kostyrko.github.io/zfrontu/ubuntu-aktualizacja-fossa.html","loc":"https://kostyrko.github.io/zfrontu/ubuntu-aktualizacja-fossa.html"},{"title":"JavaScript - etykietowanie funkcji","text":"Template strings lub też literals zwane po polsku łańcuchami szablonowymi Łańcuchy szablonowe [wcześniej wspominałem o nich w tym miejscu ] pozwalają na podstawianie zmiennych wewnątrz informacji przeznaczonymi do druku i zawartymi pomiędzy apostrofami [ warto pamiętać o tym, że stosowanie tego formatu zapisu nie wymaga używania sekwencji ucieczkowej -> /n] Przykładowo: const droid = \"r2d2\" const droid2 = \"c3po\" console.log(`Hello ${ droid } , ${ droid2 } `) >>Hello >>r2d2, >>c3po Funkcje mogą być również wywołane poprzez zastosowania łańcucha szablonów tzw tag functions - wówczas części tego łańcucha nie odwołujące się do zmiennych mogą być traktowane jako tablica (podzielona w miejscach gdzie znajdują się zmienne), która musi być zawarta jako argument function droidGreeter ( strings , droidName ) { console . log ( strings [ 0 ] + droidName + strings [ 1 ] ) return droidName + strings [ 0 ] } ; const droid = ' c3po ' ; console . log ( droidGreeter ` I am ${ droid } - and you ? ` ) ; // array strings = [' I am ', ' - and you? '] >> I am c3po - and you ? >> c3po I am W ten sposób można tworzyć instancje różnego rodzaju informacji wynikowych przy pomocy jednej funkcji const droids = [ {name: 'C3PO', height: '1.71'}, {name: 'R2D2', height: '1.09'}, {name: 'BB8', height: '0.67'}, {name: 'L3-37', height: '1.79'}, {name: 'K-2SO', height: '2.16'} ] function showSpecs (arr, n, h) { console.log(arr[0] + n + arr[1] + h + arr[2]) } showSpecs`This ${ droids [ 1 ] . name } is ${ droids [ 1 ] . height } ` >> This R2D2 is 1.09 showSpecs`This droid's name is ${ droids [ 1 ] . name } and he is ${ droids [ 1 ] . height } m high` >> This droid's name is R2D2 and he is 1.09 m high droids.forEach(function(droids){ showSpecs`This ${ droids . name } is ${ droids . height } high`; }) >> This C3PO is 1.71 high >> This R2D2 is 1.09 high >> This BB8 is 0.67 high >> This L3-37 is 1.79 high >> This K-2SO is 2.16 high Patrz również tutaj aby popracować na powyższej funkcji w edytorze i konsoli online Źródła: https://codeburst.io/javascript-what-are-tag-functions-97682f29521b","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-etykietowana-funkcja.html","loc":"https://kostyrko.github.io/zfrontu/js-etykietowana-funkcja.html"},{"title":"DOM: NodeList i HTML Collection","text":"Kolekcje węzłów DOM Typy węzłów element node attribute node text node comment node NodeList Uporządkowana lista wszystkich węzłów DOM (w tym również węzłów tekstowych oraz bloków tekstowych), obiekty można uzyskać poprzez odwołanie się do indeksu querySelectorAll() / getElementsByName() - - metody document zwracające NodeList NodeList posiada metodę forEach() !! NodeList, jest static - zwrócona lista nie jest odświeżana w przypadku zmian w DOM -> brak detekcji zmian HTMLCollection Lista węzłów (wybranego typu) będących elementami - węzeł może być użyty poprzez odwołanie się do nr indeksu, nazwy węzła lub id atrybutu. W większości przypadków kolekcja jest odświeżana automatycznie w momencie gdy DOM ulega zmianie. getElementsByTagName() / getElementsByClassName() - metody document zwracające HTMLCollection Posiada atrybut length Metody: item() - jako argument przyjmuje nr indeksu i zwraca obiekt, zwraca null gdy jest po za zasięgiem (brak elementu o podanym indeksie) nameItem() - przyjmuje nazwę obiektu lub jego id i zwraca zwraca obiekt lub null w przypadku braku Sprawdź wynik poniższego kodu ( źródło ) Index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Demo </ title > </ head > < body > < ul id = \"list\" > < li class = \"item\" > Pierwszy Element </ li > < li class = \"item\" > Drugi Element </ li > < li class = \"item\" > Trzeci Element </ li > </ ul > < script src = \"script.js\" ></ script > </ body > </ html > script.js //złap element UL const list = document.getElementById('list'); //Złam element wykorzystując dwie metody oraz jego klasę (two ways) const itemsByClassName = document.getElementsByClassName('item'); const itemsByQuerySelector = document.querySelectorAll('.item'); console.log('Pierwszy console log', itemsByClassName, itemsByQuerySelector); //dodaj czwarty element list.innerHTML += ` <li class= \"item\" > Czwarty Element </li> `; console.log('Kolejny console log', itemsByClassName, itemsByQuerySelector); Tak, NodeList dalej będzie zawierało 3 elementy podczas gdy HTMLCollection zwróci 4 podczas kolejnego wywoływania zmiennych Źródła: https://stackoverflow.com/questions/15763358/difference-between-htmlcollection-nodelists-and-arrays-of-objects https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-75708506 https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-536297177 https://www.w3schools.com/jsref/prop_node_nodetype.asp https://medium.com/@layne_celeste/htmlcollection-vs-nodelist-4b83e3a4fb4b","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-nodelist-htmlcollection.html","loc":"https://kostyrko.github.io/zfrontu/js-nodelist-htmlcollection.html"},{"title":"JavaScript - wydarzenia DOM cz. 2 - propagacja","text":"Propagacja wydarzeń (w górę) - event bubbling W DOM domyślnie wydarzenia są przenoszone od dziecka lub rodzeństwa do rodzica lub rodzeństwa - oznacza to, że jeśli rodzic oraz dziecko mają nastawioną ten sam rodzaj akcji wywołującej (np. click) oraz różne lub tą samą wydarzenie wywołane, oba z nich dojdą do skutku chyba, że dojdzie do przerwania propagacji - oznacza to również, że wydarzeni, do której doszło na dziecku może wywoływać akcję na rodzicu ( w takim przypadku wystarczy jedynie ustawienie eventListener na rodzicu), a propagacja zachodzi również pomiędzy rodzeństwem. Przeciwieństwem event bubbling jest event capturing - przekazywanie danych w dół drzewa DOM (domyślna np. dla focus) Metody zatrzymujące propagacje event.stopPropagation() - zatrzymuje propagację w górę wydarzeń tego samego typu/ propagacja poziome (pomiędzy rodzeństwem) nadal jest aktywne event.stopImmediatePropagation() - zatrzymuje wykonywanie wydarzeń pojedynczym elemencie, wywoływanie wydarzenia nie jest przenoszone na rodziców ani rodzeństwo Delegacja wydarzeń - event delegation W przypadku delegacji wydarzeń dochodzi to propagacji innej niż w domyślny sposób - np.dziecko (oraz jego potomstwo etc.) dziedziczy po rodzicu lub rodzeństwie. np. akcja, która zachodzi na rodzicu może wywoływać zdarzenie na dziecku. Tego typu zachowanie można zdefiniować przy pomocy warunków. Oznacza to, że można nastawić 'nasłuchiwacz', który wykonuje określone zadanie na wybranym elemencie. Rozwiązanie 1 function deleteItem ( e ) { if ( e . target . parentElement . className === ' delete-item ' ) { console . log ( ' delete-item ' ) } } ::: jeśli celem jest obiekt posiadający rodzica, który posiada dokładnie w ten sposób przypisaną klasę lub klasy 'delete-item' to wówczas wykonaj wydarzenie::: Rozwiązanie 2 function deleteItem ( e ) { if ( e . target . parentElement . classList . contains ( ' delete-item ' ) ) { e . target . parentElement . parentElement . remove ()) } } ::: jeśli celem jest obiekt posiadający rodzica, który posiada klasę lub klasy, której częścią jest podane wyrażenie 'delete-item' to wówczas wykonaj wydarzenie::: Źródła:","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-wydarzenia-dom-2.html","loc":"https://kostyrko.github.io/zfrontu/js-wydarzenia-dom-2.html"},{"title":"JavaScript - wydarzenia DOM cz. 1","text":"Nasłuchiwacz wydarzeń ;) Aby dodać interakcji do strony internetowej przy pomocy JS należy do wybranego przez siebie elementu dołączyć tzw. 'nasłuchiwacz wydarzeń' (ang. event listener) .addEventListener(wydarzenie, funkcja-przekazana-do-wywołania) - ta metoda przyjmuje dwa argumenty rodzaj 1) rodzaj wydarzenia np. 'click' (kliknięcie myszy) oraz 2) funkcję jaka ma się wywołać w momencie jego zajścia tzw callback /bez nawiasów. Przykładowe zastosowanie function helloWorld ( e ) { console . log ( 'Hello World' ); e . preventDefault (); } document . querySelector ( 'button' ). addEventListener ( 'click' , helloWorld ) this. - wyrażenie reprezentujące element, na którym doszło do wydarzenia // cenne w przypadku gdy jedno wydarzenie zostało nastawione na więcej niż jeden element (np. na wszystkie przyciski, a ma zmieniać się jeden, który wywołał akcję) const buttonsList = document . querySelectorAll ( ' .btn ' ) ; for ( let i = 0 ; i < buttons.length; i++) { buttons [ i ]. addEventListener ( ' click ' , function ( e ) { this . style . backgroundColor = ' green ' } ) ; } .preventDefault() - zapobiega domyślnemu zachowaniu się elementu, np. w przypadku linku jest to przejście na kolejną stronę etc. funkcja wywołująca obiekt event function onClick ( event ) { console . log ( event ) } document . querySelector ( 'button' ). addEventListener ( 'click' , event ) Obiekt event zawiera zbiór informacji na temat wydarzenia, do którego doszło np. target - zawierający informację, na temat obiektu, na którym doszło do danego wydarzenia .target - zwraca element, który spowodował wywołanie wydarzenia/event event . target . id - zwraca id elementu , który był celem event . target . className / . classList - zwraca nazwę klasy / listę klas elementu , który jest targetem event . target . innerText - zwraca tekst elementu celowego element . target . value - zwraca wartość elementu / przydatne w formularzu .type - zwraca typ wydarzenia event . type - z np . mouseover .timeStamp - czas w którym doszło do wydarzenia .clientY / .clientX - miejsce wydarzenia relatywnie do granic okna przeglądarki / zwraca wartość w px .offsetY / .offsetX - miejsce wydarzenia relatywne wobec elementu, na którym dochodzi do danego wydarzenia, gdzie punktem wyjściowym jest lewy górny róg / zwraca wartość w px Typy wydarzeń Document DOMContentLoaded - nasłuchuje przeładowania przeglądarki Przykładowe zastosowanie / w momencie przeładowania przeglądarki (załadowania DOM) dodaj klasę 'd-none' do listy klas elementu input document.addEventListener('DOMContentLoaded', function () { input.classList.add('d-none'); }); Mysz click - pojedyncze kliknięcie dblclick - podwójne kliknięcie mousedown - kliknięcie i przytrzymanie mouseup - puszczenie po mousedown mouseenter - najechanie kursorem na obiekt / dotyczy jedynie obiektu ale nie jego dzieci mouseleave - opuszczenie kursorem obszaru obiektu mouseover - takie samo jak mouseenter ale dotyczy również elementów zawartych w danym elemencie/całości mouseout - takie samo jak mouseout ale dotyczy również elementów zawartych w danym elemencie/całości mousemove - ruch wewnątrz obiektu, zwraca koordynaty w px znajdowania się myszki (offsetX,offsetY) Input i formularze .type - zwraca typ wydarzenia Przykładowe zastosowanie const form = document.querySelector('form') const input = document.querySelector('input') form.addEventListener('submit', runEvent); function runEvent(e){ console.log(`typ wydarzenia:` ${ e . type } ) } submit - nasłuchuje wysłania formularza // często używany z preventDefault() - aby powstrzymać przed domyślną akcją wywołaną przez dany element reset - wywoływane przy zresetowaniu formularza .value - zwraca wartość wpisaną w formularz, pozwala również nadać wartość domyślną formularzowi np. po wykonanym przesłaniu let inputContent = input . value function runEvent ( e ) { console . log ( input . value ); input . value = '' ; // czyści formularz } Klawiatura keydown - działa w momencie, w którym klawisz jest wciśnięty // zwraca true keyup - działa w momencie pozostawienia klawisza // zwraca true keypress - działa w momencie wciśnięcia guzika // zwraca true altKey - działa w momencie przyciśnięcia klawisza ALT // zwraca true ctrlKey - działa w momencie przyciśnięcia klawisza CTRL // zwraca true shiftKey działa w momencie przyciśnięcia klawisza Shift // zwraca true Inne focus - focus na elemencie blur - kliknięcie po za element (eliminacja focusa) cut - rejestruje wycięcie treści paste - rejestruje wklejenie input - rejestruje każdy element związany z inputem (np. cut,paste,type, a także dopisanie treści) Przykładowo: HTMLInputElementObject . addEventListener ( 'input' , function ( evt ) { console . log ( this . value ); } ); change - działa na list - rejestruje wybór w rozwijanej liście resieze - zmiana okna touch -> touchstart , touchmove , touchend , touchcancel Źródła:","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-wydarzenia-dom-1.html","loc":"https://kostyrko.github.io/zfrontu/js-wydarzenia-dom-1.html"},{"title":"JavaScript i DOM - tworzenie, usuwanie i pozyskiwanie informacji z elementów","text":"DOMContentLoaded Na początek warto pamiętać o wydarzeniu DOMContentLoaded - nasłuchuje przeładowania przeglądarki -> pozwala na wywołanie funkcji zmieniającej elementy DOM w momencie załadowania całości drzewa DOM (jest to istotne w momencie gdy plik zawierający skrypt js jest podlinkowany w zamiast po ) Przykładowe zastosowanie \"zamknięcie\" zmian w bloku/funkcji -> w momencie przeładowania przeglądarki (załadowania DOM) dodaj klasę 'd-none' do listy klas elementu input document . addEventListener ( 'DOMContentLoaded' , function () { input . classList . add ( 'd-none' ); } ); Zamiast (\"gołej\" opcji, która nie daje gwarancji powodzenia w momencie kiedy js jest podlinkowany na początku): input . classList . add ( 'd-none' ); Tworzenie elementów DOM .createElement() - stwórz element const li = document . createElement ( 'li' ) li . innerText = ` To jest tekst dodanego elementu ` .cloneNode(true) lub .cloneNode(false) - klonowanie elementu true = deep /false != deep -> tzw głębokie klonowanie zakłada tworzenie takiej samej kopii wraz z dziećmi const div2 = div1 . cloneNode ( true ) Klonowanie pozwala na replikację elementu i może być przydatne w sytuacji, w której chcemy stworzyć element taki sam do elementu istniejącego a następnie go zmienić. Element wyjściowy (wzór) może być stworzony w HTML i może mieć ustawiony display = none lub może powstać na podstawie funkcji tworzącej .appendChild() - dodanie elementu jako dziecka dziecka li . appendChild ( document . createTextNode ( 'Hello World' )) // dodanie węzła tekstowego zamkniętego pomiędzy tagami * li * e . target . nextElementSibling . appendChild ( li ) // dodanie dziecka li następnego rodzeństwa elementu na którym wykonał się dany event / wydarzenie Przykładowy łańcuch zdarzeń const link = document.createElement('a') link.className = 'nav-link' link.innerHTML = ' <i class= fa fa-remove ></i> ' li.appendChild(link) Dodanie wygenerowanego elementu do innego document . querySelector ( 'ul' ). appendChild ( li ) .insertBefore(nowyElement, dziecko) - wstawienie nowego elementu przed wybranym dzieckiem ::: Jeśli argumentem w powyższych metodach stanie się element już istniejący zostanie on wycięty (z całym dobrobytem/dziećmi) i wklejony w nowe miejsce ::: Przykładowo (appendChild - wkleja z nowe miejsca jak i usuwa w poprzednim // dochodzi do kopiowania przez wartość ale nie referencje - zatem powstaje nowy obiekt): function move () { let elemParent = this . parentElement ; if ( elemParent . id === ' list1 ' ) { document . getElementById ( ' list2 ' ) . appendChild ( this ) ; } else { document . getElementById ( ' list1 ' ) . appendChild ( this ) ; } } ; Usuwanie i wymiana elementów Zmiana elementu odbywa się na JEGO rodzicu .replaceChild(nowyElement, staryElementDziecko) - wymiana elementu .replace(nowyElement, dziecko) - zamiana wybranego dziecka na inny element Przykładowy ciąg zdarzeń const newTitle = document . createElement ( ' h2 ' ) ; //tworzymy element newTitle . id = ' title-id ' // nadajemu mu id newTitle . appendChild ( document . createTextNode ( ' Nowy tytuł ' )) // dodajemy do niego tekst const oldTitle = document . getElementById ( ' title-id ' ) ; // \"złapanie\" elementu podlegającego wymianie const parentDiv = document . querySelector ( ' div.nav-bar ' ) // \" złapanie rodzica \" parentDiv . replaceChild ( newTitle , oldTitle ) .remove() - usuwa podany element .removeChild() - usuwa dziecko podanego elementu const listItems = document . querySelectorAll ( 'li' ) listItems [ 0 ]. remove () // usuwa pierwszy element list = document . querySelectorAll ( 'ul' ) list . removeChild ( listItems [ 0 ]) // usuwa pierwsze dziecko mające tag * li * Usuwanie elementu poprzez odwołanie się do rodzica const deleteDroid = document . querySelector ( '#c3po' ) deleteDroid . parentElement . removeChild ( deleteDroid ) Zmiana klasy i atrybutu Dodawanie atrybutów element . setAttribute ( 'attribute' , 'właściwość' ) .setAttribute(atrybut, jego właściwość) - pozwala na zdefiniowanego atrybutu link . getAttribute ( 'href' ) // złap atrybutem link . setAttribute ( 'href' , 'http://google.com' ) // dodaj atrybut i jego właściwość link . hassAttribute ( 'title' ) // zwraca true albo false jeśli taki posiada lub nie .removeAttribute() - usuwa atrybut link . removeAttribute ( 'title' ) .className - dodawanie klasy element . className = 'list-item' // można również dodać id w podobny sposób .add() - dodaje klasę do listy klas .remove() - usuwa klasę const link = document . querySelector ( ' li:first-child ' ) . children [ 0 ] let classLink = link . className // zwraca klasy w postaci stringu let listOfClasses = link . classList // zwracam list ę klas w postaci DOMTokenList - zbli ż one do tablicy - posiada indeksy link . classList . add ( ' second-class ' ) // dodaje klas ę link . classList . remove ( ' second-class ' ) // usuwa klas ę Wydobywanie informacji .tagName - zwraca informację o tagu/etykiecie w formie stringa (wszystkie litery duże) element . tagName document . getElementById ( \"IdOfLink\" ). tagName ; >> \"A\" .id - zwraca id danego elementu document . querySelectorAll ( \"a\" )[ 10 ]. id // id 11 . elementu będący linkiem w podobny sposób można uzyskać .innerHTML .innerText Z formularza (form i input) form .action - zwraca URL do którego prowadzi wysłany formularz .method - metoda którą wysyłany jest formularz GET lub POST .elements - zwraca elementy formularza .elements.name.value - zwraca zawartość elementu będącego dziecka noszącego nazwę name form . elements . email . value // zwraca wartość elementu który zawiera ( name = \"email\" ) Formularz posiada specjalne zdarzenie submit - wywoływane przy wysłaniu formularza reset - wywoływane przy zresetowaniu formularza input .value - zwraca właściwość inputu/ to co zostało w niego wpisane/podane .type - zwraca typ elementu input/pozwala również na jego ustawienie .disabled - zwraca boolean, jeśli false to znaczy, że jest możliwe wprowadzenie danych jeśli ustawimy na true to wówczas będzie on nieaktywny input . disabled = \"true\" .checked - zwraca wartość logiczną true jeśli input jest typu checkbox i został on zaznaczony .selected zwraca wartość logiczną true jeśli input jest typu select (rozwijana lista) i został on wybrany Stosowanie funkcji oraz iteracje W kontekście stosowanie iteracji poprzez elementy DOM należy zwrócić uwagę na dwa kluczowe aspekty 1) czy zbiór, na którym planujemy iterację pozwala na to no NodeList posiada metodę forEach (a HTML-collection już jej nie posiada) czy wymaga konwersji np. poprzez zastosowanie metody tablic np Array.from(HTML-collection) lub spread operatora np. const arr = [...HTML-collection] 2) czy funkcja, z którą będziemy pracować pozwala na skuteczne stosowanie słowa kluczowego this czy wymaga pracy z event.target . Funkcja strzałkowa albo inna deklarowana przez wyrażenie funkcyjne sprawi, że this będzie obiektem window podczas gdy deklaracja poprzedzona słowem kluczowym function gwarantuje, że this jest elementem, na którym dokonuje się event. Ćwiczenia GRA Źródła: https://developer.mozilla.org/en-US/do","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-dom-manipulowanie-elementami.html","loc":"https://kostyrko.github.io/zfrontu/js-dom-manipulowanie-elementami.html"},{"title":"JavaScript - selektory DOM","text":"DOM - document object model Selektory pojedynczych elementów selektor funkcja przykładowe zastosowanie document.getElementById() zwraca element w podanym Id document.getElementById('button-4') document.querySelector() zwraca pierwszy element spełniający podany warunek/ wpisany składnią znaną z CSS document.getElementById('#button-4') :::Istnieje możliwość łączenia selektorów z atrybutami ::: Przykładowe zastosowanie document.getElementById('button-4').className // zwraca klasę const button = document.getElementById('button-4') button.style.background = 'red' // zmienia tło na czerwone button.style.display = 'none' - element znika button.style.display = \" \" - element się pojawia button.textContent = \"tekst\" - wpisuje treść button.innerText = \"tekst\" - wpisuje treść button.innerHTML = \"<span style=\"color: red\">tekst</span>\" - dodaje html document.querySelector('#button') - pierwszy element gdzie id='button' document.querySelector('.button') - pierwszy element gdzie class='button' document.querySelector('.button .name') - pierwszy element gdzie class='name' będący dzieckiem elementu gdzie class='button' document.querySelector('h1') - pierwszy element z tagiem h1 document.querySelector('h1 span') - pierwszy dziecko span elementu h1 document.querySelector('li:last-child') - pierwszy element typu li będący ostatnim dzieckiem document.querySelector('li:nth-child(odd)').style.color = \"red\" - pierwszy element typu li będzie czerwony (ponieważ pierwszy jest nieparzysty) document.querySelector('[href = \"google.com\"]') - pierwszy element z atrybutem href Selektory wielu elementów Zwracają kolekcję HTML (HTML Collection) albo node-list selektor funkcja przykładowe zastosowanie document.getElementsByClassName() zwraca wiele elementów na podstawie podanej nazwy klasy w postaci kolekcji html document.getElementsByClassName('buttons') document.getElementsByTagName() zwraca wiele elementów na podstawie podanego tagu w postaci kolekcji html document.getElementsTagName('li') document.querySelectorAll() zwraca wszystkie element spełniający podany warunek/składnia CSS/ zwraca NodeList document.querySelectorAll('ul.list li.list-item') document.querySelectorAll() zwraca NodeList a nie HTML collection ::: NodeList nie wymaga konwersji ponieważ ma metodę forEach() ::: w innym przypadku wymagana jest konwersja aby móc dokonać iteracji... ::: Konwersja HTML collection ::: Wykorzystujące metodę przypisaną do tablic let arr = Array . from ( document . getElementsByTagName ( 'li' )) Albo poprzez użycie tzw spread operatora let arr = [... document . getElementsByTagName ( 'li' )] arr . forEach ( function ( elem , index ) { console . log ( index , elem . className ); } ); document.querySelectorAll('li:nth-child(odd)') - co 2. element listy, każde parzyste dziecko będące li - aby nadać styl należy użyć pętli for lub forEach const oddItem = document . querySelectorAll ( 'li:nth-child(odd)' ) oddItem . forEach ( function ( elem ) { elem . style . background = 'red' } ); Lub (działa również dla kolekcji html/ HTML collection) for ( let i = 0 ; i < oddItem.length; i++ ) { oddItem [ i ]. style . background = ' red ' } Przykładowe zastosowanie document.getElementsByClassName('buttons')[3].style.color= 'red' - zmieni 4 zwrócony element na czerwono 'document.querySelector('ul').getElementsByClassName('list-item') - zwróć wszystkie elementy mające klasę list-item będące się w elemencie ul Przechodzenie pomiędzy elementami DOM .childNodes - nodeList wszystkich węzłów \"dzieci\" wybranego elementu Przykładowe zastosowanie document . querySelector ( 'ul' ). childNodes // wszystkie węzły dzieci elementu ul ( np . li oraz text ) document . querySelector ( 'ul' ). childNodes [ 0 ]. nodeName // >> # text document . querySelector ( 'ul' ). childNodes [ 0 ]. nodeType // >> 3 document . querySelector ( 'ul' ). childNodes [ 1 ]. nodeType // >> 1 1 - Element 3 - Text node 8 - Comment 9 - Document itself 10 - Doctype ::: text nodes - składają się na nie przejścia do kolejnej linii ::: .children - zwraca wszystkie węzły reprezentujące elementy które są dziećmi - zwraca kolekcję HTML cont liElem = document . querySelector ( 'ul' ). children [ 1 ] // zwraca 2 . element liElem . textContent = \"hello\" // wpisuje w 2 . dziecko pierwszego elementu z tagiem ul \"hello\" document . querySelector ( 'ul' ). children [ 1 ]. children . id // zwraca id dziecka będącego dzieckiem elementu ul .firstChild - zwraca pierwsze dziecko wybranego elementu będący węzłem document . querySelector ( 'ul' ). firstChild // text .firstElementChild - zwraca pierwszy element będący dzieckiem .lastChild - zwraca ostatni węzeł .lastElementChild - zwraca ostatni element będący dzieckiem .childElementCount - zwraca liczbę reprezentującą wielkość zbioru dzieci .childParentNode - zwraca węzeł będący rodzicem .parentElement document . querySelector ( 'li' ). perentElement . parentElement - zwraca dziadka ( rodzica będącego rodzicem rodzica ) elementu li np . div .nextSibling - kolejne rodzeństwo (sibling) będące węzłem .nextSiblingElement - kolejne rodzeństwo będące elementem .perviousSibling - poprzedzające rodzeństwo będące węzłem .previousSiblingElement - poprzedzające rodzeństwo będące elementem // jak w innych przypadkach zwraca null w przypadku braku Ćwiczenia GRA Źródła: https://developer.mozilla.org/en-US/do","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-dom-elementy-selektory.html","loc":"https://kostyrko.github.io/zfrontu/js-dom-elementy-selektory.html"},{"title":"JavaScript - obiekt window i document","text":"Obiekt document jest częścią obiektu window i został opisany poniżej. Wybrane metody obiektu window (globalny) -> Window alert() - pokazuje się okienko z ostrzeżeniem window . alert ( 'Hello world' ) lub po prostu alert('Hello world') prompt() - wyskakuje okienko z informacją confirm() - przyjmuje parametr if ( confirm ( ' Are you sure? ' )) { console . log ( ' Yes) } window.outerHeight / Width - zwraca wysokość/szerokość okna window.innerWidth / Height - zwraca wewnętrzną szerokość/wysokość okna window.scrollY - ukazuje poziom (miejsce na stronie) scroll w pionie scrollX - w poziomie pozwala na korelację z długością strony oraz animacją ukazującą ilość przeczytanej treści Obiekt lokacyjny window.location -> jest właściwością obiektu window i jest referencją do obiektu Location/lokacji window.location.hostname window.location.port window.location.href window.location.search // Redirect window.location.href = 'http://google.com' - będzie odsyłać do strony google window.location.reload() - będzie przeładowywać stronę Obiekt historii Daje możliwość przeglądania historii korzystania przeglądarki window.history.go(-1) - odsyła do poprzedniej strony/ jako argument kolejność w odwiedzonych stronach window.history.length - ilość pozycji w historii Obiekt Navigatora Odwołuje się do właściwości przeglądarki window.navigator - zwraca informacje na temat przeglądarki np. geolokalizację window.navigator.appVersion - wersja przeglądarki window.navigator.platform - zwraca system operacyjny window.navigator.vendor - provider internetu window.navigator.language - język przelądarki Obiekt document i jego właściwości Obiekt document zawiera całą zawartość przeglądanego pliku HTML Część właściwości zwraca w postaci tzw node-list przypominającej tablicę, choć nią nie są [wymaga konwersji do tablicy by używać ich metod] document.all - zwraca całość w postaci node-listy wszystkie elementy document.all.length - zwraca liczbę document.head - elementy z head document.body - elementy z body document.doctype - rodzaj dokumentu document.domain - domenę document.url - url document.characterSet document.contentType - np. text/html document.forms - zwraca wszystkie formy z html document.forms[0] - można traktować jak listę i wydobyć po indeksie document.forms[0].id - zwraca id document.forms[0].method - zwraca dostępną metodę document.forms[0].action - zwraca przypisaną akcję document.links - zwraca linki [a] document.links[0].id/.className/.classList - zwraca id, klasy, listę klas document.images - zwraca obrazy document.scripts - zwraca wszystkie skrypty js document.scripts[2].getAttribute( src') - treść atrybutu source Przypisanie elementów document do tablicy let scripts = document . scripts let arr = Array . from ( scripts ) arr . forEach ( function ( script ) { console . log ( script . getAttribute ( ` src ' )) } ) Źródła: https://developer.mozilla.org/en-US/docs/Web/API/Window/location","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-obiekt-window-document.html","loc":"https://kostyrko.github.io/zfrontu/js-obiekt-window-document.html"},{"title":"JavaScript - konstruktor, prototyp i dziedziczenie","text":"Funkcja konstruktora pozwala na stworzenie wielu obiektów według zdefiniowanego schematu, który jest nazywany prototypem Nazwa funkcji konstruktora często zaczyna się od dużej litery Schemat: function NazwaFunkcji ( właściwość ) { // zdefiniowanie konstruktora , przekazanie właściwości this . atrybut1 = właściwość ; // this . atrybut2 = function ( argument ) { // funkcja zawarta w ramach obiektu stająca się metodą obiektu console . log ( this . atrybut1 ); // przykłądowe wyrażenie / wywołujące obiekt } } Korzystanie z funkcji - tworzenie nowego obiektu (musi być poprzedzonę słowem kluczowym new ) const nazwaZmiennej = new nazwaFunkcji ( ' argument ' ) console . log ( nazwaZmiennej ) >> nazwaFunkcji { atrybut1 : \" argument \" , atrybut2 : {...}} console . log ( nazwaZmiennej . atrybut2 ()) // wywo ł anie metody >> w ł a ś ciwo ść // warto ść przypisana do atrybut1 tego wywo ł ywanego obiektu Przykładowa funkcja konstruktora - tworzenie obiektu Person function Person ( name ) { this . name = name ; } słowo kluczowe this odwołuje się do aktualnej instancji/wywołania obiektu Wywołanie funkcji const mike = new Person ( mike ) console . log ( mike ) >> Person { name : \"mike\" } Słowo kluczowe this odwołuje się do aktualnej instancji/wywołania obiektu. Przykładowo w tym przypadku this jest wywoływanym obiektem mike function Person ( name ) { this . name = name ; console . log ( this ); } const mike = new Person ( mike ) >> Person { name : \"mike\" } this wywołane po za funkcją zwraca obiekt window console . log ( this ) >> Window { frames , Window .... } Aby zmieniać właściwości konstruktorów można słowo kluczowe .prototype (będzie to miało wpływ na wszystkie stworzone na jego podstawie obiekty - jego instancji!!!) i edytować prototyp danej funkcji Dodawanie nowej przypisanej właściwości Funkcja wyjściowa function Person ( name ) { this . name = name ; } Dodanie właściwości Person . prototype . type = \"human\" console . log ( mike . type ) // wywołanie >> human Ale -> console . log ( mike ) >> Person { name : \"mike\" } // brak właściwości `type` chociaż w konsoli zwróci również info następującego typi -> __proto__ : type : \"human\" console . log ( mike . type ); >> human Pojawić się również powinna wiadomość na temat prototypu obiektu __proto__ : Object np . hasOwnProperty : f console . log ( mike . hasOwnProperty ( 'name' )) >> true Ale: console . log ( mike . hasOwnProperty ( ' type ' )) >> false // poniewa ż nale ż y do prototypu , a nie w ł a ś ciwo ś ci obiektu ( konstruktora ) Dodawanie nowej metody Person . prototype . showName = function () { return this . name } console . log ( mike . showName ()) ; >> mike // wywo ł uje funkcj ę console . log ( mike . showName ) ; >> function () { return this . name ;} // zwraca funkcję JS - zawiera wiele funkcji konstruktorów, które pozwalają na stworzenie obiektów według wcześniej zdefiniowanych prototypów new String() , new Boolean() , new Number() , new Array() , new Function() , new Object() , new RexExp() - regular expression ::: warto pamiętać o tym, że w ten sposób tworzy się obiekty a nie typy prymitywne choć wywołanie go odbywa się w taki sam sposób jak przy typie prymitywnym/podstawowym ::: Wbudowana funkcja konstrukcyjna dla tablic const arr = new Array ( 22 , 33 , 44 ) console . log ( arr ) // [ 22 , 33 , 44 ] Funkcji const func = new Function ( ' x ' , ' y ' , ' return x + y ' ) console . log ( func ( 1 , 1 )) >> 2 Obiekt const obj = new Object ( { name : \"r2d2\" } ) Prototypy - każdy obiekt ma swój prototyp, który również jest obiektem i dziedziczy z niego metody oraz właściwości Object.prototype Przykładowa funkcja konstruktora zawierająca funkcję liczenia wieku function Droid ( name , constDate ) { this . name = name ; this . birthday = new Date ( constDate ) ; this . showAge = function () { const diff = Date . now () - this . birthday . getTime () ; const ageDate = new Date ( diff ) ; return Math . abs ( ageDate . getUTCFullYear () - 1970 ) ; } } const c3po = new Droid ( ' C3PO ' , ' 2-2-2222 ' ) ; console . log ( c3po . showAge ()) ; Każdy ze stworzonych obiektów na podstawie tego konstruktora, również zawiera w sobie tą funkcję aby tego uniknąć można zadeklarować funkcję po za konstruktorem, wówczas zostanie ona zapisana do prototypu ale nie przypisana do każdego utworzonego obiektu function Droid ( name , constDate ) { this . name = name ; this . birthday = new Date ( constDate ) ; } Droid . prototype . showAge = function () { const diff = Date . now () - this . birthday . getTime () ; const ageDate = new Date ( diff ) ; return Math . abs ( ageDate . getUTCFullYear () - 1970 ) ; } Standard ES6 wprowadza również możliwość zadeklarowania klasy, której skutek będzie zbliżony class Droid { constructor ( name , constDate ) { this . name = name ; this . constDate = constDate } showName () { return ` Hello ${ this . name }` } } const c3po = new Droid ( ' c3po ' , ' 2222 ' ) console . log ( c3po ) >> Droid { name : \" c3po \" , constDate : \" 2222 \" } constDate : \" 2222 \" name : \" c3po \" __proto__ : constructor : class Droid showName : ƒ showName () __proto__ : Object Dziedziczenie function Robot ( name ) { this . name = name ; } Dodanie funkcji w prototypie konstruktora Robot Robot . prototype . greeting = function () { return ` hello ${ this . name }` ; } Konstruktor droid, który dziedziczy właściwości konstruktora Robot function Droid ( type ) { Robot . call ( this , name ) this . type = type } ::: .call() - funkcja call pozwala na wywołanie funkcji z innego kontekstu::: Innymi metodami są: ::: .bind() ::: ::: .apply() ::: Więcej na ten temat czytaj: How-to: call() , apply() and bind() in JavaScript aby zapewnić dziedziczenie prototypie należy to zaznaczyć w innym przypadku nie będzie to możliwe Droid . prototype = Object . create ( Robot . prototype ) Object.create - metoda, która pozwala na przekazanie dziedziczenia prototypu, te mogą być nadpisana nową metodą o tej samej nazwie. Ta metoda tworzy nowy obiekt, korzystając z istniejących obiektów jako jej prototypu stąd: Należy zdefiniować używanie konstruktora z Droida, w innym przypadku zostanie on odziedziczony Droid . prototype . constructor = Droid ; Źródła: https://developer.mozilla.org/pl/docs/Web/JavaScript/Guide/Obsolete_Pages/Przewodnik_po_j%C4%99zyku_JavaScript_1.5/Tworzenie_nowych_obiekt%C3%B3w/Zastosowanie_konstruktor%C3%B3w_funkcji http://kursjs.pl/kurs/obiekty/konstruktor.php https://www.udemy.com/course/modern-javascript-from-the-beginning/","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-konstruktor-prototyp-dziedziczenie.html","loc":"https://kostyrko.github.io/zfrontu/js-konstruktor-prototyp-dziedziczenie.html"},{"title":"JavaScript \"this\"","text":"Funkcja podczas wywołania odwołuje się do jej bieżącego kontekstu (sposobu jej wywołania, a nie miejsca jej deklaracji lub sposobu jej zdefiniowania) przy pomocy słowa kluczowego this . -> nie wskazuje na funkcję wewnątrz, której jest użyte ani na zakres (scope) funkcji -> wskazanie kontekstu poprzez call , apply (lub bind ) -> wywołanie funkcji z wykorzystaniem słowa kluczowego new sprawia, że kontekstem jest nowo stworzony obiekt function bike () { console.log(this.name) ; } var name = \"Ninja\" ; var obj1 = { name : \"Pulsar\" , bike : bike } ; bike (); // \"Ninja\" obj1 . bike (); // \"Pulsar\" = this . name - > obj1 . name Strict mode - domniemane this W tym trybie this jest undefined Jeśli właściwość obiektu jest wywoływana jako metoda, wtedy obiekt staję się obiektem this albo kontekstem wywołania tej metody Stały trb/Fixed mode Użycie call , apply lub bind - sprawiają, że pierwszy parametr funkcji będzie jej kontekstem Słowo kluczowe new Słowo kluczowe new jest wywołaniem tworzącym/konstruującym. Wywołanie funkcji z wykorzystaniem słowa kluczowego new sprawia, że kontekstem jest nowo stworzony obiekt w metodzie this odwołuje się do obiektu właściciela samo this odwołuje się do globalnego obiekt w funkcji this odwołuje się do globalnego obiekt/ w strict mode jest undefined w wydarzeniu odwołuje się do elementu, który je przyjmuje call , apply przypisuje this do wybranego obiektu Źródła: https://www.youtube.com/watch?v=QTDXSUnS1dc https://codeburst.io/all-about-this-and-new-keywords-in-javascript-38039f71780c https://typeofweb.com/this-js-kontekst-wywolania-funkcji/ https://www.w3schools.com/js/js_this.asp","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-this.html","loc":"https://kostyrko.github.io/zfrontu/js-this.html"},{"title":"JavaScript - bloki i zakres","text":"Instrukcja blokowa (ang. blocks) - blok służy do grupowania wyrażeń i jest kodem zamkniętym w nawiasach klamrowych. Przykładem bloku kodu jest funkcja lub instrukcja if. Zmienna znajduje się w zasięgu funkcji jeśli zamknięta jest w tym samym bloku kodu jak i wówczas gdy znajduje się po za nim. Zakres/scope Zakres (scope) jest kontekstem, w którym dana zmienna jest zadeklarowana. Zakres blokowy odnosi się do zmiennej, która jest dostępna w ramach bloku. Zmienne o globalnym zakresie zadeklarowane są po za blokiem. const droid = \" R2D2 \" const droidSeeker = () => { return droid ; // R2D2 } console . log ( droidSeeker ()) // = R2D2 Gdy zmienna jest deklarowana wewnątrz bloku, wówczas jest osiągalna jedynie tam i jest zwana lokalną zmienną. Zmienna zadeklarowana globalnie jest dostępna w trakcie całości wykonywania się programu (zużycie pamięci + możliwość zmiany), w przypadku zmiennej lokalnej tak nie jest. Zmiana zmiennej w funkcji let droid = \"R2D2\" ; const droidSeeker = () => { droid = \"C3PO\" ; // Take note of this line of code console . log ( droid ); } ; logNum (); // > C3PO console . log ( num ); // > C3PO Deklarowanie zmiennej w ramach bloku pozwala na tworzeni czystszego kodu, łatwiejszego w utrzymaniu (dana zmienna jest odpowiedzialna za wybrany fragment kodu), pozwala na tworzeni kodu w sposób modułowy. const droidSeeker = () => { const smallDroid = true ; let droid = ' C3PO ' ; if ( smallDroid ) { let droid = ' R2D2 ' ; console . log ( droid ) ; // R2D2 } console . log ( droid ) ; // C3PO } ; console . log ( droid ) ; // ReferenceError Global namespace - odnosi się do przestrzeni, w której przechowywane są nazwy zmiennych o globalnym zasięgu. Źródła: https://developer.mozilla.org/pl/docs/Web/JavaScript/Guide/Control_flow_and_error_handli http://blog.nebula.us/13-javascript-closures-czyli-zrozumiec-i-wykorzystac-domkniecia","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-blok-zakres.html","loc":"https://kostyrko.github.io/zfrontu/js-blok-zakres.html"},{"title":"JavaScript -> funkcje strzałkowe","text":"Funkcja starzałkowa skaraca zapis i zmienia kontekst this (jest połączony w sposób leksykalny/odowłuje się do kodu, w którym kod jest zawarty), przykładowo jest niezmienny i nie dostosowuje się do obiektu w funkcji a odwołuje się do zewnętrznego this (stąd dla DOM jest to najczęściej obiekt Window ) ::: Warto pamiętać, że funkcja w ramach JS jest obiektem ! (function(){}).constructor === Function) ::: słowo kluczowe function zmienia się w strzałkę => schemat: const show = function () {...} ; const show = () => {...} ; w przypadku tylko jednego parametru można pominąć nawiasy / nawis pozostaje gdy funkcja nie ma parametru lub więcej niż 1 ::: jeśli funkcja jedynie zwraca to można pominąć instrukcję return - tzw. domniemany zwrot/return ::: ::: można również pominąć {} w przypadku gdy istnieje tylko jedna linia kodu ::: const multiply = function ( a ) { return a * a ; } const multiply = a => a * a ; const waterPlant = day => day === ' Tuesday ' ? true : false ; jeżeli funkcja zwraca jedną instrukcję można pominąć klamry const multiply = ( a , b ) => { const result = a * b ; return result } jeżeli funkcja zwraca literał obiektu należy zamknąć ją w nawiasie const retObject = function () { return { team : \" Kasztany \" , score : 0 } } const retObject = name => ( { team : \" Kasztany \" , score : 0 } ) const retObject = () => ( { team : \" Kasztany \" , score : 0 } ) Przykłady: function getNumber ( num , arr ) { const newArr = arr . filter (( item ) => { return item === num } ) ; return ( newArr [ 0 ] === num ? true : false ) ; } zamiast function getNumber ( num , arr ) { const newArr = arr . filter ( function ( item ) { return item === num ; } ) ; if ( newArr [ 0 ] === num ) { return true } else { return false } } ; Warto pamiętać żę funkcja strzałkowa jest zadeklarowana poprzez wyrażenie funkcyjne i oznacza, to że zmienia kontekst this co może być szczególnie istotne w kontekście manipulowania elementami DOM (wówczas this jest obiektem window ) W takim przypadku wewnątrz funkcji zamiast this można stosować event.target/event.currentTarget patrz dyskusja na ten temat na StackOverflow Ten problem można również rozwiązać poprzez zachowanie this w stworzonej zmiennej np. nazwanej self (ta nazwa przyjęła się historycznie) droid . prototype . calculateNum = function () { this . sum = 0 ; const self = this ; this . droid . forEach ( function ( element ) { console . log ( self ); } ); } Źródła: http://kursjs.pl/kurs/es6/funkcja-strzalkowa.php https://zendev.com/2018/10/01/javascript-arrow-functions-how-why-when.html http://www.algosmart.pl/powtorka-przed-reactjs-1-funkcje-strzalkowe https://www.freecodecamp.org/news/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26/","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-funckja-starzalkowa.html","loc":"https://kostyrko.github.io/zfrontu/js-funckja-starzalkowa.html"},{"title":"JavaScript - funkcje","text":"Funkcje Zbiór zgrupowanych instrukcji, które można wywołać poprzez odwołanie się do ich nazwy, funkcja może ale nie musi przyjmować parametry/argumenty, które biorą udział w wywoływaniu się jej wewnętrznego kodu. Funkcję można stworzyć poprzez jej deklarację przy użycia słowa kluczowego function Schemat function identyfikator ( argument ) { kod ; } // wywołanie identyfikator ( argument ) ::: Funkcje posiadają własne właściwości np. .name -> identyfikator.name = identyfikator (może być użyty w funkcji) ::: Hoisting/wynoszenie - funkcje tak samo jak i deklaracje zmiennych w trakcie analizowania/parsowania kodu przez przeglądarkę są wynoszone na górę aktualnego zasięgu i tam pojawiają się w zapisanej kolejności (ma to wpływ na nadpisywanie) ->> Można wywoływać funkcje zanim zostaną zadeklarowane . ::: wynoszenie odbywa się przed wykonaniem kodu ::: Istnieje możliwość zdefiniowania domyślnego parametru w funkcji, który zostaje użyty w przypadku gdy ten nie zostanie podany (przy pomocy operatora = po którym wpisujemy domyślną wartość) function droidSeeker ( name = ' droid ' ) { console . log ( ` This is not the ${ name } you are looking for ` ) } droidSeeker ( ' Mike ' ) >> This is not the Mike you are looking for droidSeeker () >> This is not the droid you are looking for Funkcje pomocnicze Funkcje pomocnicze pozwalają na rozbicie kodu na jego poszczególne części tak aby był czytelniejszy i prostszy w utrzymaniu w tym celu można stworzyć jedną funkcję cząstkową a następnie odwołać się do niej w kolejnej function multipNineFifth ( num ) { return num * ( 9 / 5 ) ; } function getFarenheit ( celc ) { return multipNineFifth ( celc ) + 32 ; } getFarenheit ( 10 ) // = > 50 Wyrażenia funkcyjne Funkcje (zwykle anonimowa) można przypisać do zmiennych - wówczas: const zmienna = function ( arg1 , arg2 ) { return arg1 + arg2 ; } // wywo ł anie console . log ( zmienna ( 1 , 2 )) ; W ten sposób zadeklarowana funkcja nie jest wynoszona ::: wynoszona jest deklaracja funkcja jeśli jest poprzedzona słowem kluczowego var ::: Przypadek z nazwaną funkcją const zmienna = function nazwa ( x , y ) { return x + y ; } console . log ( zmienna . name ) ; // = nazwa -> pozwala na odwołanie się do f(x) w jej wnętrzu Funkcja w domyśle zwraca wartość undefined - stąd aby zwróciła jakąś wartość należy zastosować instrukcję return ::: , który przerywa również działanie funkcji ::: Funkcje anonimowe Nie posiada nazwy (identyfikatora), może ale nie musi być przypisana do zmiennej, może ale nie musi posiadać argumentu // występuje często jako funkcja występująca jako parametr w innej Gdy przypisana do zmiennej wywołuje się poprzez jej przywołanie w innym przypadku należy zamknąć ją w nawiasach -> funkcja zostanie od razu wywołana w trakcie wykonywania kodu. ( function ( arg ) { console . log ( arg ) } )( \"Argument\" ); Funkcja natychmiastowa Tzw IIFE (Immediately-Invoked Function Expression) Funkcja, która jest deklarowana i przeprowadzana \"w tym samym czasie\" - taka funkcja zamknięta jest w nawias (często jest anonimowa) i jest natychmiast wywoływana. Często wykorzystywana w metodach tablic. ( function ( droid ) { console . log ( ' this is ' + droid ) ; } )( ' r2d2 ' ) ; >> this is r2d2 for ( let i = 0 ; i < 12; i++) { setTimeout ( function () { console . log ( i ) ; }, 500 ) ; } Pozwala na uniknięcie zdublowania nazw zmiennych. Nie trzeba osobno wywoływać funkcji. Źródła: http://kursjs.pl/kurs/super-podstawy/funkcje.php http://kursjs.pl/kurs/super-podstawy/funkcje-tematy-dodatkowe.php#callback http://jsdn.pl/samowywolujace-sie-anonimowe-funkcje/ http://jsdn.pl/funkcje-tworzenie-funkcji-w-javascripcie/ https://www.modestprogrammer.pl/wyrazenia-funkcyjne-oraz-funkcje-anonimowe-w-javascript http://papoldesign.pl/edukacja/javascript-funkcja-natychmiastowa-iife/","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-funkcja.html","loc":"https://kostyrko.github.io/zfrontu/js-funkcja.html"},{"title":"JavaScript - pętle (for/while loop)","text":"Pętle for lub while pozwalają na wielokrotne wykonywanie się tego samego kodu schemat pętli for : const y = 5 // zmienna b ę d ą ca wyznacznikiem granicznym wykonywania p ę tli // wykonaj p ę tl ę do momentu w kt ó rym i jest nadal mniejsze ni ż y for ( i = 0 ; i < y; i++) { // i - akumulatorem; moment do którego wykonuje się pętla; zmiana dokonywana na akumulatorze po przejściu pętli let x = y + 1 ; // wykonujący się kod return x ; } ; Przykład pętli dekrementacyjnej (wykonuj pętlę w przypadku gdy i jest większe od 5): for ( let i = 10 ; i > 5 ; i-- ) { console . log ( i ) } while - tworzy pętle, która wylicza wyrażenie i - dopóki jest ono prawdą wykonuje blok poleceń while ( warunek ) { polecenia } n = 0 ; x = 0 ; while ( n < 3 ) { n ++ ; x += n ; } for...in - - przechodzi przez wszystkie policzalne właściwości obiektu, których kluczem jest string / ignoruje te, których kluczem jest symbol const object = { a : 1 , b : 2 , c : 3 } ; for ( let property in object ) { console . log ( `${ property }: ${ object [ property ]}` ) ; } >> a : 1 >> b : 2 >> c : 3 for...of - tworzy pętlę przechodząc przez iteracyjne obiekty (string,tablica/array) const array1 = [ ' a ' , ' b ' , ' c ' ] ; for ( const element of array1 ) { console . log ( element ) ; } for each ..in - przestarzałe wyrażenie - obecnie stosuje się for..of for each ( variable in object ) { statement } for await...of - asynchroniczny iterator -> więcej na ten temat tutaj for await ( zmienna iteracyjna ) { polecenie } do...while - wykonuje polecenie dopóki warunek jest spełniony do { polecenia } while ( warunek ) ; do { i += 1 ; document . write ( i ) ; } while ( i < 5 ) ; Źródła: http://kursjs.pl/kurs/super-podstawy/funkcje.php http://jsdn.pl/samowywolujace-sie-anonimowe-funkcje/ http://jsdn.pl/funkcje-tworzenie-funkcji-w-javascripcie/ https://www.modestprogrammer.pl/wyrazenia-funkcyjne-oraz-funkcje-anonimowe-w-javascript","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-for-while-loop.html","loc":"https://kostyrko.github.io/zfrontu/js-for-while-loop.html"},{"title":"JavaScript - Obiekt.metoda()","text":"Object.assign() - kopiuje/klonuje wszystkie elementy jednego lub więcej elementu do określonego elementu Schemat: returnedTarget = Object . assign ( target , source ); Przykłady const obiekt = { a : 1 } ; const kopia = Object . assign ( {} , obiekt ); // kopia = { a : 1 } const o1 = { a : 1 } ; const o2 = { b : 2 } ; const o3 = { c : 3 } ; const obj = Object . assign ( o1 , o2 , o3 ); // obj = { a : 1 , b : 2 , c : 3 } :::Właściwości nieprzeliczalne oraz te z łańcucha prototypów nie są kopiowane ::: Object.create() - tworzy nowy obiekt, wykorzystując istniejący obiekt jako prototyp tworzonego obiektu Object.defineProperty() - tworzy nowy właściwość bezpośrednio na obiekcie albo modyfikuje istniejącą wartość wewnątrz obiektu Object.defineProperties() - definiuje nowe lub modyfikuje istniejące właściwości Object.entries() - zwraca tablicę zawierającą par klucza-wartości w postaci stringa Object.freeze() - zamraża obiekt, obiekt zamrożony nie może być zmieniany (nie można dodawać nowych właściwości/\"elementów\", zmieniać ich ani usuwać) Object.fromEntries() - zmienia listę kluczy-wartości w obiekt const entries = new Map ([ [ 'foo' , 'bar' ], [ 'baz' , 42 ] ]); const obj = Object . fromEntries ( entries ); console . log ( obj ); // expected output : Object { foo : \"bar\" , baz : 42 } Object.getOwnPropertyDescriptor() Object.getOwnPropertyDescriptors() Object.getOwnPropertyNames() Object.getOwnPropertySymbols() Object.getPrototypeOf() Object.is() Object.isExtensible() Object.isFrozen() Object.isSealed() Object.keys() - zwraca tablicę kluczy danego obiektu Object . keys ( object1 ) Object.preventExtensions() Object.seal() Object.setPrototypeOf() Object.values() - zwraca wartości danego obiektu w postaci tablicy Źródła: https://launchschool.com/books/javascript/read/objects#whatareobjects https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Object/","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-obiekt-metody.html","loc":"https://kostyrko.github.io/zfrontu/js-obiekt-metody.html"},{"title":"JavaScript - obiekty (Objects)","text":"Programowani obiektowego uczyłem się na podstawie Pythona i początkowo miałem problem z uchwyceniem konceptu, zrozumienie obiektu w JavaScript (porównanie tych 2 rzeczy ze sobą nie jest wskazane,ale najbliższe tego co znam) okazało się być czymś prostszym (przypomina pythonowy słownik na sterydach - choć faktycznie bliżej mu do obiektu znanego mi z tego języka, sam jednak zapis jest mniej skomplikowany - tam tworzy się tzw klasy). Obiekty zawierają właściwości, którymi są pary składające się z klucza i przypisanych im wartości, owymi wartościami mogą być wszystkie prymitywne typy, jak i tablice czy funkcje - te rozdzielone są przecinkami. Kolokacje te (key-value pairs) są rozdzielone dwukropkiem. Obiekt zadeklarowany jest poprzez użycie słowa kluczowego jak przy innych zmiennych let lub const oraz poprzez zastosowanie nawiasów klamrowych. const person = { name : 'Mikołaj' , age : 99 , animals : [ \"cat\" , \"dog\" ], sayHello : function () { console . log ( \"hello Mikolaj\" ) } } ; person . sayHello () > hello Mikolaj console . log ( person . animals [ 1 ]) > dog Odwołujemy się do poszczególnej wartości poprzez przywołanie nazwy obiektu oraz właściwości po kropce lub funkcji otwierając i zamykając nawias. Alternatywnie można stosować kwadratowe nawiasy np. person[\"animals\"] Dodawanie nowych par klucza-wartości odbywa się w podobny sposób jak w przypadku tablic person . height = 1 . 8 // lub : person [ 'gender' ] = \"male\" console . log ( person ) > { name : 'Mikołaj' , age : 99 , animals : [ \"cat\" , \"dog\" ], sayHello : function () { console . log ( \"hello Mikolaj\" ), height : 1 . 8 , gender : \"male\" } Poprzez odwołanie się do słów kluczowych delete istnieje możliwość usunięcia wybranych właściwości obiektu delete person . height > true // zwraca false - jeśli nie jest to możliwe delete person [ 'gender' ] > true console . log ( person ) > { name : 'Mikołaj' , age : 99 , animals : [ \"cat\" , \"dog\" ], sayHello : function () { console . log ( \"hello Mikolaj\" ) } Zmiana wartości, przypisanej do klucza odbywa jest prosta i również zbliżona do tego co znane jest z tablicy, jednak zamiast odwoływać się do pozycji indeksowej, należy odwołać się do klucza person . name = \"Michał\" console . log ( person ) > { name : 'Mikołaj' , age : 99 , animals : [ \"cat\" , \"dog\" ], sayHello : function () { console . log ( \"hello Mikolaj\" ) } W wewnętrznej funkcji obiektu można odwołać się do wartości przypisanych do kluczy w niej zawartej w dwojaki sposób odwołując się do klucza lub słowa kluczowego this (który odwołuje się do obiektu okna) const person2 = { name: 'Mike', sayHello: function() { console.log(`hello ${ this . name } `) // lub person2.name > hello Mike } }; Prototypy Obiekty mogą dziedziczyć elementy z innych obiektów. Prototypem nazywany wówczas jest obiekt, który jest \"dawcą\"/rodzicem. Źródła: https://launchschool.com/books/javascript/read/objects#whatareobjects https://www.youtube.com/watch?v=qs3F-z6ridc https://dev.to/valentinogagliardi/the-secret-life-of-javascript-objects-2a33","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-obiekty.html","loc":"https://kostyrko.github.io/zfrontu/js-obiekty.html"},{"title":"JavaScript - obiekt Math","text":"Math jest wbudowanym obiektem (najwyższego poziomu), który posiada właściwości i metody związane z metodami stałymi i matematycznymi. Math.Pi - właściwość (jedna z wielu) - pozwala odwołać się do wartości Pi (ok. 3.14159) Metody (wybrane): Math.random() - zwraca liczbę pseudolosową z przedziału [0,1) ::: aby uzyskać liczbę pomiędzy 1-20 należy pomnożyć wynik Math.random() * 20 i dodać do tego 1 ::: let val = Math . floor ( Math . random () * 20 + 1 ) // Math . floor aby uzyska ć ca ł kowit ą zaokr ą glon ą do do ł u Math.ceil() - zwraca najmniejszą liczbę całkowitą większą do lub równą danej Math . ceil (. 95 ); // 1 Math . ceil ( 4 ); // 4 Math . ceil ( 7 . 004 ); // 8 Math.abs() - zwraca wartość bezwzględną danej liczby Math . abs ( '-1' ); // 1 Math . abs ( - 2 ); // 2 Math . abs ( null ); // 0 Math . abs ( 'string' ); // NaN Math.floor() - zwraca największą liczbę całkowitą mniejszą od lub równą danej Math . floor ( 45 . 95 ); // 45 Math . floor ( - 45 . 95 ); // - 46 Math.round() - zwraca liczbę zaokrągloną do najbliższej liczby całkowitej x = Math . round ( 20 . 5 ) // zwraca 21 Math.sign() - zwraca znak liczby w postaci wynikowej 1, -1, 0, -0, NaN Math . sign ( 3 ) // 1 Math . sign ( - 3 ) // - 1 Math . sign ( \"-3\" ) // - 1 Math . sign ( 0 ) // 0 Math . sign ( - 0 ) // - 0 Math . sign ( NaN ) // NaN Math . sign ( \"foo\" ) // NaN Math.trunc() - z floata robi integer poprzez usunięcie wartości po kropce Math . trunc ( 13 . 37 ) // = 13 Math . trunc ( - 0 . 123 ) // = 0 Math.min()/max() - zwraca mniejszą/większą z dwóch liczb lub większej ilości liczb, argumentem może być również tablica console . log ( Math . max ( - 1 , - 3 , - 2 )); // oczekiwany rezultat : - 1 const array1 = [ 1 , 3 , 2 ]; console . log ( Math . max (... array1 )); // oczekiwany rezultat : 3 ::: wykorzystanie Array.reduce() do znalezienia największego elementu w tablicy zawierającej liczby - tworzy pary i porównuje je liczby ze sobą ::: const arr = [ 1 , 2 , 3 ] ; const max = arr . reduce ( function ( a , b ) { return Math . max ( a , b ) ; } ) ; Math.pow() - dana liczba podniesiona do potęgi Math . pow ( 7 , 2 ); // 49 Math.sqrt() - zwraca pierwiastek kwadratowy danej liczby Math . sqrt ( 9 ); // 3 Math . sqrt ( 2 ); // 1 . 414213562373095 Math . sqrt ( 1 ); // 1 Źródła: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math h","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-math.html","loc":"https://kostyrko.github.io/zfrontu/js-math.html"},{"title":"JavaScript - obiekty wbudowane","text":"Wartości Infinity NaN undefined null Funkcje eval() - ocenia kod który jest stringiem (użycie tego nie jest bezpieczne jeśli ogólnodostępne) console . log ( eval ( '2 + 2' ) === eval ( '4' )); // expected output : true console . log ( eval ( '2 + 2' ) === eval ( new String ( '2 + 2' ))); // expected output : false uneval() - tworzy string reprezentujący kod źródłowy obiektu uneval ( function foo () {} ); // returns \"(function foo(){})\" isFinite() - sprawdza czy liczba podana (argument) jest liczbą skończoną isNaN() - sprawdza czy podany argument jest liczbą console . log ( milliseconds ( '100F' )); // expected output : \"Not a Number!\" parseFloat() - analizuje argument (string?) i zwraca go jako float function circumference ( r ) { return parseFloat ( r ) * 2 . 0 * Math . PI ; } parseInt() - analizuje argument (string) i zwraca go jako integer decodeURI() - dekoduje Uniform Resource Identifier wcześniej stworzony przez encodeURI() decodeURIComponent() - dekoduje Uniform Resource Identifier wcześniej stworzony przez encodeURIComponent() encodeURI() - koduje URI poprzez zamianę każdej instancji na 1-4 wyjściowych sekwencji reprezentowanych przez symbol z UTF-8 encodeURIComponent() - jw Obiekty podstawowe Object Function Boolean Symbol Error EvalError RangeError ReferenceError SyntaxError URIError Liczby i daty Number - pozwala pracować z wartościami liczbowymi, stosowany przy uzyskiwaniu dostępu do stałych właściwości. Posiada właściwości Metody Numbers został przedstawione tutaj tutaj Obiekt Math został opisany tutaj Date Date - reprezentuje moment w czasie -> odowłując się do 1 January 1970 UTC Metody Date.now() - wartość liczbowa aktualnego czasu Date.pars() - \"Zwraca liczbę milisekund, które upłynęły od 1 stycznia 1970, 00:00:00 czasu lokalnego do daty podanej jako argument string.\" Date . parse ( \"Wed, 09 Aug 1995 00:00:00\" ); // Zwraca 807937200000 w strefie czasowej GMT-0300 , a inne wartości w innych Date.UTC() - \"Zwraca liczbę milisekund, które upłynęły od 1 stycznia 1970, 00:00:00 czasu uniwersalnego do daty podanej jako zestaw liczb\" const utcDate1 = new Date ( Date . UTC ( 96 , 1 , 2 , 3 , 4 , 5 )); console . log ( utcDate1 . toUTCString ()); // expected output : Fri , 02 Feb 1996 03 : 04 : 05 GMT Instancje obiektu Date (wybrane) Metody Date.prototype.getDate() - zwraca dzień miesiąca podanej daty const birthday = new Date ( ' August 19, 1975 23:15:30 ' ) ; const date1 = birthday . getDate () ; .getDay() - zwraca dzień tygodnia .getFullYear() - rok .getHours() - godzinę .getMinutes() - minuty .getMonth() - miesiąc .getTime() - zwraca aktualny czas w milisekundach Setters - pozwalają na zdefiniowanie czasu .setTime() , setMinutes() etc Przetwarzanie tekstu String - łańcuch znaków RegExp - obiekt wyrażeń regularnych, zawiera wzór regularnego wyrażenia -> znalezienie lub zmianę ciągu znaków w innym ciągu znaków Indeksowanie kolekcji Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Kolekcje z kluczami Map - by: overment Set WeakMap WeakSet Kolekcje wektorowe Dane strukturalne ArrayBuffer SharedArrayBuffer Atomics DataView JSON Kontrola obiektów abstrakcyjnych Promise Generator GeneratorFunction AsyncFunction Refleksy Internacjonalizacja WebAssembly Pozostał arguments Źródła: https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-obiekty-wbudowane.html","loc":"https://kostyrko.github.io/zfrontu/js-obiekty-wbudowane.html"},{"title":"JavaScript - destrukturyzacja tablic i obiektów","text":"Destrukturyzacja tablic Destrukturyzacja tablic pozwala na przypisanie do zmiennych tworzących tablice kolejne elementy zawarte w tablicy (właściwości tablicy) let droids = [ 'r2d2' , 'c3po' ] let [ droid1 , droid2 ] = droids console . log ( droid2 ) >> c3po zamiast let droid2 = droids [ 1 ] Istnieje również możliwość omijania pewnych elementów w trakcie destrukturacji poprzez pozostawienie wolnej spacji pomiędzy przecinkami ``` JavaScript let droids = [ 'r2d2' , 'c3po' , 'bb8' ] let [ droid1 , , droid3 ] = droids console . log ( droid3 ) >> bb8 ```` Przy pomocy operatora spread można również wydzielić jeden element zwracając z reszty tablicę ``` JavaScript let droids = [ 'r2d2' , 'c3po' , 'bb8' ] let [ droid1 , ... droid2 ] = droids console . log ( droid2 ) >> [ 'c3po' , 'bb8' ] ``` console . log ( droid1 ) >> r2d2 ```` Destrukturyzacja obiektów const protocolDroid = { name : \"ME-8D9\" , occupation : \"Protocol droid\" , height : \"1.72\" , homeWorld : \"Takodana\" } let { name , homeWorld } = protocolDroid console . log ( name ) >> ME - 8 D9 console . log ( homeWorld ) >> Takodana Pozwala to na wykorzystanie w funkcji tylko tych elementów obiektu, które są nam potrzebne const createDroid = ( { name, homeWorld } ) => { console.log(name, homeWorld) ; } ; createDroid ( protocolDroid ); const protocolDroid = { name : \"ME-8D9\" , occupation : \"Protocol droid\" , height : \"1.72\" , homeWorld : \"Takodana\" address : { city : \"Takodana\" } } const { name, address : { city } } = protocolDroid ; console . log ( city ) >> Takodana Istnieje również możliwość nadpisania przypisania wartości do zmiennej/nadawanie zmiennej nowej wartości const droid = { name : \"ME-8D9\" } ; const { name : protocolDroid } = droid ; console . log ( protocolDroid ); // >> ME-8D9","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-destrukturyzacja.html","loc":"https://kostyrko.github.io/zfrontu/js-destrukturyzacja.html"},{"title":"JavaScript - metody tablic (array methods)","text":"Tablice Tworzenie tablicy const arr = [ 1 , 2 , 3 , 4 ] ::: istnieje możliwość również przez funkcję konstruktora new Array() Sprawdzanie czy obiekt, do którego się odwołujemy jest tablicą Array . isArray ( arr ) // true ( / false ) Dodawanie wartości do tablicy arr [ 2 ] = 20 arr // [ 1 , 2 , 20 , 3 , 4 ] Tablice można tworzyć również z obiektów do nich podobnych porzez wykorzystanie tzw. spread operatora [...obiektPodobnyDoArr] oraz Array.from (obiektPodobnyDoArr) Często stosowanymi metodami tablic są forEach/reduce/filter/map Podstawowe metody() tablic push i unshift - pozwala na dodanie jednego lub więcej elementów na koniec/początek tablicy (zwraca nową długość tablicy a nie zmodyfikowaną tablicę) const arr = [ 1 , 2 , 3 , 4 ] arr . push ( 1 , null , 'push' ) arr . unshift ( 0 ) concat - [od concatenate] zwraca nową tablicę, która zawiera wszystkie elementy tablicy, na której zostałą zastosowana metoda oraz podanych argumentów :::tablica wyjściowa NIE ulega modyfikacji::: arr . concat ( 2 , 'concatenate' ) brak modyfikacji -> stąd console . log ( arr ) > [ 0 , 1 , 2 , 3 , 4 , 1 , null , \"push\" ] Pozwala na łączenie ze sobą 2 tablic const arr1 = [ 1 , 2 , 3 ] const arr2 = [ 4 , 5 , 6 ] let arr3 = arr1 . concat ( arr1 ) console . log ( arr3 ) >> Array [ 1 , 2 , 3 , 4 , 5 , 6 ] pop i shift - usuwa i zwraca ostatni/pierwszy element tablicy :::tablica ulega modyfikacji::: arr . pop () >> push indexOf - znajduje nr porządkowy (indeks) wybranego elementu ::: jeśli dany element nie jest obecny w tablicy to wówczas zwraca -1 ::: arr . indexOf ( 1 ) > 1 splice - zwraca \"wycięte\" obiekt z tablicy na podstawie pozycji/indeksu tworząc z niego nową tablicę (może przyjąć więcej niż jeden argument, tworząc ich zakres):::tablica wyjściowa ULEGA modyfikacji::: const arr1 = [ 1 , 2 , 3 , 4 , 5 ] let removedItems = arr1 . splice ( 1 , 3 ) // arr1 = [ 1 , 5 ] // removedItems = [ 2 , 3 , 4 ] slice - przyjmuje zero, 1 lub 2 argumenty / 0 - kopiuję tablicę, 1- tnie ją od wskazanego argumentu (indeks), 2 - w zakresie wskazanym przez argumenty (indeksy) - wyłącznie (argument końcowy nie będzie częścią) :::tablica wyjściowa NIE ulega modyfikacji::: sort - zwraca posortowaną tablicę w sposób leksykograficzny (słownikowo), gdzie sortowanie jest oparte na pierwszej cyfrze/literze składającej się na liczbę/wyraz, gdzie 1. litera/cyfra ma wpływ na kolejność pozycji i a potem następna etc. aby posortować ze sobą liczby w tablicy należy jest ze sobą porównać i do tego stosuje się funkcji porównawczej function compareNumbers ( a , b ) { return a - b } ::: jeśli wynik -1 to sortuje do lewej, jeśli 1 to do prawej w przypadku 0 pozostawia na miejscu ::: Przykładowe zastosowanie let arr1 = [ 7 , 1 , 2 , 3 , 4 , 5 ] arr1 = arr1 . sort (( a , b ) => a - b ) // od najmniejszej arr1 = arr1 . sort (( a , b ) => b - a ) // od największej :::tablica ULEGA modyfikacji::: reverse - odwraca kolejność elementów znajdujących się w tablicy includes - sprawdza czy tablica zawiera wpisany argument stosuje === i nie można szukać zagnieżdżonych list find jako argument można wpisać wyrażenie na podstawie, którego będzie wyszukiwać const arr = [ 50 , 51 , 7 , 1 , 2 , 3 , 4 , 5 ] // zwracaj wynik poni ż ej 50 function under50 ( num ) { return num < 50 ; } // zwraca pierwszy wynik const find = arr . find ( under50 ) ; console . log ( find ) >> 7 alternatywny zapis (zwracaj pierwszy wynik poniżej 50) const find = arr . find ( e => e < 50 ) Przykładowe zastosowanie z projektu To Do App [z tablicy wszystkich zadań (allTasks) znajdź to, którego data-priority jest niższe od nowo tworzonego zadania(newTask)] const element = allTasks . find ( e => Number ( newTask . dataset . priority ) > Number ( e . dataset . priority )) .some() - sprawdza czy w tablicy znajdują się wartość spełniające przypisany warunek (np. console.log(array.some(even)) ) .every() - - sprawdza czy w tablicy wszystkie wartości spełniające przypisany warunek (np. console.log(array.every(even)) ) forEach/reduce/filter/map callback - funkcja wywołująca się na każdym elemencie forEach - tworzy pętlę przechodzącą przez zawartość tablicy - wymaga funkcji wywołania zwrotnego (callback), która tworzy akcję na każdym z elementów tablicy -> zwraca undefined , ale po drodze wywołuje wynik akcji let arrEach = [ 1 , 2 , 3 , 4 ]; arrEach . forEach ( function ( num ) { console . log ( num + 1 ); } ); > 2 > 3 ... map - podobny do forEach ale zmienia elementy tablicy i zwraca nową tablicę ze zmienionymi wartościami Przedstawiona poniżej funkcja zwróci nową tablicę o nazwie birthYear zwierającą aktualny rok umniejszony o każdy element z tablicy years , nowa tablica będzie miała tyle samo elementów co tablica years const years = [ 20 , 21 , 22 ] const currYear = new Date () . getFullYear () const birthYear = years . map ( function ( elem ) { return currYear - elem } ) // przy za ł o ż eniu , ż e jest rok 2020 >> [ 2000 , 1999 , 1998 ] filter - zwraca nową tablicę , z elementami dla którego wskazany argument jest prawdziwy (= True) :::tablica wyjściowa NIE ulega modyfikacji::: const newArr = array . filter ( function ( item ) { return condition ; } ) ; function getNumber ( num , arr ) { const newArr = arr . filter ( function ( item ) { return item === num ; } ) ; return ( newArr [ 0 ] === num ? true : false ) } ; // zapis przy pomocy funkcji strza ł kowej function getNumber ( num , arr ) { const newArr = arr . filter (( item ) => { return item === num } ) ; return ( newArr [ 0 ] === num ? true : false ) ; } reduce - funkcja przyjmuje cztery argumenty 1) wartość inicjalizującą tzw akumulator 2) obecną wartość Opcjonalnie: 3) obecny indeks 4) źródłową tablicę na której, reduce jest stosowane Funkcja wywołania zwrotnego przyjmuje np. 2 argumenty - element tablicy oraz aktualną wartość akumulatora i zwraca wartość, która zostanie przypisana do akumulatora i będzie jako taki użyty w kolejnej iteracji. Redukuję tablicę do pojedynczej wartości :::tablica NIE ulega modyfikacji::: Wyliczanie sumy tablicy (dla każdego elementu dodaj go do akumulatora, który przyjmuje wartość poprzedniej iteracji, akumulator zaczyna od 0) let arr = [ 2 , 3 , 5 , 7 ] arr . reduce (( accumulator , element ) => accumulator + element , 0 ) // 17 // inny zapis arr . reduce ( function ( acc , element ) { return acc + element }, 0 ) // warto ść pocz ą tkowa akumulatora Wyliczanie średniej tablicy let arr = [ 1 , 2 , 3 ] const arrAvg = arr = arr . reduce (( a , b ) => a + b , 0 ) / arr . length // ES6 let arr = [ 1 , 2 , 3 ] function arrAvg ( arr ) { let sum = arr . reduce ( function ( acc , element ) { return acc + element }, 0 ) ; return sum / arr . length } console . log ( arrAvg ( arr )) See the Pen tablice-metody by Mikołaj Kostyrko ( @mkostyrko ) on CodePen . Ćwiczenia: https://launchschool.com/books/javascript/read/arrays#exercises Źródła: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array http://kursjs.pl/kurs/super-podstawy/tablice.php https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Array/from# https://launchschool.com/books/javascript/read/arrays#exercises https://alligator.io/js/filter-array-method/ https://www.freecodecamp.org/forum/t/arr-sort-a-b-a-b-explanation/167677 https://stackoverflow.com/questions/10359907/how-to-compute-the-sum-and-average-of-elements-in-an-array","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-tablice-metody.html","loc":"https://kostyrko.github.io/zfrontu/js-tablice-metody.html"},{"title":"JavaScript - tablice (obiekt array)","text":"Tablica (array) jest uporządkowaną listą zawierająca elementy, gdzie każdy z elementów ma dowolną wartość (są heterogeniczne). Tablica jest definiowana poprzez umieszczenie wartości pomiędzy kwadratowymi nawiasami (literałami tablicy), które nazywają się jej elementami. let Arr = []; // pusta tablica let arr = [ \"Mikolaj\" , 2020 , \"kwiecień\" , 17 . 04 ]; Zadeklarowanie tablicy słowem kluczowym const pozwala na modyfikację jej zawartości ale nie na zmianę miejsca, w którym jest ona przechowywana. W przypadku użycia słowa kluczowego let istnieje możliwość nadpisania tablicy Każdemu elementowi przyporządkowana jest liczba indeksowa, pozwalająca na odwołanie się do niego. Tablica może zawierać również obiekty jak i tablice. arr [ 0 ] > Mikolaj Właściwość length zwraca \"długość\" tablicy arr . length > 4 Aby odwołać się do ostatniego elementu należy zastosować length - 1 arr [ arr . length - 1 ] > 17 . 04 Zmiana elementów Przy wykorzystaniu operator składającego się z kwadratowych nawiasów [] oraz wpisanego w nie indeksu można zmieniać wybrany element tablicy arr [ 2 ] = \"maj\" [ \"Mikolaj\" , 2020 , \"maj\" , 17 . 04 ] \"Długość\" tablicy Wykorzystując właściwość length można również dodać element do końca tablicy arr [ arr . length ] = \"ostatnia\" > arr = [ \"Mikolaj\" , 2020 , \"kwiecień\" , 17 . 04 . \"ostatnia\" ] Undefined Jeśli dana tablica nie zawiera elementu pod indeksem do którego się odwołujemy wówczas zwraca undefined let arr = [ \"Mikolaj\" , 2020 , \"kwiecień\" , 17 . 04 ]; console . log ( arr [ 4 ]) > undefined Źródła: https://www.youtube.com/watch?v=8FmBEN0XZyI http://kursjs.pl/kurs/super-podstawy/tablice.php https://launchschool.com/books/javascript/read/arrays#whatisanarray","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-tablice.html","loc":"https://kostyrko.github.io/zfrontu/js-tablice.html"},{"title":"JavaScript - metody liczb","text":"Typ liczbowy (Numbers) posiada przypisane sobie metody - poniżej przedstawiona została część z nich toString() - dokonuje konwersji na string ( 100 + 20 ). toString (); // '120' - zwraca sumę toFixed() - pozwala na określenie ilości znajków liczbowych po kropce const x = 9 . 656 ; x . toFixed ( 0 ); // 10 x . toFixed ( 2 ); // 9 . 66 x . toFixed ( 4 ); // 9 . 6560 toPrecision() - określa ilość znaków w wyrażeniu (łącznie) const x = 9 . 656 ; x . toPrecision (); // 9 . 656 x . toPrecision ( 2 ); // 9 . 7 x . toPrecision ( 4 ); // 9 . 656 MAX_VALUE / MIN_VALUE - zwraca największą/najmniejszą możliwą liczbę const x = Number . Number . MAX_VALUE / MIN_VALUE parseInt() / parseFloat() - zmienia string w integer/float parseInt ( '123.32' ) // 123 parseFloat ( '123.32' ) // 123 . 32 Źródła: https://www.w3schools.com/js/js_number_methods.asp","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-metody-liczb.html","loc":"https://kostyrko.github.io/zfrontu/js-metody-liczb.html"},{"title":"JavaScript - właściwości i metody łańcucha znaków","text":"Jedną z podstawowych i często stosowanych właściwości stringów jest length który zwraca długość łańcucha znaków const fu = \"bar\" console . log ( fu . length ) >> 3 Metod, które można zastosować wobec stringów jest o wiele więcej - poniżej przedstawię tylko część z nich. Wszystkie metody łańcucha zwracają nową wartość nie zmieniając oryginalnej charAt() - zwraca znak znajdujący się na wskazanym indeksie let droid = 'r2d2' droid . charAt ( 2 ) // d concat() - łączy ze sobą ciągi znaków, pozwala na wprowadzenie więcej niż jednego argumentu let droid = 'r2d2' droid = droid . concat ( '&' , 'c3po' ) droid // r2d2 & c3po endsWith() - sprawdza czy ciąg znaków kończy się wskazanym znakiem includes() - sprawdza czy ciąg znaków zawiera wskazany znak // zwraca true albo flase indexOf() - zwraca pozycję indeksową (pierwszego) wskazanego znaku let droid = 'r2d2' droid [ 2 ] // d droid . indexOf ( 'r' ) // 0 lastIndexOf() - zwraca pozycję indeksową (ostatniego) wskazanego znaku droid . lastIndexOf ( '2' ) // 3 match() - sprawdza ciąg znaków w poszukiwaniu wskazanego wyrażenia repeat() - zwraca ciąg znaków który jest wielokrotnym powtórzeniem danego ciągu replace() - przeszukuje ciąg znaków w poszukiwaniu znaku lub wyrażenia i zwraca nowy string gdzie wskazany wcześniej ciąg lub znak jest zmieniony let str = \"Visit Microsoft!\" ; res = str . replace ( \"Microsoft\" , \"W3Schools\" ); >> str = \"Visit W3Schools!\" ; search() - przeszukuje ciąg znaków w poszukiwaniu znaku lub wyrażenia i zwraca ich indeks split() - tnie łańcuch znaków i tworzy z niego tablicę (jako argument przyjmuje separator) let droid = 'r2d2, c3po' console . log ( droid . split ( \",\" )) // [ \"r2d2\" , \" c3po\" ] slice() - wyciąga część łańcucha znaków i zwraca nowy na tej podstawie / przyjmuje również liczbę ujemną (zaczyna od końca) let droid = 'r2d2' console . log ( droid . substring ( - 3 , 3 )) // 2 d substring() - przyjmuje dwa argumenty (indeks - 1. łącznie, 2. wyłącznie) i zwraca części łańcucha zawarte pomiędzy nimi let droid = 'r2d2' console . log ( droid . substring ( 1 , 3 )) // 2 d toLowerCase() / toUpperCase() - zwraca łańcuch zmieniając wszystkie litery na małe/duże trim() - pozbywa się spacji z końca i początku łańcucha znaków Źródła: https://www.w3schools.com/jsref/jsref_obj_string.asp","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-metody-lancucha-znakow.html","loc":"https://kostyrko.github.io/zfrontu/js-metody-lancucha-znakow.html"},{"title":"JavaScript - konwersja/translacja pomiędzy numbers i string","text":"W przy pomocy metod istnieje możliwość wymuszenia konwersji różnego typu danych (boolean, string, numbers) W ten sposób można przekształcić boolean lub number w string Konwersja na string String() , x.toString() String ( 123 ) // '123' String ( - 12 . 3 ) // '-12.3' String ( null ) // 'null' String ( undefined ) // 'undefined' String ( true ) // 'true' String ( false ) // 'false' x = 50 x . toString () // '50' ( 123 ). toString () null . toString () // Cannot read property 'toString' of null false . toString () // 'false' String ( true ) // 'true' String ( Date ()) // \"Wed Apr 29 2020 11:49:20 GMT+0200 (Central European Summer Time)\" Date (). toString () // \"Wed Apr 29 2020 11:49:20 GMT+0200 (Central European Summer Time)\" W ten sposób można przekształcić boolean lub string w number -> Number(), parseInt(), parseFloat() Number ( null ) // 0 Number ( undefined ) // NaN Number ( true ) // 1 Number ( false ) // 0 Number ( \" 12 \" ) // 12 Number ( \"-12.34\" ) // - 12 . 34 Number ( \"\\n\" ) // 0 Number ( \" 12s \" ) // NaN Number ( 123 ) // 123 Number ( \"\" ) // 0 Number ( \"99 88\" ) // NaN Number ( new Date ( \"2020-09-30\" )); // 1601424000000 Zmienia string w integer parseInt ( '123.32' ) // 123 Zmienia string w float parseFloat ( '123.32' ) // 123 . 32 Pozwala na łączenie z metodami liczb Number ( '154.223' ). toPrecision ( 4 ) // 154 . 2 W ten sposób można przekształcić boolean do stringu w number Boolean() Boolean ( '' ) // false Boolean ( 0 ) // false Boolean ( - 0 ) // false Boolean ( NaN ) // false Boolean ( null ) // false Boolean ( undefined ) // false Boolean ( false ) // false Domniemane (automatyczne) wymuszanie typów Tak zwane domniemane wymuszenie typów (type coersion) jest procesem konwersji danych z jednego typu na inny bezpośrednio przez JS - to może dokonać się zarówno na typach prymitywnych jak i obiektach. Do takiego wymuszenia zachodzi wówczas gdy dokonujemy porównania danych bez sprawdzenia ich typu zatem zastosowanie == zamiast === 'true' == true // true true ' === true // false 12 / \"6\" // 2 12 > \"6\" // true 12 < \"6\" // false Do wymuszenia może dojść również w trakcie podjęcia próby sumowania różnego typu danych x = 5 x + 5 // 10 '5' + 5 // 10 'five' + 5 // five5 true + 5 // 6 ( ponieważ => true = 1 ) false + 5 // 5 ( ponieważ => false = 0 ) true + true // 2 W przypadku obiektów [ 1 , 2 , 3 ] == [ 1 , 2 , 3 ] // false ( zmiana nie jest wymuszana , ale sprawdzana jest instancja a nie zawartość ) [ 'x' ] == 'x' // true Źródła: https://www.w3schools.com/js/js_type_conversion.asp https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-konwersja-typow.html","loc":"https://kostyrko.github.io/zfrontu/js-konwersja-typow.html"},{"title":"JavaScript - kontrola przepływu (if...else/switch/operator warunkowy)","text":"Polecenie if...else pozwala na kontrolę przepływu kodu -> gdy pewien warunek jest spełniony ( if ) kod jest wykonywany a jeśli nie to może sprawdzić kolejny warunek ( else if ) lub wykonać określony kod ( else ) if ( warunek ) { kod do wywo ł ania je ś li warunek spe ł niony } else if ( inny warunek ) { kod do wywo ł ania je ś li warunek spe ł niony } else { kod do wywo ł ania je ś li ż aden z powy ż szych warunk ó w nie jest spe ł niony } if ( time < 10 ) { greeting = \" Good morning \" ; } else if ( time < 20 ) { greeting = \" Good day \" ; } else { greeting = \" Good evening \" ; } :::w JS - nie zawsze wymagane jest stosowanie polecania else i samo if jest czasem wystarczające np. jeśli sprawdzamy pewien warunek w pętli, wówczas w domyśle continue ::: if ( hour < 18 ) { greeting = \" Good day \" ; } if ( typeof droid !== ' undefined ' ) { console log ( ` this is ${ droid }` ) } else { console . log ( ' droid variable was not defined ' ) } Operator warunkowy/ Ternary operator W przypadku prostej kontroli przepływu opierającej się na sprawdzaniu dwóch warunków można oprzeć się na operatorze warunkowym Gdzie po spisaniu warunku stawia się znak zapytania a następnie rozdziela się wyrażenie1 od wyrażenie2 dwukropkiem warunek ? wyra ż enie1 : wyra ż enie2 Przyk ł ad 1 : let time = 11 time < 10 ? greeting = \" Good morning \" : greeting = \" Good day \" console . log ( greeting ) >> Good day Przyk ł ad 2 : // je ś li w tablicy nic nie ma zwr óć null w przeciwnym wypadku wykonaj na tablicy metod ę reduce ... return newArr . length === 0 ? null : newArr . reduce (( acc , elem ) => acc + elem , 0 ) ; Switch Polecenie if jest używane wówczas gdy należy wywołać określony kod przy zaistnieniu odpowiednich warunków switch ( wyra ż enie_zwracaj ą ce_warunek ) { case warunek1 : kod1 ; break ; case warunek2 : kod2 ; break ; default : je ś li powy ż sze nie s ą spe ł nione } switch ( new Date () . getDay ()) { default : text = \" Looking forward to the Weekend \" ; break ; case 6 : text = \" Today is Saturday \" ; break ; case 0 : text = \" Today is Sunday \" ; } Źródła: https://codeburst.io/javascript-the-conditional-ternary-operator-explained-cac7218beeff https://www.w3schools.com/js/js_if_else.asp https://pl.wikipedia.org/wiki/Operator_warunkowy","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-kontorla-przeplywu.html","loc":"https://kostyrko.github.io/zfrontu/js-kontorla-przeplywu.html"},{"title":"JavaScript - składnia, deklaracje i podstawowe typy danych oraz ich operatory","text":"W JavaScript istnieją dwa typy danych - proste/prymitywne i referencyjne, poniżej zostaną przedstawione te pierwsze. Typy referencyjne przechowywane są w pamięci podręcznej a zmienna jest do nich referencją. Postawy i deklaracje w JS instrukcje nazywane są wyrażeniami i rozdzielone są średnikiem ; składnia komentarza // jednoliniowy */ wielo - liniowy */ Istnieją trzy typy deklaracji zmiennych const - podstawowa deklaracja, nie ulega zmianie, tylko do odczytu let - deklaracja stosowana w przypadku gdy zmienna będzie musiała ulec zmianie, jest lokalna i ograniczona do bloku, w którym jest zawarta var - wcześniej podstawowa zmienna (przed ES6), obecnie rzadziej stosowana (po wprowadzeniu const i let) więcej na ten temat tutaj lub poniżej. var vs let -> 4 istotne różnice w: 1) zakresie (scope) 2) podnoszeniu (hoisting) 3) ponownej deklaracji (redeclaration) 4) tworzeniu globalnego obiektu (global object property) let w odróżnieniu od var nie jest globalnie dostępny a przypisany do najbliższych funkcji etc. jest dostępny w sposób skryptowy (linia po linii, podobnie jak w pythonie), wartość mu przypisana może być zmieniona ale nie może zostać ponownie zadeklarowany, nie tworzy globalnie dostępnego obiektu. słowo kluczowe Zakres Windowanie Czy może być jej ponownie przypisana wartość Czy może być ponownie zadeklarowana? var Zakres funkcji Tak Tak Tak let Zakres bloku \"nie\" Tak nie const Zakres bloku \"nie\" nie nie więcej na ten temat tutaj Hoisting - \"przenoszenie\" zmiennych na sam początek kodu, do globalnego zasięgu lub zasięgu funkcji ( więcej tutaj na ten temat ) Windowanie w przypadku let i const odbywa się, ale nie są one osiągalne do momentu, w którym ich deklaracja jest zewaluowana w trakcie uruchamiania programu (więcej na ten temat tutaj ) deklaracji dokonujemy poprzez użycie słowa kluczowego (let, const) + identyfikator (nazwy zmiennej np. foo lub fu etc.), oraz poprzez opcjonalne przypisanie jej wartości (np. 'bar') let fu = \"bar\" zmienne nie mogą zaczynać się od cyfr wielkość liter na znaczenie fu to nie to samo co Fu nazwa zmiennej nie może zawierać spacji, myślników, kropek - stosowany natomiast jest podkreślnik np. _fu nazwa zmiennej nie może być słowem kluczowym Podstawowe typy danych Do podstawowych (tzw. prymitywnych) typów danych wykorzystywanych w JS zaliczyć można: string - ciągi znaków tzw łańcuchowy (np. \"ab2c ala\" - wymaga cudzysłowu lub apostrofu) number - typ liczbowy (np. 123 - brak cudzysłowu) undefined - typ specjalny, niezainicjowana zmienna/nieistniejąca właściwość obiektu null - type specjalny, określa pustą wartość (wykorzystywany przy obiektach) boolean - typ logiczny (Prawda/Fałsz - True/False) Typ łańcuchowy Operator + pozwala na dodanie treści do zadeklarowanego wcześniej łańcucha znaków let droid = 'r2d2' droid += '&c3po' droid // r2d2 & c3po Można uzyskać wybrany znak z łańcuch po indeksie let droid = 'r2d2' droid [ 2 ] // d droid . indexOf ( 'r' ) // 0 ::: (Template literals) istnieje również możliwość włączania wartości zmiennej w ciąg łańcucha znaków poprzez zamknięcie treście w `` + zastosowaniu $ i nawiasów klamrowych - w ten sposób można wstawiać również równania( zwraca wynik), jak i funkcje etc. ::: const droid = 'r2d2' console . log ( ` to nie jest % { droid } , którego szukamy ` ) lub: console . log ( \"to nie jest\" + \" \" + droid + \" którego szukamy\" ) wynik będzie ten sam: >> ` to nie jest r2d2 , którego szukamy ` Przydatne kolokacje znaków (tzw. escaping) wykorzystanych w typie łańcuchowym \\n - nowy wiersz \\r - reset pozycji kursora i powrót na nową linię \\t - tabulacja \\ - lewy ukośnik jest również wymagany przed \\ , \" lub ` z racji tego, że są znakami specjalnymi dla JS -> np. \\\" pozwala na łączenie ze sobą ciągów znaków przy pomocy operatora + :::Napisy szablonowe - osadzenie do w ramach łańcucha zmiennej wymaga zastosowanie znaku dolara nawiasów klamrowych oraz tylniego apostrofu String ${variable} więcej na ten temat tutaj ::: const cat = \"Deedee\" console.log(`kot ${ cat } `) > kot Deedee ::: metody łańcucha znaków String.formCharCode() - \"Zwraca łańcuch znaków stworzony przez podaną sekwencję kodów Unicode.\", String.fromCodePoint() - zwraca łańcuch stworzony na podstawie specyficznej sekwencji punktów kodu, String.raw() ::: Typ liczbowy jeśli zaczyna się od zera tj traktowany jako wartość ósemkowa a od 0x jako szesnastkowa może być zapisywana wartość w notacji wykładniczej \"X.YeZ, gdzie X to część całkowita, Y część dziesiętna, natomiast Z to wykładnik potęgi liczby 10. Zapis taki oznacza to samo, co X.Y * 10Z\" ( źródło ) Przykładowe zastosowanie: 123, -123, 1.1, -1.1, 0.1E2, -0x0f pozwala na przeprowadzanie stosowanie operatorów arytmetycznych -> * + - / operator % modulo dzieli z resztą operator -- oraz ++ dokonuje dekrementacji oraz inkrementacji/ zmniejszenia lub zwiększenia wartości o 1 ( x-- lub --x tj to samo co x = x -1 ) pozwala również na stosowanie operatorów porównania (relacyjnych) np <= < > >= !== === != oraz bitowych == równy? === równy tego samego typu? !== nierówny? Typ logiczny pozwala na stosowanie operatorów logicznych && - and/i, || - or/albo, ! - not/nie typeof w przypadku niepewności jakiego typ danych przechowuje dana zmienna istniej możliwość zastosowania operatora typeof , który zwraca łańcuch zwierający typ tzw. operandu (argument operatora) schemat : typeof operand przykład1: typeof 1 >> 'number' przykład2: const robot = 'r2d2' typeof robot >> 'string' Zastosowanie z innymi typami danych: typeof [ 1 , 2 , 3 , 4 ] // \"object\" typeof { name : 'John' , age : 34 } // \"object\" typeof new Date () // \"object\" typeof function () {} // \"function\" typeof myCar // \"undefined\" Źródła: https://launchschool.com/books/javascript/read/basics#datatypes https://developer.mozilla.org/pl/docs/Web/JavaScript/Guide/Sk%C5%82adnia_i_typy http://webmaster.helion.pl/index.php/kjs-cechy-jezyka/kjs-typy-danych http://webmaster.helion.pl/index.php/kjs-cechy-jezyka/kjs-operatory/kjs-operatory-arytmeyczne http://webmaster.helion.pl/index.php/kjs-cechy-jezyka/kjs-operatory/kjs-operatory-logiczne http://kursjs.pl/kurs/super-podstawy/zmienne.php https://medium.com/@larry.sassainsworth/let-vs-var-vs-const-in-javascript-8b898f868394 https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var https://www.youtube.com/watch?v=JFDScHg6Dws","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-podstawowe-typy.html","loc":"https://kostyrko.github.io/zfrontu/js-podstawowe-typy.html"},{"title":"JavaScript - polecenia","text":"Kontroli przepływu Block break continue Empty if...else swith throw try...catch Deklaracje var const let Funkcji i klas function function* async function return class Iteracji Patrz tutaj Inne debugger export import lable Źródła: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math https://mathjs.org/","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-polecenia.html","loc":"https://kostyrko.github.io/zfrontu/js-polecenia.html"},{"title":"JavaScript - przydatne strony (darmowe kursy, wyzwania)","text":"Kursy online Nazwa główna cecha codecademy Interaktywny/Wersja darmowa i płatna freeCodeCamp Interaktywny/ Za darmo + społeczność javascript.info Oddolna inicjatywa(?), w pełni darmowe, repo dostępne na GitHub kursjs.pl Tylko wersja polska - oddolna inicjatywa :) Newslettery Nazwa główna cecha JavaScript30 Pseudonewsletter - 30 mini projektów na 30 dni bedeprogramistka.pl/ Polska odpowiedź na JavaScript30 /blog/społeczność justjavascript W trakcie tworzenia/ klarowne tłumaczenie poruszanych problemów JavaScript Weekly -- Frontend Focus -- overment PL Strony internetowe & blogi Nazwa główna cecha przeprogramowani PL overment PL Wyzwania/ Ćwiczenia Nazwa główna cecha CodeTriage Praca z faktycznymi projektami edabit Ćwiczenia oraz rozwiązania zgłaszane przez społeczność CodeWars.js do przetestowania Dokumentacja i książki Nazwa główna cecha developer.mozilla.org - JavaScript Guide Komentarz zbędny Introduction to Programming with JavaScript Książka - darmowa + ćwiczenia Eloquent JavaScript Darmowa książka w wersji elektronicznej devdocs.io/javascript/ Dokumentacja wieluuuu języków programowani, w tym JS (alfabetycznie) Speaking JavaScript Książka wydana przez o'reilly JavaScript for impatient programmers kolejna książka autorstwa A. Rauschmayer'a Aplikacje mobilne Nazwa główna cecha Enki Przetestowana i warta polecenia SoloLearn Dobra na początek, przyjemna w użytkowaniu YouTube Nazwa główna cecha JavaScript Games Projektowe uczenie oparte na grach Dev Ed JS + inne / projekty Florian Pop krótkie filmy tłumaczące podstawy JS (tablice) + newsletter Traversy Media W przystępnej i klarownej formie przedstawiony JS + udemy PL Nazwa główna cecha hello roman Warto polecenia choć chyba nie jako pierwsze a kolejne źródło overment Duży zakres informacji strona www Samuraj Programowania - Java Script w miesiąc Warto polecenia choć chyba nie jako pierwsze a kolejne źródło Dzielenie się kodem Nazwa główna cecha playcode.io dla mnie nr 1 JS Bin nr 2 CodeSandbox nr 3 codepen.io pozwala na embeding Historia Nazwa główna cecha Java a JavaScript filmy przeprogramowani oraz Dziwne, u mnie działa","tags":"javascript","url":"https://kostyrko.github.io/zfrontu/js-kursy-linki.html","loc":"https://kostyrko.github.io/zfrontu/js-kursy-linki.html"},{"title":"CSS - neumorphism","text":"Neoumorphism jest sposobem stylizacji elementów stron nawiązujący swoją estetyką znaną z środowiska różnego rodzaju smartfonów, choć w duże mierze przymina mi głównie te z nadgryzionym jabłkiem. Poprzez grę cieni ten styl stara się wywołać efekt estetycznej trójwymiarowości gdzie poszczególne elementy są wypukłe lub wklęsłe a ich kształty są obłe lub też zaokrąglone. Neoumorphism wywodzi się z skeuromorfizmu (gr. skeúos \"naczynie, przedmiot\" + morphé \"postać, kształt\") stylistyki, ktra miałą nawiązać do istniejących w świecie realnym przedmiotów. Polecam generator tego stylu do zapoznania się z tym w jaki sposób można uzyskać wyżej opisany efekt Zwróć uwagę, że również ja ten styl zastosowałem na tej stronie. Używając poniższej deklaracji wystylizowałem pasek wyszukiwania background : # f5f5f5 ; box-shadow : inset 4px 4px 4px # d0d0d0 , inset -4px -4px 4px # ffffff ; O ile styl neomorfistyczny może wydawać się miły dla oka, należy pamiętać, że nie jest on najbardziej przystępny w odbiorze dla osób z zaburzeniami wzroku - zatem należy pamiętać o stosowaniu odpowiedniego kontrastu, który znajduje się w zgodzie z wytycznymi związanymi z dostępnością/accessibility. Więcej na temat neumorphismu i dostępności Źródła: https://uxplanet.org/the-ground-breaking-possibilities-with-neumorphism-9ed9e64c2513 https://uxdesign.cc/neumorphism-in-user-interfaces-b47cef3bf3a6 https://pl.wikipedia.org/wiki/Skeumorfizm https://css-tricks.com/neumorphism-and-css/","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-neumorphism.html","loc":"https://kostyrko.github.io/zfrontu/css-neumorphism.html"},{"title":"CSS - centrowanie treści","text":"Istnieje parę sposobów na to w jaki sposób można wycentrować treść, na środku strony w taki sposób aby znajdowała na środku strony. Można to zrobić łątwo przy pomocy flexboxa, ale gdy nie chcemy zmieniać deklaracji 'rodzeństwa' (rodzica) danego elementu wówczas nie będzie to możliwe. Bez jakiejkolwiek ingerencji w deklaracje przypisaną do rodzica możemy skorzystać z pomocy marginesów oraz jednostek relatywnych np. .centered_text { margin-top: -50 px ; // powinna być połowa wysokości obiektu margin-left: -100 px ; // połowa szerokości obiektu margin-top: 50 vw ; margin-lef: 50 vw ; } lub można również wykorzystać pozycjonować przy pomocy absolute . centered_text { position : absolutne ; top : 50 vh ; // ew. 50% jeśli do rodzica left : 50 vw ; // ew. 50% jeśli do rodzica transform : translate ( - 50 % , - 50 % ) ; // zmień pozycję o połowę rozmiaru wysokość i szerokość } W obu przypadkach wymagana jest transformacja pozycjonowanego elementu w taki sposób aby znajdował się on na środku ponieważ powyższymi deklaracjami wskazujemy na lewy górny róg danego elementu - stąd należy od odpowiednio wyrównać aby znalazł się na środku a nie był przesunięty w prawo i w dół o własną wysokość i szerokość. Być może lepszy rozwiązaniem jest zatem ustawienie marginesu na auto i jedynie kontrola marginesu od góry: .centered_text { margin: auto ; margin-top: 50% ; } Źródło: https://www.w3schools.com/css/css_align.asp https://www.freecodecamp.org/news/how-to-center-things-with-style-in-css-dc87b7542689/","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-centrowanie-tresci.html","loc":"https://kostyrko.github.io/zfrontu/css-centrowanie-tresci.html"},{"title":"CSS - wyśrodkowany układ strony","text":"Jednym popularniejszych obecnie stosowanych układów stron internetowych jest oparty na wyśrodkowanej treści - dzięki temu treść strony nie rozjeżdża się na boki przy większych ekranach. Taki układ można łatwo osiągnąć przy użyciu flexboxa , odpowiednio zagnieżdżonego div 'a oraz przypisanej mu klasy określającej jego szerokość Przyjmę, że będziemy operować na 3 częściach -> Headerze - gdzie potencjalnie można znajdować się nawigacja, Main - zawiera główną zawartość strony, oraz Footer - gdzie znajdować się mogą informacje kontaktowe. Dalsze komentarze znajdują się kodzie zamieszczonym poniżej index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"stylesheet\" href = \"style.css\" > < title > Centralized layout </ title > </ head > < body > <!-- zajmuje 100% body (a body 100vw i wh) --> < header > <!-- zajmuje tyle szerokości ile zdefiniowane przez css --> < div class = \"container\" > < p class = \"header-text text\" > Top within header and container div </ p > </ div > </ header > < main > < div class = \"container\" > < p class = \"main-text text\" > Main within main and container div 1 </ p > < p class = \"main-text text\" > Main within main and container div 2 </ p > < p class = \"main-text text\" > Main within main and container div 3 </ p > </ div > </ main > < footer > < div class = \"container\" > < p class = \"footer-text text\" > Bottom within header and container div </ p > </ div > </ footer > </ body > </ html > style.css /* importowanie fontów */ @import url ( 'https://fonts.googleapis.com/css2?family=Baloo+Thambi+2:wght@500&family=Indie+Flower&family=Shadows+Into+Light&display=swap' ); /* reset */ * { padding : 0 ; margin : 0 ; } html { font - size : 1.5 rem ; } /* kontener zawierający wyśrodkowaną treść */ . container { width : 60 % ; min - width : 200 px ; background - color : white ; border : 2 px solid rgb ( 10 , 10 , 10 ); margin : 5 px 0 5 px 0 ; /* wyśrodkowanie zawartości kontenera */ display : flex ; align - items : center ; justify - content : space - evenly ; flex - wrap : wrap ; } /* header wyśrodkowujący kontener */ header { display : flex ; justify - content : center ; background : green ; border - bottom : 1 px solid ; height : 10 vh ; } /* mian wyśrodkowujący kontener */ main { display : flex ; justify - content : center ; background - color : blue ; height : 80 vh ; } /* footer wyśrodkowujący kontener */ footer { display : flex ; justify - content : center ; background - color : orange ; border - top : 1 px solid ; height : 10 vh ; } . text { font - family : 'Indie Flower' , cursive ; border : 1 px dashed ; background - color : rgb ( 255 , 115 , 0 ); width : 65 % ; text - align : center ; } /* . header - text lub */ header . text { font - family : 'Baloo Thambi 2' , cursive ; height : 60 % ; } . main - text { width : 250 px ; height : 25 % ; } . footer - text { font - family : 'Shadows Into Light' , cursive ; } . main - text : first - of - type { background - color : chartreuse ; } . main - text : nth - of - type ( 2 ) { background - color : yellow ; } . main - text : last - of - type { color : white ; background - color : black ; } Efekt można obejrzeć tutaj See the Pen easy_centered_layout_example by Mikołaj Kostyrko ( @mkostyrko ) on CodePen .","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-wysrodkowany-uklad-strony.html","loc":"https://kostyrko.github.io/zfrontu/css-wysrodkowany-uklad-strony.html"},{"title":"CSS - Responsive Web Design","text":"RWD - treść stara dopasować sie do wyświetlacza alternatywnie istnieje jeszcze... ADW - Adaptive Web Design -> desing w którym na sztywno tworzy się szerokość strony przypisaną do przedziałów szerokości ekranu (np. 600, 900, 1200px). To pod tą ograniczoną ilości szerokości tworzony jest layout, a ten jest wyświetlana dla zdefiniowanych przedziałów szerokości ekranu. Relatywne jednostki rem - root element odwołuje się do roota, warto wówczas zdefiniować wysokość w html - domyślnie wynosi 16px html { font-size : 20 px ; } Reszta w rem i html zmieniać w zależności od wielkości ekranu em - odnosi się do rodzica, ale w przypadku rozmiaru fontu inne wartości em odwołają się do bieżącej wartości em danego elementu % - może odwoływać się do różnych wartości, w przypadku szerokości będzie odwoływać się procentowo do rodzica. Ta sama zasada odwołuje się do wielkości fontu, jednak w przypadku wysokości obiektu wówczas będzie odwoływać się do wielkości fontu danego obiektu. p { font-size : 10 % ; line-height : 120 % ; // 12px } vh - view hight -> przyjmuje wysokość wyświetlacza vw - view width -> przyjmuje szerokość wyświetlacza 1vmin = 1% (przyjmie tą wartość która jest mniejsza) 1vmax = 1wv (przyjmie wartość większą) @media queries - zapytanie o media (ekran) Ustawienia w html tagu meta w head oraz zdefiniowanie content na width=device-width oznacza, to że treść dopasuje się do szerokości ekranu, na którym dana strona jest przeglądana < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> Zapytanie o wielkość ekranu osoby korzystającej ze strony poprzedzone jest słowem kluczowym @media następnie należy zapisać warunek oraz przypisać konkretne deklaracje do selektorów wskazujące na zachowanie się układu strony w momencie gdy warunek zostanie spełniony Częścią warunku/reguły może być jedno ze słów kluczowych odwołujących się do urządzenie lub ekranu tv (telewizor), screen (ekran), all (wszystkie), print (drukarki), speech (urządzenia czytające), viewport (ekran/domyślnie) lub inne odwołujące się do jego orientacji pionowej ( portrait ) lub poziomej ( landscape ) orientation = portrait orientation = landscape Operatory and/,(or)/not/only Operator Znaczenie and oba warunki muszą być spełnione or przy pomocy przecinka , not - spełniony jeśli jest negatywny only tylko dla Atrybuty Atrybut Cecha min-width minimalna szerokość, od której obowiązują deklaracje mix-width maksymalna szerokość min-height minimalna wysokość max-height maksymalna wysokość Przykładowe zastosowanie: @media ( min - width : 1024 px ) { aside { width : 16 vw ; } } Łączenie przy pomocy operator and @ media ( min-width : 768px ) and ( max-width : 1024px ) { main { width : 80 vw ; /* left: 25vw; */ } aside { width : 20 vw ; } aside div { padding : 25 px 2 px ; } } Użycie operatora only oraz wskazanie na jedynie ekrany @media only screen and ( max - width : 600 px ) { body { background - color : gray ; } } Punkty graniczne -> break points Punkty, w których zmienia się układ strony dla których należy stworzyć kolejne zapytani Klasyczne punkty graniczne max-width: 600px (smartfon), 768px (tablet), 992px/1024px(tablet poziomo, małe i starsze laptopy), 1200px(większe ekrany) CSS Deklaracje dla poszczególnych szerokości ekranu można przechowywać w osobnych plikach css wówczas należy również dodać właściwość media i wpisanie odpowiedniego warunku w tagu link a następnie przypisać mu konkretny css < link rel = \"stylesheet\" media = \"(min-width: 640px)\" href = \"min-640px.css\" > @media queries w Sass Można warunki wpisać do zmiennej a następnie je interpolować lub stworzenie mixina, który zastępuje media-query (@content) @mixin tablet - up { @media only screen ( min - width : 768 px ) { @content ; } } Źródła: https://css-tricks.com/viewport-sized-typography/ https://generatedcontent.org/post/21279324555/viewportunits https://developers.google.com/web/fundamentals/design-and-ux/responsive?hl=pl http://blog.kamilbrenk.pl/meta-tag-viewport-kiedy-i-jak-uzywac/ https://getflywheel.com/layout/css-breakpoints-responsive-design-how-to/#:~:text=CSS%20breakpoints%20are%20points%20where,adapts%20to%20the%20screen%20size. https://www.w3schools.com/howto/howto_css_media_query_breakpoints.asp Pełna lista zapytań zw. z ekranem https://www.w3schools.com/cssref/css3_pr_mediaquery.asp","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-rwd.html","loc":"https://kostyrko.github.io/zfrontu/css-rwd.html"},{"title":"CSS - reset i normalizer","text":"Reset Każda z przeglądarek ma swoje domyślne style, celem reset u jest ich wyzbycie się i doprowadzenie do sytuacji, w której zadeklarowane style własne spowodują, możliwie jak najbliższe sobie zachowanie w różnego typu wyszukiwarkach internetowych. Normalizer zaczyna się od gwiazdki * wyznaczając, że deklaracja odnosi się do wszystkich elementów. Tu często również wskazuje się na rozmiar box-sizingu. * { margin : 0 ; padding : 0 ; box-sizing : border-box } Reset można również pobrać już gotowy i podlinkować go w html do tego celu można np. pobrać go z tego repo Normalizer Jest opisywany jako alternatywa dla reset u faktycznie jednak, nie ma on na celu \"wyzerowania\" podstawowych styli a nadania nowych lub też nadpisania jednych innymi, takimi które ułatwią tworzenie deklaracji dla strony. Przykładowo domyślna wielkość fontu to 16px co nie ułatwia pracy korzystając z wartością rem ('root' em - element) i dlatego być może warto zadeklarować na początku jego wielkość na 10px. Normalizer jest również swoistego rodzaju komentarzem do dalej pojawiających się deklaracji. Normalizer zadeklarowałbym jako element należący do html. Przykłąd: html { font-size: 10px; } również można podlinkować do html w postaci np. linku znajdującego się tutaj Bonus - sposób oraz narzędzia na \"wrysowanie\" granic poszczególnych elementów Wtyczki (Chrome/Chromium): Layout Debugger Toggle Debug CSS Outliner CSS Dodać do style.css * { outline : 1 px solid red ; } Źródło: https://meyerweb.com/eric/tools/css/reset/ https://stackoverflow.com/questions/6928492/what-can-i-use-to-outline-html-elements-with-visible-padding-margin-and-border/24151270#24151270 https://css-tricks.com/modern-normalize/ http://nicolasgallagher.com/about-normalize-css/ https://github.com/sindresorhus/modern-normalize https://medium.com/@elad/normalize-css-or-css-reset-9d75175c5d1e","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-reset-normalizer.html","loc":"https://kostyrko.github.io/zfrontu/css-reset-normalizer.html"},{"title":"CSS - rysowanie poligonów (clip-path: polygon())","text":"Deklaracja clip-path: z przypisaną wartością polygon() pozwala na rysowanie poligonów o dowolnych kształtach. W ramach niej wpisane są pary procentów oddzielone przecinkami określającymi miejsce znajdowanie się węzła. 0% 0% - górny lewy róg 100% 0% - górny prawy róg 0% 100% - dolny lewy róg 100% 100% - dolny prawy róg zatem: 50% 0 - środek górnej granicy 50% 100% - środek dolnej granicy 0% 65% - 65% licząc od góry lewej krawędzi Poniżej znajdziesz również link do on-linowego generatora poligonów, z którego można skopiować css Przykładowa zawartość klasy style.css header { background-color : red ; text-align : center ; clip-path : polygon ( 50 % 0 % , 100 % 0 , 100 % 65 % , 50 % 100 % , 0 65 % , 0 0 ); Tutaj jak wygląda to w praktyce: See the Pen clip-path: poligon() by Mikołaj Kostyrko ( @mkostyrko ) on CodePen . Przy pomocy narzędzi deweloperskich FireFox lub Chrome można również manipulować ręcznie wartościami tak jak to jest przedstawione na poniższym filmie: Zobacz 30 sekund tego filmu, żeby się przekonać jakie to proste: Generator poligonów http://www.cssplant.com/clip-path-generator Inne dopuszczalne wartości oraz ich funkcje circle() - tworzy koło/wartość wpisywana w pikselach ellipse() - twrzoy elipeś/piksele inset() - wcięcie lub też wycięcie obiektu wewnątrz/procenty inset-rectangle() - podobnie jak inset Źródło: https://youtu.be/rXuHGLzSmSE?t=276 https://developer.mozilla.org/en-US/docs/Web/CSS/clip-pat","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-clip-path.html","loc":"https://kostyrko.github.io/zfrontu/css-clip-path.html"},{"title":"CSS - calc()","text":"Właściwość calc() jest funkcją której mogą być przypisane wartości: length , angles , time , number , integer . Jest szczególnie przydatna w obliczaniu wartości relatywnych - ponieważ: pozwala na wykonywanie matematycznych wyrażeń dodawania, odejmowania, mnożenia, dzielenia ( + , - , * , / )i wykorzystuje wynik jako wartość CSS, która przyjmuje wcześniej wspomniane wartości. Przykładowe zastosowanie 50% rodzica dzielone przez 3 el { width : calc ( 100 % - 50 % / 3 ); } 10% rodzica + dodatkowe 10px . el { margin-left : calc ( 10 % + 10 px ); } Źródło i polecane linki: https://tympanus.net/codrops/css_reference/calc/ Pełen spis referencji CSS https://www.w3schools.com/cssref/default.asp","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-calc.html","loc":"https://kostyrko.github.io/zfrontu/css-calc.html"},{"title":"CSS:pseudo-klasy","text":"Pseudo klasy pozwalają na wprowadzenie interaktywnego zachowania się strony przy pomocy CSS, przy pomocy tej deklaracji w zależności od zdefiniowanej sytuacji/stanu dany obiekt może przyjąć inny wygląd. Istotne jest to że deklaracja pseudoklasy poprzedzona jest dwukropkiem : Przykładowy schemat zastosowania selektor : pseudoklasa { właściwość : wartość ; } W przypadku linków istniejącą pseudoklasy a:visited - link, który został już użyty a:link - zmienia wygląd odsyłacza Pseudoklasy akcji :hover - obiekt nad którym znajduje się kursor myszy :focused - obiekt na którym jest focus (właściwość przypisana dla klawiatury) :active - obiekt link/używany Przykładowe zastosowanie button : hover { color : blue ; } Pseudoklasa dotycząca przycisku button:disabled - zablokowanie przycisku Pseudoklasa dotycząca checkboxa input[type=\"checkbox\"]:checked - zaznaczenie checkboxa Ta pseudo klasa często może być wykorzystana również w celu dodanie jakiegoś rodzaju funkcjonalności do strony - np. poprzez ustawienie deklaracji display oraz nadanie jej odpowiedniej wartości w momencie gdy checked = true . Należy pamiętać wówczas o dwóch ważnych warunkach: 1) checkbox musi znajdować się na poziomie wyżej niż obiekt, na który planujemy mieć wpływ 2) zależność należy oznaczyć znakiem \"poprzedzony\" -> ~ CSS # theme-checkbox : checked ~ article { background-color : var ( -- gray - darker ); } Pseudoklasy strukturalne :first-child - wskazanie pierwszego dziecka :last-child - wskazanie ostatniego dziecka :nth-child() - wskazanie wybranego dziecka - w nawias wpisuje się liczbę przypisaną dla danego dziecka :nth-of-type() - n-te element określonego typu :nth-last-of-type() - n-ty element określonego typu licząc od ostatniego dziecka :nth-last-child() - każdy element który jest n-tym dzieckiem licząc od ostatniego dziecka :only-child - każdy element który jest jedynym dzieckiem swojego rodzica :first-of-type - pierwszy określonego typu :last-of-type - ostatni element określonego typu :only-of-type - jedyny element określonego typu / lub ten który nie posiada rodzeństwa określonego typu Przykładowe zastosowanie Jedyne dziecko p : only - child { color : red ; } p : nth - last - child ( 2 ) { color : red ; } /* ostatni element listy li */ li : nth - last - of - type ( 2 ) { background : red ; } Źródło i polecane linki: https://the-awwwesomes.gitbooks.io/html-css-step-by-step/content/pl/appendix/clean-code/index.html http://www.kurshtml.edu.pl/css/co_to_sa_pseudoklasy,pseudoklasy.html https://css-tricks.com/pseudo-class-selectors/ https://www.w3schools.com/css/css_pseudo_classes.asp https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-pseudo-klasy.html","loc":"https://kostyrko.github.io/zfrontu/css-pseudo-klasy.html"},{"title":"CSS::pseudo-elementy","text":"Pseudo elementy pozwalają na zadeklarowanie wyglądu odmiennego dla wybranego fragmentu tekstu lub wstawienie z pozycji CSS dodatkowego elementu. Pseudo elementy poprzedzone są podwójnym dwukropkiem :: np. ::first-line Wzór zastosowania (za developer.mozzilla.org ) selector :: pseudo-element { property : value ; } selektor :: pseudo-element { właściwość : wartość ; } Innymi słowy pseudoelement jest słowem kluczowym, które w połączeniu z wybranym selektorem pozwala na stylowanie wybranej części wybranego elementu. stylowanie pierszej litery lub linii wstawianie nowego elementu (np. obrazu) Przykładowe zastosowanie p :: first-line { color : blue ; text-transform : uppercase ; } ::first-line - pozwala na zadeklarowanie konkretnych cech dla pierwszej linii wybranego tekstu [na marginesie przykładowo do identacji tekstu nie trzeba stosować pseudo-elementów, wystarczy np text-indent ] Do pseudo-selektorów można dodać odpowiednio np. - font , color , word-spacing , background , text-decoration , line-height ::first-letter - zadeklarowanie konkretnej cechy dla pierwszej litery ::after - reprezentuje ostatnie dziecko wybranego elementu/ podstawową właściwością jest content w ramach, której definiowana jest zawartość dodawanego elementu np. tekst lub link do obrazu Przykładowe zastosowanie dodające określony tekst po tekście zawartym w wybranym paragrafie p :: after { content : \" this text will be added after \" ; color : blue ; } . eye :: after { content : url ( ../assets/Eye.svg ); } ::before - tworzy pseudo-element, który reprezentuje pierwsze dziecko wybranego selektora HTML, posiada właściwość content analogiczną do ::after ::selection - odwołuje się do podświetlenia wybranego tekstu znajdującego się w selekcji Przykładowe zastosowanie p :: selection { background-color : red ; } ale może zawierać również: color , background-color , cursor , caret-color , outline , text-decoration , text-emphasis-color, text-shadow ::marker - pozwala na stylowanie markera listy Przykładowe zastosowanie ul li :: marker { color : red ; font-size : 150 % ; } ::placeholder - pozwala na stylowanie fragmentu formularza który przyjmuje input Przykładowe zastosowanie input :: placeholder { color : red ; font-size : 1.2 em ; font-style : italic ; } Pełna lista (łącznie z jeszcze nie w pełni wdrożonymi pseudoelementeami) znajduje się tutaj Źródło i polecane linki: https://blog.logrocket.com/a-guide-to-css-pseudo-elements/ https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements https://www.w3schools.com/css/css_pseudo_elements.asp https://css-tricks.com/almanac/selectors/a/after-and-before/ https://css-tricks.com/pseudo-element-roundup/","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-pseudo-elementy.html","loc":"https://kostyrko.github.io/zfrontu/css-pseudo-elementy.html"},{"title":"CSS - box-sizing","text":"Box-sizing Możliwe wartości do zastosowania przy tej właściwości border-box - wielkość kontenera (div) jest dokładnie taka jak wskazano - definiuje wielkość kontenera po jego granicy content-box- podstawowe, zachowanie się kontenera (div) od obszaru, w którym znajduje się jego zwartość /wskazana wartość wielkość pudełka odnosi się do jego zawartości, - oznaczo to że margines jak oraz padding będą naddane ponad wskazaną wielkość padding-box - wielkość kontenera jest zależna od paddingu , granica jest nadana Przykładowe zastosowanie div { box-sizing : border-box ; width : 100 % ; border : solid #5B6DCD 10 px ; padding : 5 px ; } Kliknij tutaj: Interaktywna aplikacja do sprawdzania wielkości boxa Źródło i polecane linki: https://www.w3schools.com/css/css3_box-sizing.asp https://www.youtube.com/watch?v=WlGQdgy-M6w https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing https://css-tricks.com/box-sizing/ https://tympanus.net/codrops/css_reference/box-sizing/","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-box-sizing.html","loc":"https://kostyrko.github.io/zfrontu/css-box-sizing.html"},{"title":"CSS - składnia selektory","text":"Schemat Lista dyrektyw selektor { właściwość - wartość właściwości ; /* razem tworzą deklarację */ } ang . rule set Selector { property : property value ; /* declaration */ } Selektor znacznika np strong Selektor klasy poprzedzony jest kropką . Selektor id poprzedzony jest haszem # Selektor id nadaje priorytet regule ważniejszy od niż ten posiadający klasę, a selektor znacznika/typu ma najmniejszy priorytet. Selektory elementów * - każdy element/ selektor uniwersalny e p - element \"p\" będący potomkiem elementu \"e\" e > p - element \"p\" będący bezpośrednim dzieckiem elementu \"e\" (wnuki i pra etc. wyłączone) e + p - element \"p\" bezpośrednio poprzedzony elementem \"e\" (rodzeństwo) e ~ p - element \"e\" poprzedzany przez element \"p\" Przykładowe zastosowanie li .taskBtn ~ .taskBtn { color: white; background-color: green; } ::: wszystkie elementy będące dzieckiem elementu li poprzedzone elementem z klasą .taskBtn ::: Selektory atrybutów e[atrybut] - element zawierający wybrany atrybut a [ target ] { background - color : yellow ; } < a href = \"http://www.wikipedia.org\" target = \"_top\" > wikipedia . org </ a > e[atrybut=\"wartość\"] - element posiadający atrybut z konkretną wartością a[target=\"_blank\"] { background-color: yellow; } <a href= \"http://www.wikipedia.org\" target= \"_top\" > wikipedia.org </a> <a href= \"http://www.w3schools.com\" target= \"_blank\" > w3schools.com </a> e[atrybut~=\"konkretna_wartość\"] - element zawierający atrybut, którego częścią jest konkretna wartość [ title ~ = \"flower\" ] { border : 5 px solid yellow ; } < img src = \"img_flwr.gif\" title = \"flower\" width = \"224\" height = \"162\" > Pełna lista Gra selektory http://flukeout.github.io/ Źródło i polecane linki: https://the-awwwesomes.gitbooks.io/html-css-step-by-step/content/pl/css-advanced-selectors/index.html https://developer.mozilla.org/pl/docs/Web/CSS/Na_pocz%C4%85tek/Selektory https://stuffandnonsense.co.uk/archives/css_specificity_wars.html https://developer.mozilla.org/pl/docs/Learn/Getting_started_with_the_web/CSS_basics","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-selektory.html","loc":"https://kostyrko.github.io/zfrontu/css-selektory.html"},{"title":"CSS - float","text":"Właściwość float wskazuje służy do pozycjonowani oraz formatowani treści wskazuje w jaki sposób element ma pływać (float) left - znajduj się po lewej stronie right - znajduj się po prawej stronie none - nie pływaj inherit Przykładowe zastosowanie img { float : right ; } Układ strony przy wykorzystaniu właściwości float Clear Właściwość clear definiuje po której stronie elementu pływające (float) elementy nie powinny się znajdować Możliwe wartości clear: none , left , right , both , initial , inherit clear - żaden z elementów pływający nie może znajdować się po lewej lub prawej stronie none - elementy pływające po obu stronach right/left - żaden z elementów pływający nie może znajdować się po lewej/prawej stronie Przykładowe zastosowanie img { float : left ; } p . clear { clear : both ; } Clearfix/Floatfix Metody na pozbycie się funkcji float u dzieci pływającego rodzica Przykładowe zastosowanie . clearfix :: after { <!-- dodaje niewidzialny element/treść --> content : \"\" ; <!-- elementy pływające po żadnej ze stron --> clear : both ; <!-- element zachowuje się jako tabela --> display : table ; } Overflow Właściwość overflow: auto wpasowuje element znajdujący się w pływającym elemencie (float) tak aby nie wystawał po za niego - metoda starsza i wychodząca obecnie z użycia Przykładowe zastosowanie .clearfix { overflow: auto ; } Źródło i polecane linki: Clear https://www.tutorialbrain.com/css_tutorial/css_clear/ Clearfix https://www.youtube.com/watch?v=2tC4PIlEz_o https://www.w3schools.com/howto/howto_css_clearfix.asp float https://www.w3schools.com/css/css_float.asp","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-float.html","loc":"https://kostyrko.github.io/zfrontu/css-float.html"},{"title":"CSS - place-items (umieść element)","text":"Deklaracja place-items (podobnie jak align-items ) odnosi się do pozycjonowania dzieci elementu, których układ jest zależny od układu Flexbox lub Grid . Deklaracja place-items jest połączeniem align-items oraz justify-items i przyjmuje podwójne wartości w odpowiadające kolejno za align-items o następnie za justify-items . Wymaga wcześniejszej deklaracji floatbox lub grid Przykładowe zastosowanie .item { display: flex ; place-items: start center ; } i odpowiada to: .item { display: grid ; align-items: start ; justify-items: center ; } W momencie kidy jedna wartość jest wskazana, wówczas przyjęta jest ona jako wspólna dla obu właściwości Przykładowe zastosowanie .item { display: flex ; place-items: start ; } i odpowiada to: .item { display: flex ; align-items: start ; justify-items: start ; } Przyjmuje wartości auto , normal, strech, start end, center, left, right, flex-start, flex-end, self-start, self-end, first-baseline, last-baseline Źródło i polecane linki: https://css-tricks.com/almanac/properties/p/place-items/ https://css-tricks.com/almanac/properties/a/align-items/","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-place-items.html","loc":"https://kostyrko.github.io/zfrontu/css-place-items.html"},{"title":"CSS - wyświetlanie blokowe, liniowe i inne","text":"Display odpowiada za sposób w jaki sposób dane elementy będą wyświetlane Właściwości deklaracji display inline - domyślna funkcja, elementy wyświetlane są w sposób liniowy / obok siebie block - elementy wyświetlane są w sposób blokowy / jeden pod drugim inline-block - charakterystyka bloku ale trzyma się linii / bloki jeden obok siebie none - chowa element (usuwa również przestrzeń przeznaczoną na element, w odróżnieniu od visibility: hidden; ) table - pozwala elementowi zachowywać się jak tabela opcjonalne podtypy min.: table-column , table-row , table-column-group , table-row-group , table-header-group , table-footer-group Źródło i polecane linki: https://www.tutorialbrain.com/css_tutorial/css_display/ https://css-tricks.com/almanac/properties/d/display/","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-wyswietlanie-display.html","loc":"https://kostyrko.github.io/zfrontu/css-wyswietlanie-display.html"},{"title":"CSS - pozycjonowanie","text":"Podstawowe właściwości position static - wartość domyślna, pozycja zgodna z układem strony relative - relatywnie do swojej domyślnej pozycji przesunięty o zdefiniowaną właściwość/wartość top , right , bottom , left Przykładowe zastosowanie div . relative { position : relative ; left : 30 px ; border : 3 px solid #73AD21 ; } fixed - pozycja relatywna do wyświetlacza (viewport) - zawsze w tym samym miejscu top , right , bottom , left absolute - pozycja relatywna do najbliższego spozycjonowanego rodzica (rodzic musi mieć zdefiniowaną właściwość position: relative/fixed ) Przykładowe zastosowanie .container { position: relative ; } .center { position: absolute ; left: 0 ; top: 50% ; width: 100% ; text-align: center ; font-size: 18 px ; } sticky - pozycja zależna od pozycji scrolla i łączy w sobie cechy relative oraz fixed . Element jest pozycjonowany w sposób relative do momentu, w którym określone kryterium (scrolla) nie jest spełnione, wówczas spełnia cechy fixed inherit - pozycja jest dziedziczona / domyślnie nie jest Przykładowe zastosowanie div . sticky { position : -webkit- sticky ; /* Safari */ position : sticky ; top : 0 ; background-color : green ; border : 2 px solid #4CAF50 ; } Bonus z-index - wskazuje na której pozycji ma się wyświetlić dany element - ma to szczególne znaczenie w kontekście obiektów które się zakrywają lub częściowo pokrywają Przykładowe zastosowanie, obiekt ustawiony na pozycję -1 będzie pod spodem img { position : absolute ; left : 0 px ; top : 0 px ; z-index : -1 ; } Źródła i polecane linki: Przykłady: https://www.w3schools.com/css/css_positioning.asp https://css-tricks.com/almanac/properties/p/position/ Opis: https://dzone.com/articles/css-position-relative-vs-position-absolute https://css-tricks.com/absolute-relative-fixed-positioining-how-do-they-differ/ https://www.tutorialbrain.com/css_tutorial/css_position/","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-pozycjonowanie.html","loc":"https://kostyrko.github.io/zfrontu/css-pozycjonowanie.html"},{"title":"Flexbox - wprowadzenie","text":"Flexbox jest technologią odpowiedzialną za układ treści znajdujących się na stronie internetowej w dosłownym tłumaczeniu można by to nazwać elastycznym modelem pudełkowym . Faktycznie ten sposób organizacji tzw layoutu lub też interfejsu oparty jest na równorzędnych kontenerach zwierających treść, które mogą być organizowane w sposób poziomy (liniowy) lub pionowy (kolumnowy) i pozwala na tworzenie prostej i czytelnej struktury strony i pozwala w relatywnie sposób na budowę responsywnego projektu strony internetowej. Stosując flexboxa możemy łatwo: Pionowe i poziome wycentrować element względem rodzica Uszeregowanie elementów by wypełniały rodzica a odległość pomiędzy nimi była równa Elementy będą automatycznie zawijane w zależności od wielkości ekranu Istotne jest to aby pamiętać, że dziecko rodzica zorganizowane w sposób flexboxowy również może być rodzicem dla własnego dziecka, którego pozycja będzie oparta na flexboxie Podstawowe deklaracje - rodzic display: flex Zdefiniowanie układu opartego o flexboxa dokonujemy poprzez deklarację display: flex i oznacza to, że dzieci danego div 'a (dzielnika/kontenera) będą zachowywały się w sposób elastyczny Przykładowe zastosowanie div { display : flex ; } Podstawą zarządzania treścią opartą na flex-boxie są dwie osie \"pozioma\" tzw. oś główna - ang. main axis oraz \"pionowa\" tzw. oś przecinające - ang. cross axis (te są zależne od zdefiniowania głównego kierunku organizacji projektu przy pomocy flex-direction z podstawowego liniowego w kolumnowy i dlatego istotne jest aby nie przywiązywać się do kierunków pionowy czy poziomy bo są one relatywne) Schemat przedstawiający ogranizację flexboxa Układ liniowy vs kolumnowy flex-direction Deklaracja dotycząca rodzica i definiująca podstawowy układ zawartych w nim elementów (flex-items/dzieci) row - układ liniowy/poziomy zaczynający się od lewej row-reverse - układ poziomy zaczynający się od prawej column - układ kolumnowy/pionowy zaczynający się od góry column-revers - układ kolumnowy/pionowy zaczynający się od dołu Przykładowe zastosowanie div { display : flex ; flex-direction : row ; } justify-content Deklaracja wyrównująca elementy wzdłuż głównej osi (main-axis) flex-start - obiekty są przyklejone do początku (start) flex-end - obiekty są przyklejone do końca (end) center - obiekty są wyśrodkowane wzdłuż linii space-between - obiekty są równo rozdystrybuowane w ramach rodzica i przyklejone do granic space-around - obiekty są równo rozdystrybuowane w ramach rodzica z taką samą odległością pomiędzy sobą jak i granicą [pierwszy obiekt ma odległość w skali 1 po lewej ale 2 po prawej ponieważ sumuje się odległość obiektu 1. i 2.] space-evenly - odległość pomiędzy każdym z elementów i granic jest równa start / end / right / left - obiekty są zależne od writing-mode i uporządkowane kolejno od początku, końca, prawa, lewa align-items Deklaracja wyrównująca elementy wzdłuż osi przecinającej (cross-axis) flex-start - elementy ułożone są przy górnej krawędzi rodzica (cross start) flex-end - elementy ułożone są przy dolnej krawędzi rodzica (cross end) center - wyśrodkowane wobec osi przecinającej stretch - wypełnia cały kontener baseline - wyśrodkowane wobec linii bazowej align-content Deklaracja wyrównująca elementy wzdłuż głównej osi (main-axis) flex-start - element spakowane są do krawędzi górnej rodzica (cross-start) flex-end - elementy spakowane są do krawędzi dolnej rodzica (cross-end) center - elementy spakowane są do środka/ wycentrowane w ramach kontenera stretch - elementy są rozciągnięte i wypełniają całą powierzchnię rodzica space-between - elementy są równo rozdystrybuowane po kontenerze z równą przestrzenią pomiędzy sobą space-around - elementy są równo rozdystrybuowane po kontenerze flex-wrap Deklaracja flex-wrap definiuje zawijanie się zawartych w rodzicu elementów. Przykładowe zastosowanie div { display : flex ; flex-direction : row ; flex-wrap : wrap ; } Możliwe opcje: nowrap oraz wrap-reverse Więcej na ten temat znajdziesz tutaj flex-flow flex-direction + flex-wrap = flex-flow np. div { flex-flow : column wrap ; } Podstawowe deklaracje - dzieci (flex-items) align-self Ta deklaracja pozwala na przedefiniowanie układu zdefiniowane z pozycji rodzica dla każdego elementu osobno -> patrz align-items flex-start flex-end center baseline stretch flex-grow/shrink Definiuję współczynnik (factor) w jakim poszczególne elementy kurczą (grow) się lub rozrastają (shrink) .obiekt { flex-shrink: 1 ; } .obiekt: nth-of-type ( 2 ) { flex: 2 ; } flex-basis flex-basis definiuje wielkość danego elementu, np. .obiekt { flex-basis: 20% ; <podstawową wartością jest: auto> } flex po raz kolejny flex-grow/shrink + flex-basis = flex Deklaracja flex w ramach dziecka może być użyta w kontekście potrzeby zdefiniowania jego wielkości oraz istotności w rozrastaniu-kurczeniu się wobec jego rodzeństwa - gdzie liczba na początku definiuje skalę a kolejna wielkość wyrażoną w px. Przykładowe zastosowanie: .obiekt { flex: 1 200 px ; } .obiekt: nth-of-type ( 3 ) { flex: 2 200 px ; } Skrótu flex można wykorzystać w następujący sposób .div1 { flex: 0 0 200px; // flex grow, shrink, basis } .div2 { flex: 1; // 0 grow; 1 shrink, basis: auto (całość) } inline-flex / inline flex-block Display inline-flex lub inline flex-box odnosi się do kontenera a nie jego elementów - kolejno do wyświetlania w linii lub w formie blokowej .kontener { display: inline-flex ; } order Definiuję kolejność w jakiej dany element się pojawia np. order: -1 będzie oznaczał, że dany element nadpisze kolejność elementu zawartą w html i wyświetli go przed pierwszym elementem. Gry do ćwiczenia Flexboxa http://www.flexboxdefense.com/ https://flexboxfroggy.com/ Podsumowanie Dla przypomnienia: istotne jest to aby pamiętać, że dziecko rodzica zorganizowane w sposób flexboxowy również może być rodzicem dla własnego dziecka, którego pozycja będzie oparta na flexboxie Źródła (w tym grafik): developer.mozilla.org rejkowicz.pl css-tricks.com grid.malven.co","tags":"css","url":"https://kostyrko.github.io/zfrontu/css-flexbox.html","loc":"https://kostyrko.github.io/zfrontu/css-flexbox.html"},{"title":"VSC - edytowanie barw motywu","text":"W ciągu dnia w Visual Studio Code korzystam jasnego motyw Github Light Theme - Gray . Uznałem jednak, że główny panel okna jest dla mnie za jasny, a różnica barwna pomiędzy panelem bocznym a głównym jest dla mnie za mała. Postanowiłem nadpisać wybrane przeze mnie zmienne w pliku przechowującym spersonalizowane ustawienia VSC settings.json Aby go odnaleźć wystarczy otworzyć ustawienia (np. CTRL+,) i wpisać nazwę wspomnianego pliku, a następnie wybrać opcję Edit in settings.json Command Palet -> Developer : Generate Color Theme From Current Settings Pomocy narzędzia Generate Color Theme From Current Settings wywołałem plik jsonowy ze wszystkimi ustawieniami wykorzystywanego motywu. Do w pliku settings.json odwołałem się do zmiennej workbench.colorCustomizations w sposób przedstawiony jak poniżej, gdzie wkleiłem odpowiednie zmienne, które edytowałęm (opatrzone poniżej przeze mnie komentarzami - zostawiłem również te, których nie zmieniałem dla ogólnej orientacji). W ten sposób nadpisałem ustawienia wykorzystywane motywu \"workbench.colorTheme\" : \"Github Light Theme - Gray\" , \"workbench.colorCustomizations\" : { \"[Github Light Theme - Gray]\" : { \"editor.background\" : \"#ebebeb\" , // główne okno edytora \"activityBar.background\" : \"#d1d1d1\" , // boczny pasek z ikonami \"activityBar.border\" : \"#e0e0e0\" , // granica bocznego paska \"activityBar.foreground\" : \"#000000\" , // kolor ikon na bocznym pasku \"activityBarBadge.background\" : \"#ac3b46\" , // ikona wskazująca na aktywność na bocznym pasku \"button.background\" : \"#d73a49\" , \"button.foreground\" : \"#f0f0f0\" , \"dropdown.background\" : \"#f0f0f0\" , \"dropdown.border\" : \"#b2b2b2\" , \"dropdown.listBackground\" : \"#f0f0f0\" , \"editor.foreground\" : \"#000000\" , \"editor.lineHighlightBackground\" : \"#f0ecd0\" , // linia podświetlająca miejsce edycji \"editor.lineHighlightBorder\" : \"#f0ecd0\" , \"editor.selectionBackground\" : \"#fed442\" , // podświetlenie zaznaczonej linii \"editorGroup.border\" : \"#f0f0f0\" , \"editorGroupHeader.noTabsBackground\" : \"#f0f0f0\" , \"editorGroupHeader.tabsBackground\" : \"#f0f0f0\" , \"editorGroupHeader.tabsBorder\" : \"#f0f0f0\" , \"editorLineNumber.activeForeground\" : \"#000000\" , \"editorLineNumber.foreground\" : \"#aaa9a9\" , // numeracja linii w edytorze \"editorSuggestWidget.highlightForeground\" : \"#d73a49\" , \"editorSuggestWidget.selectedBackground\" : \"#e1e1e1\" , \"editorWidget.background\" : \"#f0f0f0\" , \"editorWidget.border\" : \"#000000\" , \"focusBorder\" : \"#f0f0f000\" , \"foreground\" : \"#000000\" , \"input.background\" : \"#f0f0f0\" , \"input.border\" : \"#b2b2b2\" , \"list.activeSelectionBackground\" : \"#cccccc\" , // podświetlenie wybranego pliku na bocznym menu \"list.activeSelectionForeground\" : \"#000000\" , // kolor fontu wybrengeo przedmiotu w bocznym menu \"list.focusBackground\" : \"#dfdfdf\" , \"list.focusForeground\" : \"#d73a49\" , \"list.highlightForeground\" : \"#d73a49\" , \"list.hoverBackground\" : \"#c2c2c2\" , // podświetlenie najechanego myszką przedmiotu w bocznym menu \"list.hoverForeground\" : \"#fcfcfc\" , // kolor fontu j . w . \"list.inactiveSelectionBackground\" : \"#d6d6d6\" , // kolor tła wybranego przedmiotu - obecnie będącego w edycji \"list.inactiveSelectionForeground\" : \"#d73a49\" , // kolor fontu j . w . \"notificationCenter.border\" : \"#f0f0f0\" , \"notificationCenterHeader.background\" : \"#f0f0f0\" , \"notificationToast.border\" : \"#f0f0f0\" , \"notifications.background\" : \"#f0f0f0\" , \"notifications.border\" : \"#f0f0f0\" , \"panel.border\" : \"#d73a49\" , \"scrollbar.shadow\" : \"#f0f0f0\" , \"sideBar.background\" : \"#e4e4e4\" , // tło bocznego menu !!! \"sideBar.border\" : \"#e0e0e0\" , // granica bocznego menu \"sideBar.foreground\" : \"#000000\" , \"sideBarSectionHeader.background\" : \"#ebebeb\" , // kolor paska sekcji // dolny pasek \"statusBar.background\" : \"#e4e4e4\" , // kolor tła dolnego paska \"statusBar.border\" : \"#e0e0e0\" , \"statusBar.debuggingBackground\" : \"#f0f0f0\" , \"statusBar.debuggingForeground\" : \"#000000\" , \"statusBar.foreground\" : \"#000000\" , \"statusBar.noFolderBackground\" : \"#f0f0f0\" , \"statusBar.noFolderForeground\" : \"#000000\" , \"tab.activeBackground\" : \"#f0f0f0\" , \"tab.activeBorder\" : \"#d73a49\" , \"tab.border\" : \"#f0f0f0\" , \"tab.inactiveBackground\" : \"#f0f0f0\" , \"titleBar.activeBackground\" : \"#f0f0f0\" , \"titleBar.activeForeground\" : \"#000000\" , \"titleBar.border\" : \"#f0f0f0\" , \"titleBar.inactiveBackground\" : \"#f0f0f0\" , \"titleBar.inactiveForeground\" : \"#000000\" , } } Źródła: https://stackoverflow.com/questions/35165362/how-to-edit-default-dark-theme-for-visual-studio-code https://css-tricks.com/creating-a-vs-code-theme/ https://www.youtube.com/watch?v=3Ju74i1MyBg https://www.youtube.com/watch?v=4hdJwHZNDT4 https://www.youtube.com/watch?v=EZHg7Uv-0-8","tags":"VSC","url":"https://kostyrko.github.io/zfrontu/vsc-edytowanie-barw-motywu.html","loc":"https://kostyrko.github.io/zfrontu/vsc-edytowanie-barw-motywu.html"},{"title":"VSC i Ubuntu - dodawanie fontu JetBrains Mono  i Fira Code","text":"Początkowo w Visual Studio Code korzystałem z fontu Monospace , który ze względu na domyślny odstęp pomiędzy literami oraz sam kształt fontu jest przystępny do nauki, z czasem jednak postanowiłem przejść na inny i przyjemniejszych dla oka Fira Code Instalacja na Ubuntu jest bardzo prosta, wystarczy w terminal wpisać komendę ` sudo apt install fonts - firacode ` Następnie należy zdefiniować użycie nowego fontu (wymaga ponownego włączenie VSC!) w settings.json \"editor.fontFamily\" : \"Fira Code\" , // \"editor.fontFamily\" : \"Fira Code Retina\" , // 2 . opcjonalna wersja fontu Fira Code \"editor.fontLigatures\" : true , Po jakimś czesie przeszedłem na JetBrains Mono aby z niego korzystać musiałem postąpić w następujący sposób Pobrać (paczkę z fontem z oficjalnej strony )[https://www.jetbrains.com/lp/mono/] Wypakowałem paczkę w odpowiednim miejscu ( ~/.local/share/fonts) przy użyciu komendy unzip JetBrainsMono - 1 . 0 . 3 . zip - d ~/ . local / share / fonts && fc - cache - fv unzip < nazwa_katalogu . zip > - d ~/ . local / share / fonts && fc - cache - fv Następnie w pliku settings.json dokonałem odpowiednią zmienną \"editor.fontSize\" : 18 , \"editor.fontFamily\" : \"JetBrains Mono\" , \"editor.fontLigatures\" : true , // \"editor.letterSpacing\" : - 0 . 05 , // edytuje odległość pomiędzy literami Źródło: https://www.guyrutenberg.com/2020/01/29/ install-jetbrains-mono-in-debian-ubuntu/ https://www.jetbrains.com/lp/mono/ https://github.com/JetBrains/JetBrainsMono https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager https://freebiesupply.com/blog/top-monospace-fonts-for-developers/","tags":"VSC","url":"https://kostyrko.github.io/zfrontu/vsc-dodawanie-fontu.html","loc":"https://kostyrko.github.io/zfrontu/vsc-dodawanie-fontu.html"},{"title":"VSC - wtyczki warte polecenia","text":"Lista wtyczek wartych polecenia (alfabetycznie) Auto Close Tag Auto Rename Tag Bracket Pair Colorizer (CoenraadS) - koloruje nawiasy należące do tej samej pary odpowiednim kolorem [podobnie działająca wtyczka Rainbow Brackets (2gua)] Better comments (Aaron Bond) - pozwala na wprowadzanie komentarzy różnego typu do kodu JS (poprawia ich widoczność) Code Spell Checker (Street Side Software) - sprawdza błędy ortograficzne ESLint AutoFix on Save Git Extension Pack i Git History (Don Jayamanne) - wtyczka pozwalająca mieć kontrolę i zarządzać GITem HTML Boilerplae (sidthesloth) - Snippetty/Podpowiedzi do HTML Indent rainbow JavaScript (ES6) code snippets - Snippetty/Podpowiedzi do JS Live Sass Compiler (Ritwick Dey) - podstawowa wtyczka do pracy z Sassem, na bieżąco tworzy/kompiluje CSS Live Server (Ritwick Dey) - stawia serwer, który pozwala na podgląd HTML markdownlint (David Anson) - pilnuje składni języka Mark Down Paste and Indent - zamiast tego można również shift+alt+F -> format document Polish - Code Spell Checker (Street Side Software) - sprawdza błędy ortograficzne w języku polskim Prettier - Code formatter (Esban Pereren) [warto dodać w settings.json \"editor.formatOnSave\": true - do listy wyjątków/polecań aby Prettier uruchamiał się w trakcie zapisu pliku] Project Manager (Alessandro Fragnani) - na bocznym pasku pojawia się nowa ikona folderu i dzięki niej mamy szybki dostęp do wybranych projektów scss intellisense show local history (warto dodać do .gitignore frazę .history ) Trailling Spaces Wallaby.js/Dingo ==> Quokka.js <== (Wallaby.js) - wymaga instalacji node.js a dzięki niej w głównym oknie VSC będzie wywoływany JS - Gorąco polecam!!! - sprawdź również Quokka Statusbar Buttons (Skethcbuch) VSC Live Share - pozwala na współdzielenie/edytowanie kodu w czasie rzeczywistym Źródło: https://www.youtube.com/watch?v=om4HQYXgZog","tags":"VSC","url":"https://kostyrko.github.io/zfrontu/vsc-wtyczki.html","loc":"https://kostyrko.github.io/zfrontu/vsc-wtyczki.html"},{"title":"Visual Studio Code - Emmet","text":"Emmet jest zbiorem wtyczek, które pozwalają na szybkie kodowanie (html,xml,css) przy pomocy wykorzystania pojawiających się podpowiedzi rozpoznających wpisane skróty. Nazwa ma być nawiązaniem do brzmienia wyrazu mrówka w j. angielskim (Ant) - owada potrafiącego przenieść przedmioty ważące wielokrotnie więcej od niej samej. Emmet jest \"wbudowany\" w Visual Studio Code i nie wymaga instalacji wtyczek i faktycznie pozwala na szybkie tworzenie przy pomocy pojedynczych linii całych bloków kodu Przykładowe zastosowanie Emmeta oraz jego wyniki: HTML 0) HTML ! - wystarczy wpisać pojedynczy wykrzyknik aby pojawiła się podstawowe elementy strony HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > </ body > </ html > 1) Dzieci, rodzeństwo i multiplikacja > - dziecko + - rodzeństwo * - multiplikacja elementów nav>ul>li+li <nav> <ul> <li></li> <li></li> </ul> </nav> -------- nav>ul>li*3 <nav> <ul> <li></li> <li></li> <li></li> </ul> </nav> 2) Grupowane () - grupowanie elementów pozwala na tworzenie kodu w sposób blokowy (np. dodania rodzeństwa do ustrukturyzowanego wielowarstwowo bloku) div>(div>ul>li*2)+div <div> <div> <ul> <li></li> <li></li> </ul> </div> <div></div> </div> 3) Przechodzenie poziom wyżej (do rodzica) &#94; - pozwala na przejście o poziom wyżej // pozwala na multiplikację znajku &#94;&#94; - rodzic rodzica etc. div+div>p>span&#94;p <div></div> <div> <p><span></span></p> <p></p> </div> div+div>p>span&#94;&#94;div <div></div> <div> <p><span></span></p> </div> <div></div> 4) Klasy, id, numeracja . - nazwa klasy powinna być poprzedzona kropką # - nazwa id powinna być poprzedzona haszem div.container <div class= \"container\" ></div> --- div#container <div id= \"container\" ></div> --- div.container.container2 <div class= \"container container2\" ></div> --- div#container1.container <div id= \"container1\" class= \"container\" ></div> 5) Atrybuty [] - kwadratowe nawiasy powinny być poprzedzone odpowiednim tagiem i zawierać w sobie odpowiedni atrybut p[value='1'] <p value= \"1\" ></p> --- [value='1'] <div value= \"1\" ></div> 6) Automatyczna numeracja $ - numeracja powinna być poprzedzona znakiem dolara, po niej następuje odpowiednie wyrażenie ul>li.item$*3 <ul> <li class= \"item1\" ></li> <li class= \"item2\" ></li> <li class= \"item3\" ></li> </ul> Źródło: https://code.visualstudio.com/docs/editor/emmet https://docs.emmet.io/cheat-sheet/ https://en.wikipedia.org/wiki/Emmet_(software)","tags":"VSC","url":"https://kostyrko.github.io/zfrontu/vsc-emmet.html","loc":"https://kostyrko.github.io/zfrontu/vsc-emmet.html"},{"title":"Visual Studio Code - skróty klawiszowe","text":"Przydatne skróty klawiszowe o których warto pamiętać korzystając z Visual Studio Code Podstawowe skrót klawiszowy Funkcja Ctrl+Shift+P, F1 Wywołaj Command Palette Ctrl+P Wywołaj wyszukiwarkę plików Ctrl+Shift+N Otwórz nowe puste okno VSC Edytowanie Funkcja Ctrl+X Wytnij + opróżnij linię Ctrl+Shift+K Wykasuj linię Ctrl+Shift+\\ Przejdź do sparowanego nawiasu Ctrl+] / Ctrl+[ Dodaj/Usuń wcięcie lini Home / End Idź do początku/końca linii Ctrl+ ↑ / ↓ Skrolowanie góra/dół - pojedyncza linia Alt+ PgUp / PgDn Skrolowanie góra/dół - cała strona Ctrl+K Ctrl+ [ / ] Zwinięcie/rozwinięcie regionu Ctrl+K Ctrl+0 / Ctrl+K Ctrl+J Zwinięcie/rozwinięcie wszystkich regionów Alt+Z Włączenie zwijania tekst Zarządzanie edytorem Funkcja Ctrl+\\ Podział edytora Ctrl+W Zamknięcie edytora Wzbogacone edytowanie Funkcja Ctrl+Space Wywołaj podpowiedź Ctrl+Shift+Space Wywołaj sugerowane parametry F12 Idź do definicji Ctrl+Shift+F10 Podgląd definicji --- Edytowanie wielu Funkcja --- --- Ctrl+Shift+L Zaznaczenie tych samych sekcji oraz ich edycja Ctrl+F2 Zaznaczenie tych samych słów oraz ich edycja lewy-Alt+Click Wstaw kursor w dane miejsce/edycja Wyświetlanie Funkcja Ctrl+B Włączanie bocznej listwy Ctrl+ +/- Powiększenie/pomniejszenie całości Ctrl+V Otwórz podgląd Markdown Ctrl+K Z Motyw zen Znajdź i zmień Funkcja Ctrl+H Znajdź i zmień Nawigacja Funkcja Ctrl+G Idź do lini F8 Przejdź do kolejnego błędu Zarządzanie plikami Funkcja Ctrl+K R Otwórz w plik w eksplorerze Ctrl+K O Otwórz plik w nowym oknie Ctrl+K P Kopiuj ścieżkę edytowanego pliku Terminal Funkcja Ctrl+` Otwórz terminal Ctrl+Shift+` Otwórz nową zakładkę terminala Źródło: https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf dla windowsa: https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf","tags":"VSC","url":"https://kostyrko.github.io/zfrontu/vsc-skroty-klawiszowe.html","loc":"https://kostyrko.github.io/zfrontu/vsc-skroty-klawiszowe.html"},{"title":"Ubuntu - skróty klawiszowe","text":"Przydatne skróty klawiszowe o których warto pamiętać korzystając z Ubuntu Klawisz Super znajduje się pomiędzy lewym Ctrl a Alt - często z logiem Okienka Skrót klawiszowy Funkcja ctrl + alt + T Wywołania terminala Super Wywołanie okna \"aktywności\" Super + Page Down / Page Up Szybkie przełączanie pomiędzy \"przestrzeniami pracy\"/work spaces Super+D Minimalizacja wszystkich okien Super+H Minimalizacja okna aplikacji Shift+PrnScr Zrobienie zrzutu ekranu z możliwością wyboru fragmentu ekranu Super + ← / → Przesunięcie okna aplikacji (skupionej) do wybranego boku i zajęcie połowy ekranu Super + ↑ Maksymalizacja okna aplikacji lewy-Alt + F2 Wywołanie linii komend ctrl + alt + tab Wybór pomiędzy górny, paskiem, oknami a dolnym paskiem - dalsza nawigacja klawiaturą Źródło: https://www.omgubuntu.co.uk/2019/09/useful-ubuntu-keyboard-shortcuts","tags":"ubuntu","url":"https://kostyrko.github.io/zfrontu/ubuntu-skroty-klawiszowe.html","loc":"https://kostyrko.github.io/zfrontu/ubuntu-skroty-klawiszowe.html"},{"title":"Wprowadzenie do Linuxa i Ubuntu - podstawowe komendy","text":"Linux Komenda Objaśnienie ls okaż wszystkie pliki i katalogi w danym katalogu ls -a pokaż wszystkie pliki i katalogi łącznie z ukrytymi cd dir zmień katalog na wskazany cd zmień katalog na \"domowy\" pwd wskaż adres bieżącego katalogu (print working dir) mkdir dir stwórz katalog (make) rm file usuń plik (remove) rem -r dir usuń katalog rm -f file forsuj usunięcie pliku touch file stwórz lub odśwież plik head file wyświetl pierwsze 10 linii pliku ps wyświetl aktualny aktywny proces top wyświetl wszystkie procesy kill pid zakończ proces o wybranym id killall proc zakończ wszystkie procesy o wybranej nazwie chmod 777 czytanie i edytowanie pliku dla wszystkich grep -r patern dir szukajwzoru w katalogu locate file znajdź plik Ubuntu Komenda Objaśnienie sudo command wywołaj komendę jako administrator sudo -s otwórz powłokę jako root Źródła: https://garywoodfine.com/linux-terminal-command-cheat-sheets/","tags":"ubuntu","url":"https://kostyrko.github.io/zfrontu/linux-ubuntu-komendy.html","loc":"https://kostyrko.github.io/zfrontu/linux-ubuntu-komendy.html"},{"title":"Ubuntu - zamiana bobra na gronostaja","text":"Do tej pory pracowałem na Bionicznym Bobrze (Ubuntu 18.04) ale gdy system zaproponował mi aktualizację na Eonicznego Gronostaja (19.10) postanowiłem z niej skorzystać. Zmiana nie obyła się bez małego zgrzytu. Zawieszający się ekran ładowania Ubuntu 19.10 po aktualizacji Ekran ładowania (tzw. splash screen) się zawiesił, musiałem wyłączyć komputer ręcznie a następnie w momencie pojawienia się Gruba wybrałęm literę 'e' - pozwalającą na edycję ustawień opcji włączania systemu. Za pierwszym razem system od razu się uruchomił bez mojej konieczności zmiany ustawień. W trakcie kolejnego włączani powtórzył się ten sam problem. Tym razem postąpiłem zgodnie z opisanymi w tym miejscu krokami - opcję quiet splash_ zmieniłem na nonsplash system uruchomił się bez większych problemów. Po uruchomieniu się systemu nie przechodziłem kolejnych kroków opisanych w podlinkowanym wyżej poście tylko zaktualizowałem gruba sudo update - grub Na pierwszy rzut oka faktycznie Gronostaj jest szybszy od Bobra w trakcie uruchamiania i zdaje się działać płynniej. Ubuntu 19.10 zmiana motywu na ciemny Bóbr przyzwyczaił mnie do miłego dla oka ciemnego motywu oprogramowania. Fioletowy terminal z zielonymi i jasnymi literami również przypadł mi do gustu (na szczęście zmiana z podstawowego jasnego na ciemny motyw jest prosta) niestety Gronostaj już ciemnego motywu aplikacji nie posiada w trybie podstawowym i trzeba go dodać. W pierwszej kolejności należy zainstalować program Gnome Tweaks Instalowanie programu do zarządzania wyglądem/skórką Ubuntu sudo apt install gnome - tweak - tool W zakładce Appearance -> Themes -> Aplications -> Adwait - skórka podstawowa można zmienić np. na Yaru-dark (z tej obecnie korzystam - zrobiło się nieco ciemniej niż za kadencji Bobra, ale pewnie szybko się przyzwyczaję) Jednak aby powrócić do ciemnych ustawień aplikacji należy zmienić opcję Shell, ta jednak jest nieaktywna Shell -> ! - nieaktywny Na szczęście rozwiązanie trudne nie jest i postępując zgodnie z opisanymi w tym miejscu krokami można dodać nową/starą skórkę - (motywem Gronostaja jest fioletowy i trzeba przyznać, że widoczność tego koloru na ciemnym tle jest słabsza od bobrowego pomarańczowego) Instalujemy skórkę Yaru sudo apt install git meson sassc libglib2 . 0 - dev libxml2 - utils git clone https : // github . com / ubuntu / yaru cd yaru git checkout 2 c22b5178f321f62f8d914e27b4739eecb7e3b6b meson build cd build sudo ninja install (zwróć uwagę, że wybieramy konkretną wersję, która posiada czarną skórkę) Instalujemy rozszerzenie GNOME Shell User themes sudo apt install gnome-tweaks gnome-shell-extensions Restartujemy GNOME Shell ALT + F2 następnie wpisujemy r i wybieramy ENTER W (GNOME) Tweaks wybieramy zakładkę Extensions i włączamy User themes wyłączamy i włączamy program Przechodzimy do zakładki Appearance i możemy w Shell wybrać Yaru-dark Dodatkowe opcje w nowej wersji Ubuntu (które do tej pory zauważyłem) W momencie wybierania linka, który otwiera przeglądarkę pojawiła się nowa opcja configure trusted domains Więcej opcji pojawiło się również przy prawym kliknięciu na ikonę przeglądarki Chromium W podstawowym oknie ustawień (tam gdzie się również wyłącza system) doszła parę nowych ustawień w tym nowa opcja linkująca do zarządzania opcjami zasilania Prawym przyciskiem na głównym ekranie możemy również przejść do ustawień ekranu Część ikon zyskała nową skórkę Zacząłem korzystać z motywu nocnego (podoba mi się opcja dostosowania nasilenia filtra) W przyszłym miesiącu pojawia się kolejna wersja Ubuntu i pewnie również skorzystam z aktualizacji jak tylko mi system taką zaproponuje","tags":"ubuntu","url":"https://kostyrko.github.io/zfrontu/ubuntu-aktualizacja-gronostaj.html","loc":"https://kostyrko.github.io/zfrontu/ubuntu-aktualizacja-gronostaj.html"},{"title":".gitignore","text":".gitignore - plik o takiej dokładnie nazwie (rozszerzenie bez nazwy), które zawiera reguły wykluczające z systemu kontroli wersji - GIT konkretne pliki oraz foldery innymi słowy te, której mają być ignorowane przez git. Sam plik powinien znajdować się w folderze źródłowym. Sposoby na wykluczenie pliki: .gitignore .vscode pliki po rozszerzeniu tzw. dzika karta: * . txt ~ - kończące się na daną frazę index . html ~ ! - negacja np. wykazanie pliku, który ma nie być ignorowany !nowy_folder/nowy_plik.txt foldery: nazwa_folderu/ ** - każda ilość folderów **/ folder logs /**/ * . log # - komentarz # to jest komentarz Źródła: https://www.pluralsight.com/guides/how-to-use-gitignore-file https://git-scm.com/docs/gitignore https://www.atlassian.com/git/tutorials/saving-changes/gitignore https://www.coderomeos.org/gitignore-file-and-its-usage","tags":"git","url":"https://kostyrko.github.io/zfrontu/git-gitignore.html","loc":"https://kostyrko.github.io/zfrontu/git-gitignore.html"},{"title":"Pelican blog - rozszerzenia","text":"Planowany -> CMS https://blurringexistence.net/pelicide-demo/ Źródło: https://github.com/iksteen/pelicide https://github.com/FedericoCeratto/shoebill https://github.com/mirekdlugosz/pelican-metadata-generator http://jsliang.com/sublime-pelican/","tags":"pelican-blog","url":"https://kostyrko.github.io/zfrontu/pelican-rozszerzenia.html","loc":"https://kostyrko.github.io/zfrontu/pelican-rozszerzenia.html"},{"title":"Pelican blog - GitHub pages","text":"Krótka instrukcja hostowania bloga przy pomocy GitHub-Pages Instalowanie gh-pages dla Pelicana pip install pelican ghp-import Markdown Sklonowanie pustego repozytorium / Repo wcześniej stworzone na stronie github.com git clone https://GitHub.com/username/username.github.io Stworzenie nowej gałęzi content gdzie przechowywane będą surowe/źródłowe pliki - Git Hub pages będzie czerpało z głównej gałęzi master git checkout -b content (Alternatywnie można korzystać z dwóch repozytoriów - gdzie na jednym są przechowywane pliki źródłowe a na kolejnym jest hostowana strona) Tworzenie treści - stron statycznych gotowej do publikacji. W terminali wpisz (gdzie wyjściowym folderem jest source a output miejsce zapisania plików do wgrania do repozytorium na githubie) - praca na gałęzi content : pelican content - o output - s publishconf . py np . (gdzie -s oznacza settings/ustawienia a -o miejsce w którym mają się zapisać pliki) np. pelican content - o .. / .. / zfrontu / site - s publishconf . py Tworzenie plików do wgrania do repozytorium (gdzie output - miejsce zapisu plików może być np. '.' jeśli w danym folderze) ale tego do gałęzi master Przykład zapisu komendy ghp - import - m \"Generate Pelican site\" -- no - jekyll - b master output ghp - import - m \"Generate Pelican site\" -- no - jekyll - b master . Schemat: ghp - import - m \"wiadomość\" -- no - jekyll - b [ nazwa_gałęzi ] [ folder_zapisu_danych ] Wypchnięcie do repozytorium git push origin master (alternatywnie można zautomatyzować ten proces make publish więcej na ten temat tutaj ) Dodawanie nowej treści do gałęzi content git add content git commit - m ' treść wiadomości git push origin content Źródło: https://opensource.com/article/19/5/run-your-blog-github-pages-python","tags":"pelican-blog","url":"https://kostyrko.github.io/zfrontu/pelican-blog-ghpages.html","loc":"https://kostyrko.github.io/zfrontu/pelican-blog-ghpages.html"},{"title":"Markdown - podstawowa składnia","text":"Markdown jest lekkim językiem znaczników (Lightweight markup language - LML) służącym do formatowanie tekstu (za: Wikipedia oraz Ang. - Wikipedia ). Wprowadzono go po raz pierwszy w 2004 i celem autorów było stworzenie języka, który jest prosty do pisania oraz czytania, a przy okazji miał być prosty w konwersji to języka XHTML lub HTML. Szybkie wprowadzenie do języka Markdown Nagłówki/Headers # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Nagłówek1 Nagłówek2 Nagłówek3 Nagłówek4 Nagłówek5 Nagłówek6 Style liniowe/inlinowe ** bold ** ~~ crossed ~~ ---strikethrough text--- * italics * pogrubiony ~~przekreślony~~ (tu się nie sprawdza) ---wykreślony tekst--- (również się nie sprawdza :( ) italik Obrazy ! [ Nazwa obrazu / alternatywny tekst ]( / sciezka / obrazu . jpg ) można również: ! [ Alt Text ]( url ) Obraz jako link schemat [ ! [ alternatywny - tekst ]( / sciezka / obrazu . jpg )]( / sciezka / odsylajaca . html ) Centrowanie wybranego! obrazu wobec rodzica markdown nie ma opcji pozwalającej na centrowanie/pozycjonowanie elementów stąd należy zrobić to albo z pozycji html i inlinowego css albo wykorzystać css i odpowiednio otagować obraz (jestem zwolennikiem tej drugiej opcji ponieważ wprowadza mniej ingerencji w sam markdown) dodając na końcu odnośnika hasztag z nazwą atrybutu np. center Schemat ! [ Nazwa obrazu / alternatywny tekst ]( / sciezka / obrazu . jpg # center ) W CSS należy dodać deklaracje img [ src *= '#center' ] { display : block ; margin : auto ; } Zmiana wielkości obrazu ! [ Nazwa obrazu ]( / sciezka / obrazu . jpg ){ width = \"50%\" } ! [ Nazwa obrazu ]( / sciezka / obrazu . jpg | width = 100 ) ! [ Nazwa obrazu ]( / sciezka / obrazu . jpg = 250 x250 ) ! [ bobr ]( gronostaj . png ){ : height = \"40px\" width = \"40px\" } Wideo <a href= \"http://www.youtube.com/watch?feature=player_embedded&v=YOUTUBE_VIDEO_ID_HERE \" target= \"_blank\" ><img src= \"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\" alt= \"IMAGE ALT TEXT HERE\" width= \"240\" height= \"180\" border= \"10\" /></a> Linki Zewnętrzne [ nazwa obiektu / strony ]( http : // przykladowy . link . com ) [ Notatki z frontu ]( https : // kostyrko . github . io / zfrontu / ) Notatki z frontu można również: https : // kostyrko . github . io / zfrontu / https://kostyrko.github.io/zfrontu/ :::tu akurat nie działa za to np. w VSC się sprawdza ::: Wewnętrzne link działający w ramach strony [ Strony warte odwiedzenia ] ( # strony ) gdzie nag łó wek do kt ó rego jest odwo ł anie : ### Strony warte odwiedzenia {# strony } Strony warte odwiedzenia lub (pewniejsza opcja, ale wykorzystująca HTML) [Strony warte odwiedzenia](#strony) gdzie: <a name= \"strony\" > ### Strony warte odwiedzenia </a> kolejna możliwość [ sprawdź również tą część tekstu ]( # strony ) gdzie : #### Strony warte odwiedzenia ::: ta opcja u mnie na blogu się nie sprawdziła ::: Wstawianie kodu Kod w lini tekstu ` back quote ` odwrotny apostrof - na lewo od 1 (tam gdzie lambda) Kod blokowy Potrójny zwrotny apostrof ``` no = \"Python syntax highlighting\" print s ``` no = \"Python syntax highlighting\" print s Ze wskazaniem języka :) ``` python yes = \" Python syntax highlighting \" print s nice for < bold > html </ bold > ``` ``` javascript var s = \" JavaScript syntax highlighting \" ; alert ( s ) ; ``` ``` html nice for < bold > html </ bold > ``` s = \"Python syntax highlighting\" print s var s = \"JavaScript syntax highlighting\" ; alert ( s ); nice for < bold > html </ bold > Blokowe cytaty > Blokowe cytowanie wybranego fragmentu tekstu Blokowe cytowanie wybranego fragmentu tekstu Tabela | Kolumna 1 | Kolumna 2 | | ---|---| | Wartość 1 | Wartość 2 | | Wartość 3 | Wartość 4 | | Wartość 5 | Wartość 6 | | Kolumna 1 | Kolumna 2 | Kolumna 3 | ---|---|---| /* wszystkie linie powinny być pionowe */ | Wartość 1 | Wartość 2 | Wartość 3 | | Wartość 4 | Wartość 5 | Wartość 6 | | Wartość 7 | Wartość 8 | Wartość 9 | Kolumna 1 Kolumna 2 Kolumna 3 Wartość 1 Wartość 2 Wartość 3 Wartość 4 Wartość 5 Wartość 6 Wartość 7 Wartość 8 Wartość 9 | Kolumna 1 | Kolumna 2 | | ---|---| | Wartość 1 | Wartość 2 | | Wartość 3 | Wartość 4 | | Wartość 5 | Wartość 6 | Tworzenie list Uporządkowana lista 1 . Obiekt 1 1 . Obiekt 2 1 . Obiekt 3 1 . Obiekt 3 a 1 . Obiekt 3 b Obiekt 1 Obiekt 2 Obiekt 3 Obiekt 3a Obiekt 3b Nieuporządkowana: * Obiekt 1 * Obiekt 2 * Obiekt 3 * obiekt 3 . 1 * obiekt 3 . 2 Obiekt 1 Obiekt 2 Obiekt 3 obiekt 3.1 obiekt 3.2 Styl mieszany: 1 . Obiekt1 2 . Obiekt2 * Obiekt3 Obiekt1 Obiekt2 Obiekt3 Tworzenie linii Dwa z możliwych sposobów (potrójne znaki): ___ ( podkreślnik ) --- (łącznik) Emotki :smile: :::nie działa :( ::: Strony warte odwiedzenia www.markdownguide.org - nauka języka, wersja podstawowa jak i rozszerzona oraz Cheat Sheet Dillinger - onlinowy edytor języka Markdown - w jednym oknie się wpisuje w kolejnym widać tego efekty www.markdowntutorial.com/ - interaktywna nauka języka Markdown online Markdown cheat sheet Emoji cheat sheet Wpis na Wikipedii poświęcony językowi Markdown my heading text","tags":"markdown","url":"https://kostyrko.github.io/zfrontu/markdown.html","loc":"https://kostyrko.github.io/zfrontu/markdown.html"},{"title":"Pelican blog - instalacja","text":"Gdy szukałem platformy do tworzenia bloga, wybór w pierwszej kolejności padł na Jakyll (Ruby on Rails), rozważałem również Hugo (Go), ostatecznie padło jednak na Pelicana bo ten \"stoi\" na Pythonie, choć jest dużo mniej popularny od wcześniej wspomnianych generatorów stron statycznych. W przyszłości planuję również wypróbować Lektora , który również wywodzi się z Pythona W trakcie tworzenia bloga przy pomocy Pelicana korzystałem z informacji zawartych na tym blogu posiłkując się informacjami zawartymi w dokumentacji Pelicana oraz Flexa (wybranego przeze mnie motywu) - patrz źródła ) jak i repozytoriów na githubie wykorzystujących ten sam motyw. Instalacja pip install pelican pip install markdown Uruchomienie pelican - quickstart przygotowanie struktury folderów blog └── output └── source Wypełnienie podstawowych informacji Where do you want to create your new web site ? [.] . # wskazanie folderu w kt ó rym ma by ć zapisana strona What will be the title of this web site ? ... z frontu # nazwa Who will be the author of this web site ? kostyrko # autor What will be the default language of this web site ? [ English ] pl # j ę zyk Do you want to specify a URL prefix ? e . g ., https : // example . com ( Y / n ) n # wskazanie adresu strony Do you want to enable article pagination ? ( Y / n ) Y # ograniczona ilo ść post ó w / artyku łó w na stronie - paginacja What is your time zone ? [ Europe / Paris ] Europe / Warsaw # strefa czasowa Do you want to generate a tasks . py / Makefile to automate generation and publishing ? ( Y / n ) Y Powyżej zawarte informacje będą zawarte w pliku pelicanconf.py i można je zmienić Uzyskany efekt: blog ├── output └── source ├── content ( folder ) ├── output ( folder ) ├── pelicanconf . py └── publishconf . py w pliku pelicanconf.py definiujemy miejsce w którym będzie generować się statyczna strona OUTPUT_PATH = '../output' Tworzymy zawartość strony komendą: pelican content Tworzymy server lokalny pozwalający na przeglądanie strony (:8000) pelican --listen Przeglądamy osiągnięty efekt: http://127.0.0.1:8000/ Przydatne liki i źródła: mBuild A Blog With Pelican And Python - Pt. 1 Installation & Theme Build A Blog With Pelican And Python - Pt. 2 Creating Content How to Create Your First Static Site with Pelican and Jinja2 Ustawienia dla Pelican blog - pelicanconf.py Dokumentacja Pelican blog Flex Inne generatory stron statycznych korzystające z Pythona: Lektor - posiada wbudowany CMS (Content Management System) Motywy warte uwagi: Pure","tags":"pelican-blog","url":"https://kostyrko.github.io/zfrontu/pelican-blog-instalacja.html","loc":"https://kostyrko.github.io/zfrontu/pelican-blog-instalacja.html"}]};