<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>...z frontu - testing</title><link href="https://kostyrko.github.io/zfrontu/" rel="alternate"></link><link href="https://kostyrko.github.io/zfrontu/feeds/testing.atom.xml" rel="self"></link><id>https://kostyrko.github.io/zfrontu/</id><updated>2021-06-25T10:00:00+02:00</updated><subtitle>JS/CSS/PY</subtitle><entry><title>Dobre zasady testowania</title><link href="https://kostyrko.github.io/zfrontu/testing-good-practices.html" rel="alternate"></link><published>2021-06-25T10:00:00+02:00</published><updated>2021-06-25T10:00:00+02:00</updated><author><name>mkostyrko</name></author><id>tag:kostyrko.github.io,2021-06-25:/zfrontu/testing-good-practices.html</id><summary type="html">&lt;p&gt;&lt;img alt="testing" src="https://static-cms.hotjar.com/documents/conducting-usability-test_yon4BQT.svg"&gt;&lt;/p&gt;
&lt;p&gt;Niedawno odbyła się zdalna konferencja prowadzona przez Applitools oraz Cypress nazwana Front-End Test Fest 2021. Jedeno z wystąpień było poświęcone dobrym praktykom pisania testów (link w źródłach) i dzisiejszy wpis jest ekstraktem z tego wystąpienia&lt;/p&gt;
&lt;h3&gt;Główna zasada: testy powinny być proste - "flat test desing"&lt;/h3&gt;
&lt;p&gt;Pisanie testów nie powinno być realizowane …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="testing" src="https://static-cms.hotjar.com/documents/conducting-usability-test_yon4BQT.svg"&gt;&lt;/p&gt;
&lt;p&gt;Niedawno odbyła się zdalna konferencja prowadzona przez Applitools oraz Cypress nazwana Front-End Test Fest 2021. Jedeno z wystąpień było poświęcone dobrym praktykom pisania testów (link w źródłach) i dzisiejszy wpis jest ekstraktem z tego wystąpienia&lt;/p&gt;
&lt;h3&gt;Główna zasada: testy powinny być proste - "flat test desing"&lt;/h3&gt;
&lt;p&gt;Pisanie testów nie powinno być realizowane w sposób identyczny jak pisanie kodu, prostota powinna znajdować się na pierwszym miejscu, nawet kosztem powtarzalności kodu. Oznacza to,  że test o ile to możliwe nie powinien korzystać z dodatkowej abstrakcji i cechować się płaskim modelem (bez zagłębień).&lt;/p&gt;
&lt;h3&gt;Cel testu powinien być zrozumiały -&amp;gt; "get test instantly"&lt;/h3&gt;
&lt;p&gt;Opis testu powinien przedstawiać w sposób klarowny jego intencje, aby to było możliwe należy spełnić 3 warunki i opisać:&lt;/p&gt;
&lt;p&gt;1) co jest testowane (np. właściwość elementu)&lt;/p&gt;
&lt;p&gt;2) w jakich warunkach jest testowane (np. na użytkowania właściwości)&lt;/p&gt;
&lt;p&gt;3) jaki jest oczekiwany efekt&lt;/p&gt;
&lt;h3&gt;Układ testu - zasada AAA (Arrange, Act, Assert)&lt;/h3&gt;
&lt;p&gt;-&amp;gt; Arrange = setup scenariusza (zmienne, mockowanie etc.)&lt;/p&gt;
&lt;p&gt;-&amp;gt; Act = przeprowadzenie akcji, które prowadzą do końcowego rezultatu&lt;/p&gt;
&lt;p&gt;-&amp;gt; Assert = sprawdzanie wykonania się scenariusza&lt;/p&gt;
&lt;h3&gt;Niezależność testów&lt;/h3&gt;
&lt;p&gt;Każdy z testów powinien posiadać własne izolowane środowisko i nie powinien być zależny od wyniku poprzedzającego go testu. Oznacza, to że testy nie powinny być od siebie zależne ani ze sobą powiązane w żaden sposób - środowisko danych powinno być takie samo dla każdego testu.&lt;/p&gt;
&lt;h3&gt;Realistyczne dane&lt;/h3&gt;
&lt;p&gt;Jednym z elementów czytelności testu jest wprowadzanie realistycznych danych (nie bazowanie na tzw. place holderach jak np Foo Bar), w ten sposób można w prostszy sposób zrozumieć powiązanie z testowanym produktem&lt;/p&gt;
&lt;h3&gt;Selektory&lt;/h3&gt;
&lt;p&gt;Nie należy korzystać z selektorów, które mogą ulec zmianie - zamiast tego najlepiej podczepiać się pod właściwości, które są widoczne lub istotne również dla użytkownika (np. poprzez cy.contains()) lub przypisywanie testowych atrybutów typu data do testowanego obiektu (np. data-cy).&lt;/p&gt;
&lt;h3&gt;Czekanie...&lt;/h3&gt;
&lt;p&gt;Zamiast arbitralnie ustalonego czakania na wykonanie się jakiegoś testowego zadania (w dużej mierze będzie to zależne od zapytania HTTP) można ustawić czekanie na pozytywną odpowiedź tego zapytania&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    cy.wiat(&amp;#39;@request&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;        .its(&amp;#39;response.statusCode&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;        .should(&amp;#39;equal&amp;#39;, 200);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;Źródło:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=uvJwWQLaVqU&amp;amp;list=PL8GlT7H3xOcIXrl0nXmyDBYztCKcVqQQg&amp;amp;index=6&amp;amp;ab_channel=Cypress.io"&gt;Front-End Test Fest 2021: Recordings - It's a (Testing) Trap! - Common Testing Pitfalls and How to Solve Them&lt;/a&gt;&lt;/p&gt;</content><category term="testing"></category><category term="cypress"></category><category term="testing"></category><category term="good practices"></category></entry></feed>